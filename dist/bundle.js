!function(t){var n={};function e(r){if(n[r])return n[r].exports;var i=n[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,e),i.l=!0,i.exports}e.m=t,e.c=n,e.d=function(t,n,r){e.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:r})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,n){if(1&n&&(t=e(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(e.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var i in t)e.d(r,i,function(n){return t[n]}.bind(null,i));return r},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},e.p="",e(e.s=5)}([function(t,n,e){var r=e(1);"string"==typeof r&&(r=[[t.i,r,""]]);var i={hmr:!0,transform:void 0,insertInto:void 0};e(3)(r,i);r.locals&&(t.exports=r.locals)},function(t,n,e){(t.exports=e(2)(!1)).push([t.i,"body {\r\n    font-size: 12px;\r\n    font-family: 'Abel', sans-serif;\r\n    margin-top: 20px;\r\n}\r\n\r\nli{\r\n    margin-left: 0px;\r\n}\r\n\r\n.x.axis path,.x.axis line {\r\n    fill: none;\r\n    stroke: none;\r\n}\r\n\r\n.y.axis path {\r\n    fill: none;\r\n}\r\n\r\n.y.axis line {\r\n    fill: none;\r\n    stroke: #eeeeee;\r\n    shape-rendering: crispEdges;\r\n}\r\n\r\n.x.axis text, .y.axis text{\r\n    font-size: 10px;\r\n    fill:grey;\r\n}\r\n\r\n.line {\r\n    fill: none;\r\n    stroke-width: 2px;\r\n}\r\n\r\n.tick line{\r\n    stroke: #e0e1e1;\r\n    opacity: 1;\r\n}\r\n\r\n#title, .explain{\r\n    text-indent: 15px;\r\n}\r\n\r\n#credit{\r\n    color:grey;\r\n    text-indent: 20px;\r\n    line-height: 30px;\r\n}\r\n\r\na:hover{\r\n    cursor:pointer;\r\n}\r\n",""])},function(t,n,e){"use strict";t.exports=function(t){var n=[];return n.toString=function(){return this.map(function(n){var e=function(t,n){var e=t[1]||"",r=t[3];if(!r)return e;if(n&&"function"==typeof btoa){var i=(f=r,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(f))))+" */"),a=r.sources.map(function(t){return"/*# sourceURL="+r.sourceRoot+t+" */"});return[e].concat(a).concat([i]).join("\n")}var f;return[e].join("\n")}(n,t);return n[2]?"@media "+n[2]+"{"+e+"}":e}).join("")},n.i=function(t,e){"string"==typeof t&&(t=[[null,t,""]]);for(var r={},i=0;i<this.length;i++){var a=this[i][0];null!=a&&(r[a]=!0)}for(i=0;i<t.length;i++){var f=t[i];null!=f[0]&&r[f[0]]||(e&&!f[2]?f[2]=e:e&&(f[2]="("+f[2]+") and ("+e+")"),n.push(f))}},n}},function(t,n,e){var r,i,a={},f=(r=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===i&&(i=r.apply(this,arguments)),i}),o=function(t){var n={};return function(t,e){if("function"==typeof t)return t();if(void 0===n[t]){var r=function(t,n){return n?n.querySelector(t):document.querySelector(t)}.call(this,t,e);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(t){r=null}n[t]=r}return n[t]}}(),c=null,u=0,s=[],h=e(4);function l(t,n){for(var e=0;e<t.length;e++){var r=t[e],i=a[r.id];if(i){i.refs++;for(var f=0;f<i.parts.length;f++)i.parts[f](r.parts[f]);for(;f<r.parts.length;f++)i.parts.push(v(r.parts[f],n))}else{var o=[];for(f=0;f<r.parts.length;f++)o.push(v(r.parts[f],n));a[r.id]={id:r.id,refs:1,parts:o}}}}function d(t,n){for(var e=[],r={},i=0;i<t.length;i++){var a=t[i],f=n.base?a[0]+n.base:a[0],o={css:a[1],media:a[2],sourceMap:a[3]};r[f]?r[f].parts.push(o):e.push(r[f]={id:f,parts:[o]})}return e}function p(t,n){var e=o(t.insertInto);if(!e)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=s[s.length-1];if("top"===t.insertAt)r?r.nextSibling?e.insertBefore(n,r.nextSibling):e.appendChild(n):e.insertBefore(n,e.firstChild),s.push(n);else if("bottom"===t.insertAt)e.appendChild(n);else{if("object"!=typeof t.insertAt||!t.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var i=o(t.insertAt.before,e);e.insertBefore(n,i)}}function _(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t);var n=s.indexOf(t);n>=0&&s.splice(n,1)}function b(t){var n=document.createElement("style");if(void 0===t.attrs.type&&(t.attrs.type="text/css"),void 0===t.attrs.nonce){var r=function(){0;return e.nc}();r&&(t.attrs.nonce=r)}return y(n,t.attrs),p(t,n),n}function y(t,n){Object.keys(n).forEach(function(e){t.setAttribute(e,n[e])})}function v(t,n){var e,r,i,a;if(n.transform&&t.css){if(!(a="function"==typeof n.transform?n.transform(t.css):n.transform.default(t.css)))return function(){};t.css=a}if(n.singleton){var f=u++;e=c||(c=b(n)),r=m.bind(null,e,f,!1),i=m.bind(null,e,f,!0)}else t.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(e=function(t){var n=document.createElement("link");return void 0===t.attrs.type&&(t.attrs.type="text/css"),t.attrs.rel="stylesheet",y(n,t.attrs),p(t,n),n}(n),r=function(t,n,e){var r=e.css,i=e.sourceMap,a=void 0===n.convertToAbsoluteUrls&&i;(n.convertToAbsoluteUrls||a)&&(r=h(r));i&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(i))))+" */");var f=new Blob([r],{type:"text/css"}),o=t.href;t.href=URL.createObjectURL(f),o&&URL.revokeObjectURL(o)}.bind(null,e,n),i=function(){_(e),e.href&&URL.revokeObjectURL(e.href)}):(e=b(n),r=function(t,n){var e=n.css,r=n.media;r&&t.setAttribute("media",r);if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}.bind(null,e),i=function(){_(e)});return r(t),function(n){if(n){if(n.css===t.css&&n.media===t.media&&n.sourceMap===t.sourceMap)return;r(t=n)}else i()}}t.exports=function(t,n){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(n=n||{}).attrs="object"==typeof n.attrs?n.attrs:{},n.singleton||"boolean"==typeof n.singleton||(n.singleton=f()),n.insertInto||(n.insertInto="head"),n.insertAt||(n.insertAt="bottom");var e=d(t,n);return l(e,n),function(t){for(var r=[],i=0;i<e.length;i++){var f=e[i];(o=a[f.id]).refs--,r.push(o)}t&&l(d(t,n),n);for(i=0;i<r.length;i++){var o;if(0===(o=r[i]).refs){for(var c=0;c<o.parts.length;c++)o.parts[c]();delete a[o.id]}}}};var g,x=(g=[],function(t,n){return g[t]=n,g.filter(Boolean).join("\n")});function m(t,n,e,r){var i=e?"":r.css;if(t.styleSheet)t.styleSheet.cssText=x(n,i);else{var a=document.createTextNode(i),f=t.childNodes;f[n]&&t.removeChild(f[n]),f.length?t.insertBefore(a,f[n]):t.appendChild(a)}}},function(t,n){t.exports=function(t){var n="undefined"!=typeof window&&window.location;if(!n)throw new Error("fixUrls requires window.location");if(!t||"string"!=typeof t)return t;var e=n.protocol+"//"+n.host,r=e+n.pathname.replace(/\/[^\/]*$/,"/");return t.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(t,n){var i,a=n.trim().replace(/^"(.*)"$/,function(t,n){return n}).replace(/^'(.*)'$/,function(t,n){return n});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(a)?t:(i=0===a.indexOf("//")?a:0===a.indexOf("/")?e+a:r+a.replace(/^\.\//,""),"url("+JSON.stringify(i)+")")})}},function(t,n,e){"use strict";e.r(n);e(0);var r=function(t,n){return t<n?-1:t>n?1:t>=n?0:NaN},i=function(t){var n;return 1===t.length&&(n=t,t=function(t,e){return r(n(t),e)}),{left:function(n,e,r,i){for(null==r&&(r=0),null==i&&(i=n.length);r<i;){var a=r+i>>>1;t(n[a],e)<0?r=a+1:i=a}return r},right:function(n,e,r,i){for(null==r&&(r=0),null==i&&(i=n.length);r<i;){var a=r+i>>>1;t(n[a],e)>0?i=a:r=a+1}return r}}};var a=i(r),f=a.right,o=(a.left,f);var c=function(t,n){var e,r,i,a=t.length,f=-1;if(null==n){for(;++f<a;)if(null!=(e=t[f])&&e>=e)for(r=i=e;++f<a;)null!=(e=t[f])&&(r>e&&(r=e),i<e&&(i=e))}else for(;++f<a;)if(null!=(e=n(t[f],f,t))&&e>=e)for(r=i=e;++f<a;)null!=(e=n(t[f],f,t))&&(r>e&&(r=e),i<e&&(i=e));return[r,i]},u=Array.prototype,s=(u.slice,u.map,Math.sqrt(50)),h=Math.sqrt(10),l=Math.sqrt(2),d=function(t,n,e){var r,i,a,f,o=-1;if(e=+e,(t=+t)===(n=+n)&&e>0)return[t];if((r=n<t)&&(i=t,t=n,n=i),0===(f=p(t,n,e))||!isFinite(f))return[];if(f>0)for(t=Math.ceil(t/f),n=Math.floor(n/f),a=new Array(i=Math.ceil(n-t+1));++o<i;)a[o]=(t+o)*f;else for(t=Math.floor(t*f),n=Math.ceil(n*f),a=new Array(i=Math.ceil(t-n+1));++o<i;)a[o]=(t-o)/f;return r&&a.reverse(),a};function p(t,n,e){var r=(n-t)/Math.max(0,e),i=Math.floor(Math.log(r)/Math.LN10),a=r/Math.pow(10,i);return i>=0?(a>=s?10:a>=h?5:a>=l?2:1)*Math.pow(10,i):-Math.pow(10,-i)/(a>=s?10:a>=h?5:a>=l?2:1)}function _(t,n,e){var r=Math.abs(n-t)/Math.max(0,e),i=Math.pow(10,Math.floor(Math.log(r)/Math.LN10)),a=r/i;return a>=s?i*=10:a>=h?i*=5:a>=l&&(i*=2),n<t?-i:i}var b=function(t,n){var e,r,i=t.length,a=-1;if(null==n){for(;++a<i;)if(null!=(e=t[a])&&e>=e)for(r=e;++a<i;)null!=(e=t[a])&&e>r&&(r=e)}else for(;++a<i;)if(null!=(e=n(t[a],a,t))&&e>=e)for(r=e;++a<i;)null!=(e=n(t[a],a,t))&&e>r&&(r=e);return r},y=function(t){for(var n,e,r,i=t.length,a=-1,f=0;++a<i;)f+=t[a].length;for(e=new Array(f);--i>=0;)for(n=(r=t[i]).length;--n>=0;)e[--f]=r[n];return e},v=function(t,n){var e,r,i=t.length,a=-1;if(null==n){for(;++a<i;)if(null!=(e=t[a])&&e>=e)for(r=e;++a<i;)null!=(e=t[a])&&r>e&&(r=e)}else for(;++a<i;)if(null!=(e=n(t[a],a,t))&&e>=e)for(r=e;++a<i;)null!=(e=n(t[a],a,t))&&r>e&&(r=e);return r};var g=Array.prototype.slice,x=function(t){return t},m=1,w=2,M=3,k=4,N=1e-6;function T(t){return"translate("+(t+.5)+",0)"}function A(t){return"translate(0,"+(t+.5)+")"}function C(){return!this.__axis}function S(t,n){var e=[],r=null,i=null,a=6,f=6,o=3,c=t===m||t===k?-1:1,u=t===k||t===w?"x":"y",s=t===m||t===M?T:A;function h(h){var l=null==r?n.ticks?n.ticks.apply(n,e):n.domain():r,d=null==i?n.tickFormat?n.tickFormat.apply(n,e):x:i,p=Math.max(a,0)+o,_=n.range(),b=+_[0]+.5,y=+_[_.length-1]+.5,v=(n.bandwidth?function(t){var n=Math.max(0,t.bandwidth()-1)/2;return t.round()&&(n=Math.round(n)),function(e){return+t(e)+n}}:function(t){return function(n){return+t(n)}})(n.copy()),g=h.selection?h.selection():h,T=g.selectAll(".domain").data([null]),A=g.selectAll(".tick").data(l,n).order(),S=A.exit(),E=A.enter().append("g").attr("class","tick"),U=A.select("line"),L=A.select("text");T=T.merge(T.enter().insert("path",".tick").attr("class","domain").attr("stroke","currentColor")),A=A.merge(E),U=U.merge(E.append("line").attr("stroke","currentColor").attr(u+"2",c*a)),L=L.merge(E.append("text").attr("fill","currentColor").attr(u,c*p).attr("dy",t===m?"0em":t===M?"0.71em":"0.32em")),h!==g&&(T=T.transition(h),A=A.transition(h),U=U.transition(h),L=L.transition(h),S=S.transition(h).attr("opacity",N).attr("transform",function(t){return isFinite(t=v(t))?s(t):this.getAttribute("transform")}),E.attr("opacity",N).attr("transform",function(t){var n=this.parentNode.__axis;return s(n&&isFinite(n=n(t))?n:v(t))})),S.remove(),T.attr("d",t===k||t==w?f?"M"+c*f+","+b+"H0.5V"+y+"H"+c*f:"M0.5,"+b+"V"+y:f?"M"+b+","+c*f+"V0.5H"+y+"V"+c*f:"M"+b+",0.5H"+y),A.attr("opacity",1).attr("transform",function(t){return s(v(t))}),U.attr(u+"2",c*a),L.attr(u,c*p).text(d),g.filter(C).attr("fill","none").attr("font-size",10).attr("font-family","sans-serif").attr("text-anchor",t===w?"start":t===k?"end":"middle"),g.each(function(){this.__axis=v})}return h.scale=function(t){return arguments.length?(n=t,h):n},h.ticks=function(){return e=g.call(arguments),h},h.tickArguments=function(t){return arguments.length?(e=null==t?[]:g.call(t),h):e.slice()},h.tickValues=function(t){return arguments.length?(r=null==t?null:g.call(t),h):r&&r.slice()},h.tickFormat=function(t){return arguments.length?(i=t,h):i},h.tickSize=function(t){return arguments.length?(a=f=+t,h):a},h.tickSizeInner=function(t){return arguments.length?(a=+t,h):a},h.tickSizeOuter=function(t){return arguments.length?(f=+t,h):f},h.tickPadding=function(t){return arguments.length?(o=+t,h):o},h}var E={value:function(){}};function U(){for(var t,n=0,e=arguments.length,r={};n<e;++n){if(!(t=arguments[n]+"")||t in r)throw new Error("illegal type: "+t);r[t]=[]}return new L(r)}function L(t){this._=t}function P(t,n){for(var e,r=0,i=t.length;r<i;++r)if((e=t[r]).name===n)return e.value}function D(t,n,e){for(var r=0,i=t.length;r<i;++r)if(t[r].name===n){t[r]=E,t=t.slice(0,r).concat(t.slice(r+1));break}return null!=e&&t.push({name:n,value:e}),t}L.prototype=U.prototype={constructor:L,on:function(t,n){var e,r,i=this._,a=(r=i,(t+"").trim().split(/^|\s+/).map(function(t){var n="",e=t.indexOf(".");if(e>=0&&(n=t.slice(e+1),t=t.slice(0,e)),t&&!r.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:n}})),f=-1,o=a.length;if(!(arguments.length<2)){if(null!=n&&"function"!=typeof n)throw new Error("invalid callback: "+n);for(;++f<o;)if(e=(t=a[f]).type)i[e]=D(i[e],t.name,n);else if(null==n)for(e in i)i[e]=D(i[e],t.name,null);return this}for(;++f<o;)if((e=(t=a[f]).type)&&(e=P(i[e],t.name)))return e},copy:function(){var t={},n=this._;for(var e in n)t[e]=n[e].slice();return new L(t)},call:function(t,n){if((e=arguments.length-2)>0)for(var e,r,i=new Array(e),a=0;a<e;++a)i[a]=arguments[a+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(a=0,e=(r=this._[t]).length;a<e;++a)r[a].value.apply(n,i)},apply:function(t,n,e){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var r=this._[t],i=0,a=r.length;i<a;++i)r[i].value.apply(n,e)}};var R=U,F="http://www.w3.org/1999/xhtml",j={svg:"http://www.w3.org/2000/svg",xhtml:F,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"},O=function(t){var n=t+="",e=n.indexOf(":");return e>=0&&"xmlns"!==(n=t.slice(0,e))&&(t=t.slice(e+1)),j.hasOwnProperty(n)?{space:j[n],local:t}:t};var Y=function(t){var n=O(t);return(n.local?function(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}:function(t){return function(){var n=this.ownerDocument,e=this.namespaceURI;return e===F&&n.documentElement.namespaceURI===F?n.createElement(t):n.createElementNS(e,t)}})(n)};function q(){}var z=function(t){return null==t?q:function(){return this.querySelector(t)}};function I(){return[]}var H=function(t){return null==t?I:function(){return this.querySelectorAll(t)}},B=function(t){return function(){return this.matches(t)}},X=function(t){return new Array(t.length)};function V(t,n){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=n}V.prototype={constructor:V,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,n){return this._parent.insertBefore(t,n)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};var Z="$";function J(t,n,e,r,i,a){for(var f,o=0,c=n.length,u=a.length;o<u;++o)(f=n[o])?(f.__data__=a[o],r[o]=f):e[o]=new V(t,a[o]);for(;o<c;++o)(f=n[o])&&(i[o]=f)}function W(t,n,e,r,i,a,f){var o,c,u,s={},h=n.length,l=a.length,d=new Array(h);for(o=0;o<h;++o)(c=n[o])&&(d[o]=u=Z+f.call(c,c.__data__,o,n),u in s?i[o]=c:s[u]=c);for(o=0;o<l;++o)(c=s[u=Z+f.call(t,a[o],o,a)])?(r[o]=c,c.__data__=a[o],s[u]=null):e[o]=new V(t,a[o]);for(o=0;o<h;++o)(c=n[o])&&s[d[o]]===c&&(i[o]=c)}function Q(t,n){return t<n?-1:t>n?1:t>=n?0:NaN}var G=function(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView};function K(t,n){return t.style.getPropertyValue(n)||G(t).getComputedStyle(t,null).getPropertyValue(n)}function tt(t){return t.trim().split(/^|\s+/)}function nt(t){return t.classList||new et(t)}function et(t){this._node=t,this._names=tt(t.getAttribute("class")||"")}function rt(t,n){for(var e=nt(t),r=-1,i=n.length;++r<i;)e.add(n[r])}function it(t,n){for(var e=nt(t),r=-1,i=n.length;++r<i;)e.remove(n[r])}et.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var n=this._names.indexOf(t);n>=0&&(this._names.splice(n,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};function at(){this.textContent=""}function ft(){this.innerHTML=""}function ot(){this.nextSibling&&this.parentNode.appendChild(this)}function ct(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function ut(){return null}function st(){var t=this.parentNode;t&&t.removeChild(this)}function ht(){return this.parentNode.insertBefore(this.cloneNode(!1),this.nextSibling)}function lt(){return this.parentNode.insertBefore(this.cloneNode(!0),this.nextSibling)}var dt={},pt=null;"undefined"!=typeof document&&("onmouseenter"in document.documentElement||(dt={mouseenter:"mouseover",mouseleave:"mouseout"}));function _t(t,n,e){return t=bt(t,n,e),function(n){var e=n.relatedTarget;e&&(e===this||8&e.compareDocumentPosition(this))||t.call(this,n)}}function bt(t,n,e){return function(r){var i=pt;pt=r;try{t.call(this,this.__data__,n,e)}finally{pt=i}}}function yt(t){return function(){var n=this.__on;if(n){for(var e,r=0,i=-1,a=n.length;r<a;++r)e=n[r],t.type&&e.type!==t.type||e.name!==t.name?n[++i]=e:this.removeEventListener(e.type,e.listener,e.capture);++i?n.length=i:delete this.__on}}}function vt(t,n,e){var r=dt.hasOwnProperty(t.type)?_t:bt;return function(i,a,f){var o,c=this.__on,u=r(n,a,f);if(c)for(var s=0,h=c.length;s<h;++s)if((o=c[s]).type===t.type&&o.name===t.name)return this.removeEventListener(o.type,o.listener,o.capture),this.addEventListener(o.type,o.listener=u,o.capture=e),void(o.value=n);this.addEventListener(t.type,u,e),o={type:t.type,name:t.name,value:n,listener:u,capture:e},c?c.push(o):this.__on=[o]}}function gt(t,n,e){var r=G(t),i=r.CustomEvent;"function"==typeof i?i=new i(n,e):(i=r.document.createEvent("Event"),e?(i.initEvent(n,e.bubbles,e.cancelable),i.detail=e.detail):i.initEvent(n,!1,!1)),t.dispatchEvent(i)}var xt=[null];function mt(t,n){this._groups=t,this._parents=n}function wt(){return new mt([[document.documentElement]],xt)}mt.prototype=wt.prototype={constructor:mt,select:function(t){"function"!=typeof t&&(t=z(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var a,f,o=n[i],c=o.length,u=r[i]=new Array(c),s=0;s<c;++s)(a=o[s])&&(f=t.call(a,a.__data__,s,o))&&("__data__"in a&&(f.__data__=a.__data__),u[s]=f);return new mt(r,this._parents)},selectAll:function(t){"function"!=typeof t&&(t=H(t));for(var n=this._groups,e=n.length,r=[],i=[],a=0;a<e;++a)for(var f,o=n[a],c=o.length,u=0;u<c;++u)(f=o[u])&&(r.push(t.call(f,f.__data__,u,o)),i.push(f));return new mt(r,i)},filter:function(t){"function"!=typeof t&&(t=B(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var a,f=n[i],o=f.length,c=r[i]=[],u=0;u<o;++u)(a=f[u])&&t.call(a,a.__data__,u,f)&&c.push(a);return new mt(r,this._parents)},data:function(t,n){if(!t)return p=new Array(this.size()),s=-1,this.each(function(t){p[++s]=t}),p;var e,r=n?W:J,i=this._parents,a=this._groups;"function"!=typeof t&&(e=t,t=function(){return e});for(var f=a.length,o=new Array(f),c=new Array(f),u=new Array(f),s=0;s<f;++s){var h=i[s],l=a[s],d=l.length,p=t.call(h,h&&h.__data__,s,i),_=p.length,b=c[s]=new Array(_),y=o[s]=new Array(_);r(h,l,b,y,u[s]=new Array(d),p,n);for(var v,g,x=0,m=0;x<_;++x)if(v=b[x]){for(x>=m&&(m=x+1);!(g=y[m])&&++m<_;);v._next=g||null}}return(o=new mt(o,i))._enter=c,o._exit=u,o},enter:function(){return new mt(this._enter||this._groups.map(X),this._parents)},exit:function(){return new mt(this._exit||this._groups.map(X),this._parents)},join:function(t,n,e){var r=this.enter(),i=this,a=this.exit();return r="function"==typeof t?t(r):r.append(t+""),null!=n&&(i=n(i)),null==e?a.remove():e(a),r&&i?r.merge(i).order():i},merge:function(t){for(var n=this._groups,e=t._groups,r=n.length,i=e.length,a=Math.min(r,i),f=new Array(r),o=0;o<a;++o)for(var c,u=n[o],s=e[o],h=u.length,l=f[o]=new Array(h),d=0;d<h;++d)(c=u[d]||s[d])&&(l[d]=c);for(;o<r;++o)f[o]=n[o];return new mt(f,this._parents)},order:function(){for(var t=this._groups,n=-1,e=t.length;++n<e;)for(var r,i=t[n],a=i.length-1,f=i[a];--a>=0;)(r=i[a])&&(f&&4^r.compareDocumentPosition(f)&&f.parentNode.insertBefore(r,f),f=r);return this},sort:function(t){function n(n,e){return n&&e?t(n.__data__,e.__data__):!n-!e}t||(t=Q);for(var e=this._groups,r=e.length,i=new Array(r),a=0;a<r;++a){for(var f,o=e[a],c=o.length,u=i[a]=new Array(c),s=0;s<c;++s)(f=o[s])&&(u[s]=f);u.sort(n)}return new mt(i,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){var t=new Array(this.size()),n=-1;return this.each(function(){t[++n]=this}),t},node:function(){for(var t=this._groups,n=0,e=t.length;n<e;++n)for(var r=t[n],i=0,a=r.length;i<a;++i){var f=r[i];if(f)return f}return null},size:function(){var t=0;return this.each(function(){++t}),t},empty:function(){return!this.node()},each:function(t){for(var n=this._groups,e=0,r=n.length;e<r;++e)for(var i,a=n[e],f=0,o=a.length;f<o;++f)(i=a[f])&&t.call(i,i.__data__,f,a);return this},attr:function(t,n){var e=O(t);if(arguments.length<2){var r=this.node();return e.local?r.getAttributeNS(e.space,e.local):r.getAttribute(e)}return this.each((null==n?e.local?function(t){return function(){this.removeAttributeNS(t.space,t.local)}}:function(t){return function(){this.removeAttribute(t)}}:"function"==typeof n?e.local?function(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,e)}}:function(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttribute(t):this.setAttribute(t,e)}}:e.local?function(t,n){return function(){this.setAttributeNS(t.space,t.local,n)}}:function(t,n){return function(){this.setAttribute(t,n)}})(e,n))},style:function(t,n,e){return arguments.length>1?this.each((null==n?function(t){return function(){this.style.removeProperty(t)}}:"function"==typeof n?function(t,n,e){return function(){var r=n.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,e)}}:function(t,n,e){return function(){this.style.setProperty(t,n,e)}})(t,n,null==e?"":e)):K(this.node(),t)},property:function(t,n){return arguments.length>1?this.each((null==n?function(t){return function(){delete this[t]}}:"function"==typeof n?function(t,n){return function(){var e=n.apply(this,arguments);null==e?delete this[t]:this[t]=e}}:function(t,n){return function(){this[t]=n}})(t,n)):this.node()[t]},classed:function(t,n){var e=tt(t+"");if(arguments.length<2){for(var r=nt(this.node()),i=-1,a=e.length;++i<a;)if(!r.contains(e[i]))return!1;return!0}return this.each(("function"==typeof n?function(t,n){return function(){(n.apply(this,arguments)?rt:it)(this,t)}}:n?function(t){return function(){rt(this,t)}}:function(t){return function(){it(this,t)}})(e,n))},text:function(t){return arguments.length?this.each(null==t?at:("function"==typeof t?function(t){return function(){var n=t.apply(this,arguments);this.textContent=null==n?"":n}}:function(t){return function(){this.textContent=t}})(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?ft:("function"==typeof t?function(t){return function(){var n=t.apply(this,arguments);this.innerHTML=null==n?"":n}}:function(t){return function(){this.innerHTML=t}})(t)):this.node().innerHTML},raise:function(){return this.each(ot)},lower:function(){return this.each(ct)},append:function(t){var n="function"==typeof t?t:Y(t);return this.select(function(){return this.appendChild(n.apply(this,arguments))})},insert:function(t,n){var e="function"==typeof t?t:Y(t),r=null==n?ut:"function"==typeof n?n:z(n);return this.select(function(){return this.insertBefore(e.apply(this,arguments),r.apply(this,arguments)||null)})},remove:function(){return this.each(st)},clone:function(t){return this.select(t?lt:ht)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,n,e){var r,i,a=function(t){return t.trim().split(/^|\s+/).map(function(t){var n="",e=t.indexOf(".");return e>=0&&(n=t.slice(e+1),t=t.slice(0,e)),{type:t,name:n}})}(t+""),f=a.length;if(!(arguments.length<2)){for(o=n?vt:yt,null==e&&(e=!1),r=0;r<f;++r)this.each(o(a[r],n,e));return this}var o=this.node().__on;if(o)for(var c,u=0,s=o.length;u<s;++u)for(r=0,c=o[u];r<f;++r)if((i=a[r]).type===c.type&&i.name===c.name)return c.value},dispatch:function(t,n){return this.each(("function"==typeof n?function(t,n){return function(){return gt(this,t,n.apply(this,arguments))}}:function(t,n){return function(){return gt(this,t,n)}})(t,n))}};var Mt=wt,kt=function(t){return"string"==typeof t?new mt([[document.querySelector(t)]],[document.documentElement]):new mt([[t]],xt)},Nt=0;function Tt(){this._="@"+(++Nt).toString(36)}Tt.prototype=function(){return new Tt}.prototype={constructor:Tt,get:function(t){for(var n=this._;!(n in t);)if(!(t=t.parentNode))return;return t[n]},set:function(t,n){return t[this._]=n},remove:function(t){return this._ in t&&delete t[this._]},toString:function(){return this._}};function At(t,n,e,r,i,a,f,o,c,u){this.target=t,this.type=n,this.subject=e,this.identifier=r,this.active=i,this.x=a,this.y=f,this.dx=o,this.dy=c,this._=u}At.prototype.on=function(){var t=this._.on.apply(this._,arguments);return t===this._?this:t};var Ct=function(t,n,e){t.prototype=n.prototype=e,e.constructor=t};function St(t,n){var e=Object.create(t.prototype);for(var r in n)e[r]=n[r];return e}function Et(){}var Ut="\\s*([+-]?\\d+)\\s*",Lt="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",Pt="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",Dt=/^#([0-9a-f]{3})$/,Rt=/^#([0-9a-f]{6})$/,Ft=new RegExp("^rgb\\("+[Ut,Ut,Ut]+"\\)$"),jt=new RegExp("^rgb\\("+[Pt,Pt,Pt]+"\\)$"),Ot=new RegExp("^rgba\\("+[Ut,Ut,Ut,Lt]+"\\)$"),Yt=new RegExp("^rgba\\("+[Pt,Pt,Pt,Lt]+"\\)$"),qt=new RegExp("^hsl\\("+[Lt,Pt,Pt]+"\\)$"),zt=new RegExp("^hsla\\("+[Lt,Pt,Pt,Lt]+"\\)$"),It={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function Ht(t){var n;return t=(t+"").trim().toLowerCase(),(n=Dt.exec(t))?new Zt((n=parseInt(n[1],16))>>8&15|n>>4&240,n>>4&15|240&n,(15&n)<<4|15&n,1):(n=Rt.exec(t))?$t(parseInt(n[1],16)):(n=Ft.exec(t))?new Zt(n[1],n[2],n[3],1):(n=jt.exec(t))?new Zt(255*n[1]/100,255*n[2]/100,255*n[3]/100,1):(n=Ot.exec(t))?Bt(n[1],n[2],n[3],n[4]):(n=Yt.exec(t))?Bt(255*n[1]/100,255*n[2]/100,255*n[3]/100,n[4]):(n=qt.exec(t))?Wt(n[1],n[2]/100,n[3]/100,1):(n=zt.exec(t))?Wt(n[1],n[2]/100,n[3]/100,n[4]):It.hasOwnProperty(t)?$t(It[t]):"transparent"===t?new Zt(NaN,NaN,NaN,0):null}function $t(t){return new Zt(t>>16&255,t>>8&255,255&t,1)}function Bt(t,n,e,r){return r<=0&&(t=n=e=NaN),new Zt(t,n,e,r)}function Xt(t){return t instanceof Et||(t=Ht(t)),t?new Zt((t=t.rgb()).r,t.g,t.b,t.opacity):new Zt}function Vt(t,n,e,r){return 1===arguments.length?Xt(t):new Zt(t,n,e,null==r?1:r)}function Zt(t,n,e,r){this.r=+t,this.g=+n,this.b=+e,this.opacity=+r}function Jt(t){return((t=Math.max(0,Math.min(255,Math.round(t)||0)))<16?"0":"")+t.toString(16)}function Wt(t,n,e,r){return r<=0?t=n=e=NaN:e<=0||e>=1?t=n=NaN:n<=0&&(t=NaN),new Gt(t,n,e,r)}function Qt(t,n,e,r){return 1===arguments.length?function(t){if(t instanceof Gt)return new Gt(t.h,t.s,t.l,t.opacity);if(t instanceof Et||(t=Ht(t)),!t)return new Gt;if(t instanceof Gt)return t;var n=(t=t.rgb()).r/255,e=t.g/255,r=t.b/255,i=Math.min(n,e,r),a=Math.max(n,e,r),f=NaN,o=a-i,c=(a+i)/2;return o?(f=n===a?(e-r)/o+6*(e<r):e===a?(r-n)/o+2:(n-e)/o+4,o/=c<.5?a+i:2-a-i,f*=60):o=c>0&&c<1?0:f,new Gt(f,o,c,t.opacity)}(t):new Gt(t,n,e,null==r?1:r)}function Gt(t,n,e,r){this.h=+t,this.s=+n,this.l=+e,this.opacity=+r}function Kt(t,n,e){return 255*(t<60?n+(e-n)*t/60:t<180?e:t<240?n+(e-n)*(240-t)/60:n)}Ct(Et,Ht,{displayable:function(){return this.rgb().displayable()},hex:function(){return this.rgb().hex()},toString:function(){return this.rgb()+""}}),Ct(Zt,Vt,St(Et,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new Zt(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new Zt(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return 0<=this.r&&this.r<=255&&0<=this.g&&this.g<=255&&0<=this.b&&this.b<=255&&0<=this.opacity&&this.opacity<=1},hex:function(){return"#"+Jt(this.r)+Jt(this.g)+Jt(this.b)},toString:function(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}})),Ct(Gt,Qt,St(Et,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new Gt(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new Gt(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),n=isNaN(t)||isNaN(this.s)?0:this.s,e=this.l,r=e+(e<.5?e:1-e)*n,i=2*e-r;return new Zt(Kt(t>=240?t-240:t+120,i,r),Kt(t,i,r),Kt(t<120?t+240:t-120,i,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1}}));var tn=Math.PI/180,nn=180/Math.PI,en=.96422,rn=1,an=.82521,fn=4/29,on=6/29,cn=3*on*on,un=on*on*on;function sn(t){if(t instanceof ln)return new ln(t.l,t.a,t.b,t.opacity);if(t instanceof gn){if(isNaN(t.h))return new ln(t.l,0,0,t.opacity);var n=t.h*tn;return new ln(t.l,Math.cos(n)*t.c,Math.sin(n)*t.c,t.opacity)}t instanceof Zt||(t=Xt(t));var e,r,i=bn(t.r),a=bn(t.g),f=bn(t.b),o=dn((.2225045*i+.7168786*a+.0606169*f)/rn);return i===a&&a===f?e=r=o:(e=dn((.4360747*i+.3850649*a+.1430804*f)/en),r=dn((.0139322*i+.0971045*a+.7141733*f)/an)),new ln(116*o-16,500*(e-o),200*(o-r),t.opacity)}function hn(t,n,e,r){return 1===arguments.length?sn(t):new ln(t,n,e,null==r?1:r)}function ln(t,n,e,r){this.l=+t,this.a=+n,this.b=+e,this.opacity=+r}function dn(t){return t>un?Math.pow(t,1/3):t/cn+fn}function pn(t){return t>on?t*t*t:cn*(t-fn)}function _n(t){return 255*(t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055)}function bn(t){return(t/=255)<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4)}function yn(t){if(t instanceof gn)return new gn(t.h,t.c,t.l,t.opacity);if(t instanceof ln||(t=sn(t)),0===t.a&&0===t.b)return new gn(NaN,0,t.l,t.opacity);var n=Math.atan2(t.b,t.a)*nn;return new gn(n<0?n+360:n,Math.sqrt(t.a*t.a+t.b*t.b),t.l,t.opacity)}function vn(t,n,e,r){return 1===arguments.length?yn(t):new gn(t,n,e,null==r?1:r)}function gn(t,n,e,r){this.h=+t,this.c=+n,this.l=+e,this.opacity=+r}Ct(ln,hn,St(Et,{brighter:function(t){return new ln(this.l+18*(null==t?1:t),this.a,this.b,this.opacity)},darker:function(t){return new ln(this.l-18*(null==t?1:t),this.a,this.b,this.opacity)},rgb:function(){var t=(this.l+16)/116,n=isNaN(this.a)?t:t+this.a/500,e=isNaN(this.b)?t:t-this.b/200;return new Zt(_n(3.1338561*(n=en*pn(n))-1.6168667*(t=rn*pn(t))-.4906146*(e=an*pn(e))),_n(-.9787684*n+1.9161415*t+.033454*e),_n(.0719453*n-.2289914*t+1.4052427*e),this.opacity)}})),Ct(gn,vn,St(Et,{brighter:function(t){return new gn(this.h,this.c,this.l+18*(null==t?1:t),this.opacity)},darker:function(t){return new gn(this.h,this.c,this.l-18*(null==t?1:t),this.opacity)},rgb:function(){return sn(this).rgb()}}));var xn=-.29227,mn=-.90649,wn=1.97294,Mn=wn*mn,kn=1.78277*wn,Nn=1.78277*xn- -.14861*mn;function Tn(t,n,e,r){return 1===arguments.length?function(t){if(t instanceof An)return new An(t.h,t.s,t.l,t.opacity);t instanceof Zt||(t=Xt(t));var n=t.r/255,e=t.g/255,r=t.b/255,i=(Nn*r+Mn*n-kn*e)/(Nn+Mn-kn),a=r-i,f=(wn*(e-i)-xn*a)/mn,o=Math.sqrt(f*f+a*a)/(wn*i*(1-i)),c=o?Math.atan2(f,a)*nn-120:NaN;return new An(c<0?c+360:c,o,i,t.opacity)}(t):new An(t,n,e,null==r?1:r)}function An(t,n,e,r){this.h=+t,this.s=+n,this.l=+e,this.opacity=+r}function Cn(t,n,e,r,i){var a=t*t,f=a*t;return((1-3*t+3*a-f)*n+(4-6*a+3*f)*e+(1+3*t+3*a-3*f)*r+f*i)/6}Ct(An,Tn,St(Et,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new An(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new An(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=isNaN(this.h)?0:(this.h+120)*tn,n=+this.l,e=isNaN(this.s)?0:this.s*n*(1-n),r=Math.cos(t),i=Math.sin(t);return new Zt(255*(n+e*(-.14861*r+1.78277*i)),255*(n+e*(xn*r+mn*i)),255*(n+e*(wn*r)),this.opacity)}}));var Sn=function(t){return function(){return t}};function En(t,n){return function(e){return t+e*n}}function Un(t,n){var e=n-t;return e?En(t,e>180||e<-180?e-360*Math.round(e/360):e):Sn(isNaN(t)?n:t)}function Ln(t){return 1==(t=+t)?Pn:function(n,e){return e-n?function(t,n,e){return t=Math.pow(t,e),n=Math.pow(n,e)-t,e=1/e,function(r){return Math.pow(t+r*n,e)}}(n,e,t):Sn(isNaN(n)?e:n)}}function Pn(t,n){var e=n-t;return e?En(t,e):Sn(isNaN(t)?n:t)}var Dn=function t(n){var e=Ln(n);function r(t,n){var r=e((t=Vt(t)).r,(n=Vt(n)).r),i=e(t.g,n.g),a=e(t.b,n.b),f=Pn(t.opacity,n.opacity);return function(n){return t.r=r(n),t.g=i(n),t.b=a(n),t.opacity=f(n),t+""}}return r.gamma=t,r}(1);function Rn(t){return function(n){var e,r,i=n.length,a=new Array(i),f=new Array(i),o=new Array(i);for(e=0;e<i;++e)r=Vt(n[e]),a[e]=r.r||0,f[e]=r.g||0,o[e]=r.b||0;return a=t(a),f=t(f),o=t(o),r.opacity=1,function(t){return r.r=a(t),r.g=f(t),r.b=o(t),r+""}}}var Fn=Rn(function(t){var n=t.length-1;return function(e){var r=e<=0?e=0:e>=1?(e=1,n-1):Math.floor(e*n),i=t[r],a=t[r+1],f=r>0?t[r-1]:2*i-a,o=r<n-1?t[r+2]:2*a-i;return Cn((e-r/n)*n,f,i,a,o)}}),jn=(Rn(function(t){var n=t.length;return function(e){var r=Math.floor(((e%=1)<0?++e:e)*n),i=t[(r+n-1)%n],a=t[r%n],f=t[(r+1)%n],o=t[(r+2)%n];return Cn((e-r/n)*n,i,a,f,o)}}),function(t,n){return n-=t=+t,function(e){return t+n*e}}),On=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,Yn=new RegExp(On.source,"g");var qn,zn,In,Hn,$n=function(t,n){var e,r,i,a=On.lastIndex=Yn.lastIndex=0,f=-1,o=[],c=[];for(t+="",n+="";(e=On.exec(t))&&(r=Yn.exec(n));)(i=r.index)>a&&(i=n.slice(a,i),o[f]?o[f]+=i:o[++f]=i),(e=e[0])===(r=r[0])?o[f]?o[f]+=r:o[++f]=r:(o[++f]=null,c.push({i:f,x:jn(e,r)})),a=Yn.lastIndex;return a<n.length&&(i=n.slice(a),o[f]?o[f]+=i:o[++f]=i),o.length<2?c[0]?function(t){return function(n){return t(n)+""}}(c[0].x):function(t){return function(){return t}}(n):(n=c.length,function(t){for(var e,r=0;r<n;++r)o[(e=c[r]).i]=e.x(t);return o.join("")})},Bn=function(t,n){var e,r=typeof n;return null==n||"boolean"===r?Sn(n):("number"===r?jn:"string"===r?(e=Ht(n))?(n=e,Dn):$n:n instanceof Ht?Dn:n instanceof Date?function(t,n){var e=new Date;return n-=t=+t,function(r){return e.setTime(t+n*r),e}}:Array.isArray(n)?function(t,n){var e,r=n?n.length:0,i=t?Math.min(r,t.length):0,a=new Array(i),f=new Array(r);for(e=0;e<i;++e)a[e]=Bn(t[e],n[e]);for(;e<r;++e)f[e]=n[e];return function(t){for(e=0;e<i;++e)f[e]=a[e](t);return f}}:"function"!=typeof n.valueOf&&"function"!=typeof n.toString||isNaN(n)?function(t,n){var e,r={},i={};for(e in null!==t&&"object"==typeof t||(t={}),null!==n&&"object"==typeof n||(n={}),n)e in t?r[e]=Bn(t[e],n[e]):i[e]=n[e];return function(t){for(e in r)i[e]=r[e](t);return i}}:jn)(t,n)},Xn=function(t,n){return n-=t=+t,function(e){return Math.round(t+n*e)}},Vn=180/Math.PI,Zn={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1},Jn=function(t,n,e,r,i,a){var f,o,c;return(f=Math.sqrt(t*t+n*n))&&(t/=f,n/=f),(c=t*e+n*r)&&(e-=t*c,r-=n*c),(o=Math.sqrt(e*e+r*r))&&(e/=o,r/=o,c/=o),t*r<n*e&&(t=-t,n=-n,c=-c,f=-f),{translateX:i,translateY:a,rotate:Math.atan2(n,t)*Vn,skewX:Math.atan(c)*Vn,scaleX:f,scaleY:o}};function Wn(t,n,e,r){function i(t){return t.length?t.pop()+" ":""}return function(a,f){var o=[],c=[];return a=t(a),f=t(f),function(t,r,i,a,f,o){if(t!==i||r!==a){var c=f.push("translate(",null,n,null,e);o.push({i:c-4,x:jn(t,i)},{i:c-2,x:jn(r,a)})}else(i||a)&&f.push("translate("+i+n+a+e)}(a.translateX,a.translateY,f.translateX,f.translateY,o,c),function(t,n,e,a){t!==n?(t-n>180?n+=360:n-t>180&&(t+=360),a.push({i:e.push(i(e)+"rotate(",null,r)-2,x:jn(t,n)})):n&&e.push(i(e)+"rotate("+n+r)}(a.rotate,f.rotate,o,c),function(t,n,e,a){t!==n?a.push({i:e.push(i(e)+"skewX(",null,r)-2,x:jn(t,n)}):n&&e.push(i(e)+"skewX("+n+r)}(a.skewX,f.skewX,o,c),function(t,n,e,r,a,f){if(t!==e||n!==r){var o=a.push(i(a)+"scale(",null,",",null,")");f.push({i:o-4,x:jn(t,e)},{i:o-2,x:jn(n,r)})}else 1===e&&1===r||a.push(i(a)+"scale("+e+","+r+")")}(a.scaleX,a.scaleY,f.scaleX,f.scaleY,o,c),a=f=null,function(t){for(var n,e=-1,r=c.length;++e<r;)o[(n=c[e]).i]=n.x(t);return o.join("")}}}var Qn=Wn(function(t){return"none"===t?Zn:(qn||(qn=document.createElement("DIV"),zn=document.documentElement,In=document.defaultView),qn.style.transform=t,t=In.getComputedStyle(zn.appendChild(qn),null).getPropertyValue("transform"),zn.removeChild(qn),t=t.slice(7,-1).split(","),Jn(+t[0],+t[1],+t[2],+t[3],+t[4],+t[5]))},"px, ","px)","deg)"),Gn=Wn(function(t){return null==t?Zn:(Hn||(Hn=document.createElementNS("http://www.w3.org/2000/svg","g")),Hn.setAttribute("transform",t),(t=Hn.transform.baseVal.consolidate())?(t=t.matrix,Jn(t.a,t.b,t.c,t.d,t.e,t.f)):Zn)},", ",")",")");Math.SQRT2;function Kn(t){return function(n,e){var r=t((n=Qt(n)).h,(e=Qt(e)).h),i=Pn(n.s,e.s),a=Pn(n.l,e.l),f=Pn(n.opacity,e.opacity);return function(t){return n.h=r(t),n.s=i(t),n.l=a(t),n.opacity=f(t),n+""}}}Kn(Un),Kn(Pn);function te(t){return function(n,e){var r=t((n=vn(n)).h,(e=vn(e)).h),i=Pn(n.c,e.c),a=Pn(n.l,e.l),f=Pn(n.opacity,e.opacity);return function(t){return n.h=r(t),n.c=i(t),n.l=a(t),n.opacity=f(t),n+""}}}te(Un),te(Pn);function ne(t){return function n(e){function r(n,r){var i=t((n=Tn(n)).h,(r=Tn(r)).h),a=Pn(n.s,r.s),f=Pn(n.l,r.l),o=Pn(n.opacity,r.opacity);return function(t){return n.h=i(t),n.s=a(t),n.l=f(Math.pow(t,e)),n.opacity=o(t),n+""}}return e=+e,r.gamma=n,r}(1)}ne(Un);var ee=ne(Pn);var re,ie,ae=0,fe=0,oe=0,ce=1e3,ue=0,se=0,he=0,le="object"==typeof performance&&performance.now?performance:Date,de="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function pe(){return se||(de(_e),se=le.now()+he)}function _e(){se=0}function be(){this._call=this._time=this._next=null}function ye(t,n,e){var r=new be;return r.restart(t,n,e),r}function ve(){se=(ue=le.now())+he,ae=fe=0;try{!function(){pe(),++ae;for(var t,n=re;n;)(t=se-n._time)>=0&&n._call.call(null,t),n=n._next;--ae}()}finally{ae=0,function(){var t,n,e=re,r=1/0;for(;e;)e._call?(r>e._time&&(r=e._time),t=e,e=e._next):(n=e._next,e._next=null,e=t?t._next=n:re=n);ie=t,xe(r)}(),se=0}}function ge(){var t=le.now(),n=t-ue;n>ce&&(he-=n,ue=t)}function xe(t){ae||(fe&&(fe=clearTimeout(fe)),t-se>24?(t<1/0&&(fe=setTimeout(ve,t-le.now()-he)),oe&&(oe=clearInterval(oe))):(oe||(ue=le.now(),oe=setInterval(ge,ce)),ae=1,de(ve)))}be.prototype=ye.prototype={constructor:be,restart:function(t,n,e){if("function"!=typeof t)throw new TypeError("callback is not a function");e=(null==e?pe():+e)+(null==n?0:+n),this._next||ie===this||(ie?ie._next=this:re=this,ie=this),this._call=t,this._time=e,xe()},stop:function(){this._call&&(this._call=null,this._time=1/0,xe())}};var me=function(t,n,e){var r=new be;return n=null==n?0:+n,r.restart(function(e){r.stop(),t(e+n)},n,e),r},we=R("start","end","cancel","interrupt"),Me=[],ke=0,Ne=1,Te=2,Ae=3,Ce=4,Se=5,Ee=6,Ue=function(t,n,e,r,i,a){var f=t.__transition;if(f){if(e in f)return}else t.__transition={};!function(t,n,e){var r,i=t.__transition;function a(c){var u,s,h,l;if(e.state!==Ne)return o();for(u in i)if((l=i[u]).name===e.name){if(l.state===Ae)return me(a);l.state===Ce?(l.state=Ee,l.timer.stop(),l.on.call("interrupt",t,t.__data__,l.index,l.group),delete i[u]):+u<n&&(l.state=Ee,l.timer.stop(),l.on.call("cancel",t,t.__data__,l.index,l.group),delete i[u])}if(me(function(){e.state===Ae&&(e.state=Ce,e.timer.restart(f,e.delay,e.time),f(c))}),e.state=Te,e.on.call("start",t,t.__data__,e.index,e.group),e.state===Te){for(e.state=Ae,r=new Array(h=e.tween.length),u=0,s=-1;u<h;++u)(l=e.tween[u].value.call(t,t.__data__,e.index,e.group))&&(r[++s]=l);r.length=s+1}}function f(n){for(var i=n<e.duration?e.ease.call(null,n/e.duration):(e.timer.restart(o),e.state=Se,1),a=-1,f=r.length;++a<f;)r[a].call(t,i);e.state===Se&&(e.on.call("end",t,t.__data__,e.index,e.group),o())}function o(){for(var r in e.state=Ee,e.timer.stop(),delete i[n],i)return;delete t.__transition}i[n]=e,e.timer=ye(function(t){e.state=Ne,e.timer.restart(a,e.delay,e.time),e.delay<=t&&a(t-e.delay)},0,e.time)}(t,e,{name:n,index:r,group:i,on:we,tween:Me,time:a.time,delay:a.delay,duration:a.duration,ease:a.ease,timer:null,state:ke})};function Le(t,n){var e=De(t,n);if(e.state>ke)throw new Error("too late; already scheduled");return e}function Pe(t,n){var e=De(t,n);if(e.state>Ae)throw new Error("too late; already running");return e}function De(t,n){var e=t.__transition;if(!e||!(e=e[n]))throw new Error("transition not found");return e}var Re=function(t,n){var e,r,i,a=t.__transition,f=!0;if(a){for(i in n=null==n?null:n+"",a)(e=a[i]).name===n?(r=e.state>Te&&e.state<Se,e.state=Ee,e.timer.stop(),e.on.call(r?"interrupt":"cancel",t,t.__data__,e.index,e.group),delete a[i]):f=!1;f&&delete t.__transition}};function Fe(t,n,e){var r=t._id;return t.each(function(){var t=Pe(this,r);(t.value||(t.value={}))[n]=e.apply(this,arguments)}),function(t){return De(t,r).value[n]}}var je=function(t,n){var e;return("number"==typeof n?jn:n instanceof Ht?Dn:(e=Ht(n))?(n=e,Dn):$n)(t,n)};var Oe=Mt.prototype.constructor;function Ye(t){return function(){this.style.removeProperty(t)}}var qe=0;function ze(t,n,e,r){this._groups=t,this._parents=n,this._name=e,this._id=r}function Ie(t){return Mt().transition(t)}function He(){return++qe}var $e=Mt.prototype;ze.prototype=Ie.prototype={constructor:ze,select:function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=z(t));for(var r=this._groups,i=r.length,a=new Array(i),f=0;f<i;++f)for(var o,c,u=r[f],s=u.length,h=a[f]=new Array(s),l=0;l<s;++l)(o=u[l])&&(c=t.call(o,o.__data__,l,u))&&("__data__"in o&&(c.__data__=o.__data__),h[l]=c,Ue(h[l],n,e,l,h,De(o,e)));return new ze(a,this._parents,n,e)},selectAll:function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=H(t));for(var r=this._groups,i=r.length,a=[],f=[],o=0;o<i;++o)for(var c,u=r[o],s=u.length,h=0;h<s;++h)if(c=u[h]){for(var l,d=t.call(c,c.__data__,h,u),p=De(c,e),_=0,b=d.length;_<b;++_)(l=d[_])&&Ue(l,n,e,_,d,p);a.push(d),f.push(c)}return new ze(a,f,n,e)},filter:function(t){"function"!=typeof t&&(t=B(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var a,f=n[i],o=f.length,c=r[i]=[],u=0;u<o;++u)(a=f[u])&&t.call(a,a.__data__,u,f)&&c.push(a);return new ze(r,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var n=this._groups,e=t._groups,r=n.length,i=e.length,a=Math.min(r,i),f=new Array(r),o=0;o<a;++o)for(var c,u=n[o],s=e[o],h=u.length,l=f[o]=new Array(h),d=0;d<h;++d)(c=u[d]||s[d])&&(l[d]=c);for(;o<r;++o)f[o]=n[o];return new ze(f,this._parents,this._name,this._id)},selection:function(){return new Oe(this._groups,this._parents)},transition:function(){for(var t=this._name,n=this._id,e=He(),r=this._groups,i=r.length,a=0;a<i;++a)for(var f,o=r[a],c=o.length,u=0;u<c;++u)if(f=o[u]){var s=De(f,n);Ue(f,t,e,u,o,{time:s.time+s.delay+s.duration,delay:0,duration:s.duration,ease:s.ease})}return new ze(r,this._parents,t,e)},call:$e.call,nodes:$e.nodes,node:$e.node,size:$e.size,empty:$e.empty,each:$e.each,on:function(t,n){var e=this._id;return arguments.length<2?De(this.node(),e).on.on(t):this.each(function(t,n,e){var r,i,a=function(t){return(t+"").trim().split(/^|\s+/).every(function(t){var n=t.indexOf(".");return n>=0&&(t=t.slice(0,n)),!t||"start"===t})}(n)?Le:Pe;return function(){var f=a(this,t),o=f.on;o!==r&&(i=(r=o).copy()).on(n,e),f.on=i}}(e,t,n))},attr:function(t,n){var e=O(t),r="transform"===e?Gn:je;return this.attrTween(t,"function"==typeof n?(e.local?function(t,n,e){var r,i,a;return function(){var f,o,c=e(this);if(null!=c)return(f=this.getAttributeNS(t.space,t.local))===(o=c+"")?null:f===r&&o===i?a:(i=o,a=n(r=f,c));this.removeAttributeNS(t.space,t.local)}}:function(t,n,e){var r,i,a;return function(){var f,o,c=e(this);if(null!=c)return(f=this.getAttribute(t))===(o=c+"")?null:f===r&&o===i?a:(i=o,a=n(r=f,c));this.removeAttribute(t)}})(e,r,Fe(this,"attr."+t,n)):null==n?(e.local?function(t){return function(){this.removeAttributeNS(t.space,t.local)}}:function(t){return function(){this.removeAttribute(t)}})(e):(e.local?function(t,n,e){var r,i,a=e+"";return function(){var f=this.getAttributeNS(t.space,t.local);return f===a?null:f===r?i:i=n(r=f,e)}}:function(t,n,e){var r,i,a=e+"";return function(){var f=this.getAttribute(t);return f===a?null:f===r?i:i=n(r=f,e)}})(e,r,n))},attrTween:function(t,n){var e="attr."+t;if(arguments.length<2)return(e=this.tween(e))&&e._value;if(null==n)return this.tween(e,null);if("function"!=typeof n)throw new Error;var r=O(t);return this.tween(e,(r.local?function(t,n){var e,r;function i(){var i=n.apply(this,arguments);return i!==r&&(e=(r=i)&&function(t,n){return function(e){this.setAttributeNS(t.space,t.local,n(e))}}(t,i)),e}return i._value=n,i}:function(t,n){var e,r;function i(){var i=n.apply(this,arguments);return i!==r&&(e=(r=i)&&function(t,n){return function(e){this.setAttribute(t,n(e))}}(t,i)),e}return i._value=n,i})(r,n))},style:function(t,n,e){var r="transform"==(t+="")?Qn:je;return null==n?this.styleTween(t,function(t,n){var e,r,i;return function(){var a=K(this,t),f=(this.style.removeProperty(t),K(this,t));return a===f?null:a===e&&f===r?i:i=n(e=a,r=f)}}(t,r)).on("end.style."+t,Ye(t)):"function"==typeof n?this.styleTween(t,function(t,n,e){var r,i,a;return function(){var f=K(this,t),o=e(this),c=o+"";return null==o&&(this.style.removeProperty(t),c=o=K(this,t)),f===c?null:f===r&&c===i?a:(i=c,a=n(r=f,o))}}(t,r,Fe(this,"style."+t,n))).each(function(t,n){var e,r,i,a,f="style."+n,o="end."+f;return function(){var c=Pe(this,t),u=c.on,s=null==c.value[f]?a||(a=Ye(n)):void 0;u===e&&i===s||(r=(e=u).copy()).on(o,i=s),c.on=r}}(this._id,t)):this.styleTween(t,function(t,n,e){var r,i,a=e+"";return function(){var f=K(this,t);return f===a?null:f===r?i:i=n(r=f,e)}}(t,r,n),e).on("end.style."+t,null)},styleTween:function(t,n,e){var r="style."+(t+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==n)return this.tween(r,null);if("function"!=typeof n)throw new Error;return this.tween(r,function(t,n,e){var r,i;function a(){var a=n.apply(this,arguments);return a!==i&&(r=(i=a)&&function(t,n,e){return function(r){this.style.setProperty(t,n(r),e)}}(t,a,e)),r}return a._value=n,a}(t,n,null==e?"":e))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var n=t(this);this.textContent=null==n?"":n}}(Fe(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},remove:function(){return this.on("end.remove",(t=this._id,function(){var n=this.parentNode;for(var e in this.__transition)if(+e!==t)return;n&&n.removeChild(this)}));var t},tween:function(t,n){var e=this._id;if(t+="",arguments.length<2){for(var r,i=De(this.node(),e).tween,a=0,f=i.length;a<f;++a)if((r=i[a]).name===t)return r.value;return null}return this.each((null==n?function(t,n){var e,r;return function(){var i=Pe(this,t),a=i.tween;if(a!==e)for(var f=0,o=(r=e=a).length;f<o;++f)if(r[f].name===n){(r=r.slice()).splice(f,1);break}i.tween=r}}:function(t,n,e){var r,i;if("function"!=typeof e)throw new Error;return function(){var a=Pe(this,t),f=a.tween;if(f!==r){i=(r=f).slice();for(var o={name:n,value:e},c=0,u=i.length;c<u;++c)if(i[c].name===n){i[c]=o;break}c===u&&i.push(o)}a.tween=i}})(e,t,n))},delay:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?function(t,n){return function(){Le(this,t).delay=+n.apply(this,arguments)}}:function(t,n){return n=+n,function(){Le(this,t).delay=n}})(n,t)):De(this.node(),n).delay},duration:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?function(t,n){return function(){Pe(this,t).duration=+n.apply(this,arguments)}}:function(t,n){return n=+n,function(){Pe(this,t).duration=n}})(n,t)):De(this.node(),n).duration},ease:function(t){var n=this._id;return arguments.length?this.each(function(t,n){if("function"!=typeof n)throw new Error;return function(){Pe(this,t).ease=n}}(n,t)):De(this.node(),n).ease},end:function(){var t,n,e=this,r=e._id,i=e.size();return new Promise(function(a,f){var o={value:f},c={value:function(){0==--i&&a()}};e.each(function(){var e=Pe(this,r),i=e.on;i!==t&&((n=(t=i).copy())._.cancel.push(o),n._.interrupt.push(o),n._.end.push(c)),e.on=n})})}};(function t(n){function e(t){return Math.pow(t,n)}return n=+n,e.exponent=t,e})(3),function t(n){function e(t){return 1-Math.pow(1-t,n)}return n=+n,e.exponent=t,e}(3),function t(n){function e(t){return((t*=2)<=1?Math.pow(t,n):2-Math.pow(2-t,n))/2}return n=+n,e.exponent=t,e}(3),Math.PI;(function t(n){function e(t){return t*t*((n+1)*t-n)}return n=+n,e.overshoot=t,e})(1.70158),function t(n){function e(t){return--t*t*((n+1)*t+n)+1}return n=+n,e.overshoot=t,e}(1.70158),function t(n){function e(t){return((t*=2)<1?t*t*((n+1)*t-n):(t-=2)*t*((n+1)*t+n)+2)/2}return n=+n,e.overshoot=t,e}(1.70158);var Be=2*Math.PI,Xe=(function t(n,e){var r=Math.asin(1/(n=Math.max(1,n)))*(e/=Be);function i(t){return n*Math.pow(2,10*--t)*Math.sin((r-t)/e)}return i.amplitude=function(n){return t(n,e*Be)},i.period=function(e){return t(n,e)},i}(1,.3),function t(n,e){var r=Math.asin(1/(n=Math.max(1,n)))*(e/=Be);function i(t){return 1-n*Math.pow(2,-10*(t=+t))*Math.sin((t+r)/e)}return i.amplitude=function(n){return t(n,e*Be)},i.period=function(e){return t(n,e)},i}(1,.3),function t(n,e){var r=Math.asin(1/(n=Math.max(1,n)))*(e/=Be);function i(t){return((t=2*t-1)<0?n*Math.pow(2,10*t)*Math.sin((r-t)/e):2-n*Math.pow(2,-10*t)*Math.sin((r+t)/e))/2}return i.amplitude=function(n){return t(n,e*Be)},i.period=function(e){return t(n,e)},i}(1,.3),{time:null,delay:0,duration:250,ease:function(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}});function Ve(t,n){for(var e;!(e=t.__transition)||!(e=e[n]);)if(!(t=t.parentNode))return Xe.time=pe(),Xe;return e}Mt.prototype.interrupt=function(t){return this.each(function(){Re(this,t)})},Mt.prototype.transition=function(t){var n,e;t instanceof ze?(n=t._id,t=t._name):(n=He(),(e=Xe).time=pe(),t=null==t?null:t+"");for(var r=this._groups,i=r.length,a=0;a<i;++a)for(var f,o=r[a],c=o.length,u=0;u<c;++u)(f=o[u])&&Ue(f,t,n,u,o,e||Ve(f,n));return new ze(r,this._parents,t,n)};["e","w"].map(Ze),["n","s"].map(Ze),["n","e","s","w","nw","ne","se","sw"].map(Ze);function Ze(t){return{type:t}}Math.cos,Math.sin,Math.PI,Math.max;Array.prototype.slice;var Je=Math.PI,We=2*Je,Qe=We-1e-6;function Ge(){this._x0=this._y0=this._x1=this._y1=null,this._=""}function Ke(){return new Ge}Ge.prototype=Ke.prototype={constructor:Ge,moveTo:function(t,n){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+n)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")},lineTo:function(t,n){this._+="L"+(this._x1=+t)+","+(this._y1=+n)},quadraticCurveTo:function(t,n,e,r){this._+="Q"+ +t+","+ +n+","+(this._x1=+e)+","+(this._y1=+r)},bezierCurveTo:function(t,n,e,r,i,a){this._+="C"+ +t+","+ +n+","+ +e+","+ +r+","+(this._x1=+i)+","+(this._y1=+a)},arcTo:function(t,n,e,r,i){t=+t,n=+n,e=+e,r=+r,i=+i;var a=this._x1,f=this._y1,o=e-t,c=r-n,u=a-t,s=f-n,h=u*u+s*s;if(i<0)throw new Error("negative radius: "+i);if(null===this._x1)this._+="M"+(this._x1=t)+","+(this._y1=n);else if(h>1e-6)if(Math.abs(s*o-c*u)>1e-6&&i){var l=e-a,d=r-f,p=o*o+c*c,_=l*l+d*d,b=Math.sqrt(p),y=Math.sqrt(h),v=i*Math.tan((Je-Math.acos((p+h-_)/(2*b*y)))/2),g=v/y,x=v/b;Math.abs(g-1)>1e-6&&(this._+="L"+(t+g*u)+","+(n+g*s)),this._+="A"+i+","+i+",0,0,"+ +(s*l>u*d)+","+(this._x1=t+x*o)+","+(this._y1=n+x*c)}else this._+="L"+(this._x1=t)+","+(this._y1=n);else;},arc:function(t,n,e,r,i,a){t=+t,n=+n;var f=(e=+e)*Math.cos(r),o=e*Math.sin(r),c=t+f,u=n+o,s=1^a,h=a?r-i:i-r;if(e<0)throw new Error("negative radius: "+e);null===this._x1?this._+="M"+c+","+u:(Math.abs(this._x1-c)>1e-6||Math.abs(this._y1-u)>1e-6)&&(this._+="L"+c+","+u),e&&(h<0&&(h=h%We+We),h>Qe?this._+="A"+e+","+e+",0,1,"+s+","+(t-f)+","+(n-o)+"A"+e+","+e+",0,1,"+s+","+(this._x1=c)+","+(this._y1=u):h>1e-6&&(this._+="A"+e+","+e+",0,"+ +(h>=Je)+","+s+","+(this._x1=t+e*Math.cos(i))+","+(this._y1=n+e*Math.sin(i))))},rect:function(t,n,e,r){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+n)+"h"+ +e+"v"+ +r+"h"+-e+"Z"},toString:function(){return this._}};var tr=Ke;function nr(){}function er(t,n){var e=new nr;if(t instanceof nr)t.each(function(t,n){e.set(n,t)});else if(Array.isArray(t)){var r,i=-1,a=t.length;if(null==n)for(;++i<a;)e.set(i,t[i]);else for(;++i<a;)e.set(n(r=t[i],i,t),r)}else if(t)for(var f in t)e.set(f,t[f]);return e}nr.prototype=er.prototype={constructor:nr,has:function(t){return"$"+t in this},get:function(t){return this["$"+t]},set:function(t,n){return this["$"+t]=n,this},remove:function(t){var n="$"+t;return n in this&&delete this[n]},clear:function(){for(var t in this)"$"===t[0]&&delete this[t]},keys:function(){var t=[];for(var n in this)"$"===n[0]&&t.push(n.slice(1));return t},values:function(){var t=[];for(var n in this)"$"===n[0]&&t.push(this[n]);return t},entries:function(){var t=[];for(var n in this)"$"===n[0]&&t.push({key:n.slice(1),value:this[n]});return t},size:function(){var t=0;for(var n in this)"$"===n[0]&&++t;return t},empty:function(){for(var t in this)if("$"===t[0])return!1;return!0},each:function(t){for(var n in this)"$"===n[0]&&t(this[n],n.slice(1),this)}};var rr=er;function ir(){}var ar=rr.prototype;function fr(t,n){var e=new ir;if(t instanceof ir)t.each(function(t){e.add(t)});else if(t){var r=-1,i=t.length;if(null==n)for(;++r<i;)e.add(t[r]);else for(;++r<i;)e.add(n(t[r],r,t))}return e}ir.prototype=fr.prototype={constructor:ir,has:ar.has,add:function(t){return this["$"+(t+="")]=t,this},remove:ar.remove,clear:ar.clear,values:ar.keys,size:ar.size,empty:ar.empty,each:ar.each};var or=function(t){var n=[];for(var e in t)n.push(e);return n};Array.prototype.slice;var cr={},ur={},sr=34,hr=10,lr=13;function dr(t){return new Function("d","return {"+t.map(function(t,n){return JSON.stringify(t)+": d["+n+"]"}).join(",")+"}")}function pr(t){var n=Object.create(null),e=[];return t.forEach(function(t){for(var r in t)r in n||e.push(n[r]=r)}),e}function _r(t,n){var e=t+"",r=e.length;return r<n?new Array(n-r+1).join(0)+e:e}function br(t){var n,e=t.getUTCHours(),r=t.getUTCMinutes(),i=t.getUTCSeconds(),a=t.getUTCMilliseconds();return isNaN(t)?"Invalid Date":((n=t.getUTCFullYear())<0?"-"+_r(-n,6):n>9999?"+"+_r(n,6):_r(n,4))+"-"+_r(t.getUTCMonth()+1,2)+"-"+_r(t.getUTCDate(),2)+(a?"T"+_r(e,2)+":"+_r(r,2)+":"+_r(i,2)+"."+_r(a,3)+"Z":i?"T"+_r(e,2)+":"+_r(r,2)+":"+_r(i,2)+"Z":r||e?"T"+_r(e,2)+":"+_r(r,2)+"Z":"")}var yr=function(t){var n=new RegExp('["'+t+"\n\r]"),e=t.charCodeAt(0);function r(t,n){var r,i=[],a=t.length,f=0,o=0,c=a<=0,u=!1;function s(){if(c)return ur;if(u)return u=!1,cr;var n,r,i=f;if(t.charCodeAt(i)===sr){for(;f++<a&&t.charCodeAt(f)!==sr||t.charCodeAt(++f)===sr;);return(n=f)>=a?c=!0:(r=t.charCodeAt(f++))===hr?u=!0:r===lr&&(u=!0,t.charCodeAt(f)===hr&&++f),t.slice(i+1,n-1).replace(/""/g,'"')}for(;f<a;){if((r=t.charCodeAt(n=f++))===hr)u=!0;else if(r===lr)u=!0,t.charCodeAt(f)===hr&&++f;else if(r!==e)continue;return t.slice(i,n)}return c=!0,t.slice(i,a)}for(t.charCodeAt(a-1)===hr&&--a,t.charCodeAt(a-1)===lr&&--a;(r=s())!==ur;){for(var h=[];r!==cr&&r!==ur;)h.push(r),r=s();n&&null==(h=n(h,o++))||i.push(h)}return i}function i(n,e){return n.map(function(n){return e.map(function(t){return f(n[t])}).join(t)})}function a(n){return n.map(f).join(t)}function f(t){return null==t?"":t instanceof Date?br(t):n.test(t+="")?'"'+t.replace(/"/g,'""')+'"':t}return{parse:function(t,n){var e,i,a=r(t,function(t,r){if(e)return e(t,r-1);i=t,e=n?function(t,n){var e=dr(t);return function(r,i){return n(e(r),i,t)}}(t,n):dr(t)});return a.columns=i||[],a},parseRows:r,format:function(n,e){return null==e&&(e=pr(n)),[e.map(f).join(t)].concat(i(n,e)).join("\n")},formatBody:function(t,n){return null==n&&(n=pr(t)),i(t,n).join("\n")},formatRows:function(t){return t.map(a).join("\n")}}},vr=yr(","),gr=vr.parse,xr=(vr.parseRows,vr.format,vr.formatBody,vr.formatRows,yr("\t")),mr=xr.parse;xr.parseRows,xr.format,xr.formatBody,xr.formatRows;function wr(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.text()}var Mr=function(t,n){return fetch(t,n).then(wr)};function kr(t){return function(n,e,r){return 2===arguments.length&&"function"==typeof e&&(r=e,e=void 0),Mr(n,e).then(function(n){return t(n,r)})}}var Nr=kr(gr);kr(mr);function Tr(t){return function(n,e){return Mr(n,e).then(function(n){return(new DOMParser).parseFromString(n,t)})}}Tr("application/xml"),Tr("text/html");var Ar=Tr("image/svg+xml");function Cr(t,n,e,r){if(isNaN(n)||isNaN(e))return t;var i,a,f,o,c,u,s,h,l,d=t._root,p={data:r},_=t._x0,b=t._y0,y=t._x1,v=t._y1;if(!d)return t._root=p,t;for(;d.length;)if((u=n>=(a=(_+y)/2))?_=a:y=a,(s=e>=(f=(b+v)/2))?b=f:v=f,i=d,!(d=d[h=s<<1|u]))return i[h]=p,t;if(o=+t._x.call(null,d.data),c=+t._y.call(null,d.data),n===o&&e===c)return p.next=d,i?i[h]=p:t._root=p,t;do{i=i?i[h]=new Array(4):t._root=new Array(4),(u=n>=(a=(_+y)/2))?_=a:y=a,(s=e>=(f=(b+v)/2))?b=f:v=f}while((h=s<<1|u)==(l=(c>=f)<<1|o>=a));return i[l]=d,i[h]=p,t}var Sr=function(t,n,e,r,i){this.node=t,this.x0=n,this.y0=e,this.x1=r,this.y1=i};function Er(t){return t[0]}function Ur(t){return t[1]}function Lr(t,n,e){var r=new Pr(null==n?Er:n,null==e?Ur:e,NaN,NaN,NaN,NaN);return null==t?r:r.addAll(t)}function Pr(t,n,e,r,i,a){this._x=t,this._y=n,this._x0=e,this._y0=r,this._x1=i,this._y1=a,this._root=void 0}function Dr(t){for(var n={data:t.data},e=n;t=t.next;)e=e.next={data:t.data};return n}var Rr=Lr.prototype=Pr.prototype;Rr.copy=function(){var t,n,e=new Pr(this._x,this._y,this._x0,this._y0,this._x1,this._y1),r=this._root;if(!r)return e;if(!r.length)return e._root=Dr(r),e;for(t=[{source:r,target:e._root=new Array(4)}];r=t.pop();)for(var i=0;i<4;++i)(n=r.source[i])&&(n.length?t.push({source:n,target:r.target[i]=new Array(4)}):r.target[i]=Dr(n));return e},Rr.add=function(t){var n=+this._x.call(null,t),e=+this._y.call(null,t);return Cr(this.cover(n,e),n,e,t)},Rr.addAll=function(t){var n,e,r,i,a=t.length,f=new Array(a),o=new Array(a),c=1/0,u=1/0,s=-1/0,h=-1/0;for(e=0;e<a;++e)isNaN(r=+this._x.call(null,n=t[e]))||isNaN(i=+this._y.call(null,n))||(f[e]=r,o[e]=i,r<c&&(c=r),r>s&&(s=r),i<u&&(u=i),i>h&&(h=i));if(c>s||u>h)return this;for(this.cover(c,u).cover(s,h),e=0;e<a;++e)Cr(this,f[e],o[e],t[e]);return this},Rr.cover=function(t,n){if(isNaN(t=+t)||isNaN(n=+n))return this;var e=this._x0,r=this._y0,i=this._x1,a=this._y1;if(isNaN(e))i=(e=Math.floor(t))+1,a=(r=Math.floor(n))+1;else{for(var f,o,c=i-e,u=this._root;e>t||t>=i||r>n||n>=a;)switch(o=(n<r)<<1|t<e,(f=new Array(4))[o]=u,u=f,c*=2,o){case 0:i=e+c,a=r+c;break;case 1:e=i-c,a=r+c;break;case 2:i=e+c,r=a-c;break;case 3:e=i-c,r=a-c}this._root&&this._root.length&&(this._root=u)}return this._x0=e,this._y0=r,this._x1=i,this._y1=a,this},Rr.data=function(){var t=[];return this.visit(function(n){if(!n.length)do{t.push(n.data)}while(n=n.next)}),t},Rr.extent=function(t){return arguments.length?this.cover(+t[0][0],+t[0][1]).cover(+t[1][0],+t[1][1]):isNaN(this._x0)?void 0:[[this._x0,this._y0],[this._x1,this._y1]]},Rr.find=function(t,n,e){var r,i,a,f,o,c,u,s=this._x0,h=this._y0,l=this._x1,d=this._y1,p=[],_=this._root;for(_&&p.push(new Sr(_,s,h,l,d)),null==e?e=1/0:(s=t-e,h=n-e,l=t+e,d=n+e,e*=e);c=p.pop();)if(!(!(_=c.node)||(i=c.x0)>l||(a=c.y0)>d||(f=c.x1)<s||(o=c.y1)<h))if(_.length){var b=(i+f)/2,y=(a+o)/2;p.push(new Sr(_[3],b,y,f,o),new Sr(_[2],i,y,b,o),new Sr(_[1],b,a,f,y),new Sr(_[0],i,a,b,y)),(u=(n>=y)<<1|t>=b)&&(c=p[p.length-1],p[p.length-1]=p[p.length-1-u],p[p.length-1-u]=c)}else{var v=t-+this._x.call(null,_.data),g=n-+this._y.call(null,_.data),x=v*v+g*g;if(x<e){var m=Math.sqrt(e=x);s=t-m,h=n-m,l=t+m,d=n+m,r=_.data}}return r},Rr.remove=function(t){if(isNaN(a=+this._x.call(null,t))||isNaN(f=+this._y.call(null,t)))return this;var n,e,r,i,a,f,o,c,u,s,h,l,d=this._root,p=this._x0,_=this._y0,b=this._x1,y=this._y1;if(!d)return this;if(d.length)for(;;){if((u=a>=(o=(p+b)/2))?p=o:b=o,(s=f>=(c=(_+y)/2))?_=c:y=c,n=d,!(d=d[h=s<<1|u]))return this;if(!d.length)break;(n[h+1&3]||n[h+2&3]||n[h+3&3])&&(e=n,l=h)}for(;d.data!==t;)if(r=d,!(d=d.next))return this;return(i=d.next)&&delete d.next,r?(i?r.next=i:delete r.next,this):n?(i?n[h]=i:delete n[h],(d=n[0]||n[1]||n[2]||n[3])&&d===(n[3]||n[2]||n[1]||n[0])&&!d.length&&(e?e[l]=d:this._root=d),this):(this._root=i,this)},Rr.removeAll=function(t){for(var n=0,e=t.length;n<e;++n)this.remove(t[n]);return this},Rr.root=function(){return this._root},Rr.size=function(){var t=0;return this.visit(function(n){if(!n.length)do{++t}while(n=n.next)}),t},Rr.visit=function(t){var n,e,r,i,a,f,o=[],c=this._root;for(c&&o.push(new Sr(c,this._x0,this._y0,this._x1,this._y1));n=o.pop();)if(!t(c=n.node,r=n.x0,i=n.y0,a=n.x1,f=n.y1)&&c.length){var u=(r+a)/2,s=(i+f)/2;(e=c[3])&&o.push(new Sr(e,u,s,a,f)),(e=c[2])&&o.push(new Sr(e,r,s,u,f)),(e=c[1])&&o.push(new Sr(e,u,i,a,s)),(e=c[0])&&o.push(new Sr(e,r,i,u,s))}return this},Rr.visitAfter=function(t){var n,e=[],r=[];for(this._root&&e.push(new Sr(this._root,this._x0,this._y0,this._x1,this._y1));n=e.pop();){var i=n.node;if(i.length){var a,f=n.x0,o=n.y0,c=n.x1,u=n.y1,s=(f+c)/2,h=(o+u)/2;(a=i[0])&&e.push(new Sr(a,f,o,s,h)),(a=i[1])&&e.push(new Sr(a,s,o,c,h)),(a=i[2])&&e.push(new Sr(a,f,h,s,u)),(a=i[3])&&e.push(new Sr(a,s,h,c,u))}r.push(n)}for(;n=r.pop();)t(n.node,n.x0,n.y0,n.x1,n.y1);return this},Rr.x=function(t){return arguments.length?(this._x=t,this):this._x},Rr.y=function(t){return arguments.length?(this._y=t,this):this._y};Math.PI,Math.sqrt(5);var Fr=function(t,n){if((e=(t=n?t.toExponential(n-1):t.toExponential()).indexOf("e"))<0)return null;var e,r=t.slice(0,e);return[r.length>1?r[0]+r.slice(2):r,+t.slice(e+1)]},jr=function(t){return(t=Fr(Math.abs(t)))?t[1]:NaN},Or=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function Yr(t){return new qr(t)}function qr(t){if(!(n=Or.exec(t)))throw new Error("invalid format: "+t);var n;this.fill=n[1]||" ",this.align=n[2]||">",this.sign=n[3]||"-",this.symbol=n[4]||"",this.zero=!!n[5],this.width=n[6]&&+n[6],this.comma=!!n[7],this.precision=n[8]&&+n[8].slice(1),this.trim=!!n[9],this.type=n[10]||""}Yr.prototype=qr.prototype,qr.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(null==this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(null==this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};var zr,Ir,Hr,$r,Br=function(t){t:for(var n,e=t.length,r=1,i=-1;r<e;++r)switch(t[r]){case".":i=n=r;break;case"0":0===i&&(i=r),n=r;break;default:if(i>0){if(!+t[r])break t;i=0}}return i>0?t.slice(0,i)+t.slice(n+1):t},Xr=function(t,n){var e=Fr(t,n);if(!e)return t+"";var r=e[0],i=e[1];return i<0?"0."+new Array(-i).join("0")+r:r.length>i+1?r.slice(0,i+1)+"."+r.slice(i+1):r+new Array(i-r.length+2).join("0")},Vr={"%":function(t,n){return(100*t).toFixed(n)},b:function(t){return Math.round(t).toString(2)},c:function(t){return t+""},d:function(t){return Math.round(t).toString(10)},e:function(t,n){return t.toExponential(n)},f:function(t,n){return t.toFixed(n)},g:function(t,n){return t.toPrecision(n)},o:function(t){return Math.round(t).toString(8)},p:function(t,n){return Xr(100*t,n)},r:Xr,s:function(t,n){var e=Fr(t,n);if(!e)return t+"";var r=e[0],i=e[1],a=i-(zr=3*Math.max(-8,Math.min(8,Math.floor(i/3))))+1,f=r.length;return a===f?r:a>f?r+new Array(a-f+1).join("0"):a>0?r.slice(0,a)+"."+r.slice(a):"0."+new Array(1-a).join("0")+Fr(t,Math.max(0,n+a-1))[0]},X:function(t){return Math.round(t).toString(16).toUpperCase()},x:function(t){return Math.round(t).toString(16)}},Zr=function(t){return t},Jr=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];Ir=function(t){var n,e,r=t.grouping&&t.thousands?(n=t.grouping,e=t.thousands,function(t,r){for(var i=t.length,a=[],f=0,o=n[0],c=0;i>0&&o>0&&(c+o+1>r&&(o=Math.max(1,r-c)),a.push(t.substring(i-=o,i+o)),!((c+=o+1)>r));)o=n[f=(f+1)%n.length];return a.reverse().join(e)}):Zr,i=t.currency,a=t.decimal,f=t.numerals?function(t){return function(n){return n.replace(/[0-9]/g,function(n){return t[+n]})}}(t.numerals):Zr,o=t.percent||"%";function c(t){var n=(t=Yr(t)).fill,e=t.align,c=t.sign,u=t.symbol,s=t.zero,h=t.width,l=t.comma,d=t.precision,p=t.trim,_=t.type;"n"===_?(l=!0,_="g"):Vr[_]||(null==d&&(d=12),p=!0,_="g"),(s||"0"===n&&"="===e)&&(s=!0,n="0",e="=");var b="$"===u?i[0]:"#"===u&&/[boxX]/.test(_)?"0"+_.toLowerCase():"",y="$"===u?i[1]:/[%p]/.test(_)?o:"",v=Vr[_],g=/[defgprs%]/.test(_);function x(t){var i,o,u,x=b,m=y;if("c"===_)m=v(t)+m,t="";else{var w=(t=+t)<0;if(t=v(Math.abs(t),d),p&&(t=Br(t)),w&&0==+t&&(w=!1),x=(w?"("===c?c:"-":"-"===c||"("===c?"":c)+x,m=("s"===_?Jr[8+zr/3]:"")+m+(w&&"("===c?")":""),g)for(i=-1,o=t.length;++i<o;)if(48>(u=t.charCodeAt(i))||u>57){m=(46===u?a+t.slice(i+1):t.slice(i))+m,t=t.slice(0,i);break}}l&&!s&&(t=r(t,1/0));var M=x.length+t.length+m.length,k=M<h?new Array(h-M+1).join(n):"";switch(l&&s&&(t=r(k+t,k.length?h-m.length:1/0),k=""),e){case"<":t=x+t+m+k;break;case"=":t=x+k+t+m;break;case"^":t=k.slice(0,M=k.length>>1)+x+t+m+k.slice(M);break;default:t=k+x+t+m}return f(t)}return d=null==d?6:/[gprs]/.test(_)?Math.max(1,Math.min(21,d)):Math.max(0,Math.min(20,d)),x.toString=function(){return t+""},x}return{format:c,formatPrefix:function(t,n){var e=c(((t=Yr(t)).type="f",t)),r=3*Math.max(-8,Math.min(8,Math.floor(jr(n)/3))),i=Math.pow(10,-r),a=Jr[8+r/3];return function(t){return e(i*t)+a}}}}({decimal:".",thousands:",",grouping:[3],currency:["$",""]}),Hr=Ir.format,$r=Ir.formatPrefix;var Wr=function(){return new Qr};function Qr(){this.reset()}Qr.prototype={constructor:Qr,reset:function(){this.s=this.t=0},add:function(t){Kr(Gr,t,this.t),Kr(this,Gr.s,this.s),this.s?this.t+=Gr.t:this.s=Gr.t},valueOf:function(){return this.s}};var Gr=new Qr;function Kr(t,n,e){var r=t.s=n+e,i=r-n,a=r-i;t.t=n-a+(e-i)}var ti=1e-6,ni=Math.PI,ei=ni/2,ri=ni/4,ii=2*ni,ai=ni/180,fi=Math.abs,oi=Math.atan,ci=Math.atan2,ui=Math.cos,si=(Math.ceil,Math.exp),hi=(Math.floor,Math.log),li=(Math.pow,Math.sin),di=(Math.sign,Math.sqrt),pi=Math.tan;function _i(t){return t>1?0:t<-1?ni:Math.acos(t)}function bi(t){return t>1?ei:t<-1?-ei:Math.asin(t)}function yi(){}Wr(),Wr();function vi(t){var n=t[0],e=t[1],r=ui(e);return[r*ui(n),r*li(n),li(e)]}function gi(t,n){return[t[1]*n[2]-t[2]*n[1],t[2]*n[0]-t[0]*n[2],t[0]*n[1]-t[1]*n[0]]}function xi(t){var n=di(t[0]*t[0]+t[1]*t[1]+t[2]*t[2]);t[0]/=n,t[1]/=n,t[2]/=n}Wr();function mi(t,n){return[fi(t)>ni?t+Math.round(-t/ii)*ii:t,n]}mi.invert=mi;var wi=function(){var t,n=[];return{point:function(n,e){t.push([n,e])},lineStart:function(){n.push(t=[])},lineEnd:yi,rejoin:function(){n.length>1&&n.push(n.pop().concat(n.shift()))},result:function(){var e=n;return n=[],t=null,e}}},Mi=function(t,n){return fi(t[0]-n[0])<ti&&fi(t[1]-n[1])<ti};function ki(t,n,e,r){this.x=t,this.z=n,this.o=e,this.e=r,this.v=!1,this.n=this.p=null}var Ni=function(t,n,e,r,i){var a,f,o=[],c=[];if(t.forEach(function(t){if(!((n=t.length-1)<=0)){var n,e,r=t[0],f=t[n];if(Mi(r,f)){for(i.lineStart(),a=0;a<n;++a)i.point((r=t[a])[0],r[1]);i.lineEnd()}else o.push(e=new ki(r,t,null,!0)),c.push(e.o=new ki(r,null,e,!1)),o.push(e=new ki(f,t,null,!1)),c.push(e.o=new ki(f,null,e,!0))}}),o.length){for(c.sort(n),Ti(o),Ti(c),a=0,f=c.length;a<f;++a)c[a].e=e=!e;for(var u,s,h=o[0];;){for(var l=h,d=!0;l.v;)if((l=l.n)===h)return;u=l.z,i.lineStart();do{if(l.v=l.o.v=!0,l.e){if(d)for(a=0,f=u.length;a<f;++a)i.point((s=u[a])[0],s[1]);else r(l.x,l.n.x,1,i);l=l.n}else{if(d)for(u=l.p.z,a=u.length-1;a>=0;--a)i.point((s=u[a])[0],s[1]);else r(l.x,l.p.x,-1,i);l=l.p}u=(l=l.o).z,d=!d}while(!l.v);i.lineEnd()}}};function Ti(t){if(n=t.length){for(var n,e,r=0,i=t[0];++r<n;)i.n=e=t[r],e.p=i,i=e;i.n=e=t[0],e.p=i}}var Ai=Wr(),Ci=function(t,n){var e=n[0],r=n[1],i=li(r),a=[li(e),-ui(e),0],f=0,o=0;Ai.reset(),1===i?r=ei+ti:-1===i&&(r=-ei-ti);for(var c=0,u=t.length;c<u;++c)if(h=(s=t[c]).length)for(var s,h,l=s[h-1],d=l[0],p=l[1]/2+ri,_=li(p),b=ui(p),y=0;y<h;++y,d=g,_=m,b=w,l=v){var v=s[y],g=v[0],x=v[1]/2+ri,m=li(x),w=ui(x),M=g-d,k=M>=0?1:-1,N=k*M,T=N>ni,A=_*m;if(Ai.add(ci(A*k*li(N),b*w+A*ui(N))),f+=T?M+k*ii:M,T^d>=e^g>=e){var C=gi(vi(l),vi(v));xi(C);var S=gi(a,C);xi(S);var E=(T^M>=0?-1:1)*bi(S[2]);(r>E||r===E&&(C[0]||C[1]))&&(o+=T^M>=0?1:-1)}}return(f<-ti||f<ti&&Ai<-ti)^1&o},Si=function(t,n,e,r){return function(i){var a,f,o,c=n(i),u=wi(),s=n(u),h=!1,l={point:d,lineStart:_,lineEnd:b,polygonStart:function(){l.point=v,l.lineStart=g,l.lineEnd=x,f=[],a=[]},polygonEnd:function(){l.point=d,l.lineStart=_,l.lineEnd=b,f=y(f);var t=Ci(a,r);f.length?(h||(i.polygonStart(),h=!0),Ni(f,Ui,t,e,i)):t&&(h||(i.polygonStart(),h=!0),i.lineStart(),e(null,null,1,i),i.lineEnd()),h&&(i.polygonEnd(),h=!1),f=a=null},sphere:function(){i.polygonStart(),i.lineStart(),e(null,null,1,i),i.lineEnd(),i.polygonEnd()}};function d(n,e){t(n,e)&&i.point(n,e)}function p(t,n){c.point(t,n)}function _(){l.point=p,c.lineStart()}function b(){l.point=d,c.lineEnd()}function v(t,n){o.push([t,n]),s.point(t,n)}function g(){s.lineStart(),o=[]}function x(){v(o[0][0],o[0][1]),s.lineEnd();var t,n,e,r,c=s.clean(),l=u.result(),d=l.length;if(o.pop(),a.push(o),o=null,d)if(1&c){if((n=(e=l[0]).length-1)>0){for(h||(i.polygonStart(),h=!0),i.lineStart(),t=0;t<n;++t)i.point((r=e[t])[0],r[1]);i.lineEnd()}}else d>1&&2&c&&l.push(l.pop().concat(l.shift())),f.push(l.filter(Ei))}return l}};function Ei(t){return t.length>1}function Ui(t,n){return((t=t.x)[0]<0?t[1]-ei-ti:ei-t[1])-((n=n.x)[0]<0?n[1]-ei-ti:ei-n[1])}Si(function(){return!0},function(t){var n,e=NaN,r=NaN,i=NaN;return{lineStart:function(){t.lineStart(),n=1},point:function(a,f){var o=a>0?ni:-ni,c=fi(a-e);fi(c-ni)<ti?(t.point(e,r=(r+f)/2>0?ei:-ei),t.point(i,r),t.lineEnd(),t.lineStart(),t.point(o,r),t.point(a,r),n=0):i!==o&&c>=ni&&(fi(e-i)<ti&&(e-=i*ti),fi(a-o)<ti&&(a-=o*ti),r=function(t,n,e,r){var i,a,f=li(t-e);return fi(f)>ti?oi((li(n)*(a=ui(r))*li(e)-li(r)*(i=ui(n))*li(t))/(i*a*f)):(n+r)/2}(e,r,a,f),t.point(i,r),t.lineEnd(),t.lineStart(),t.point(o,r),n=0),t.point(e=a,r=f),i=o},lineEnd:function(){t.lineEnd(),e=r=NaN},clean:function(){return 2-n}}},function(t,n,e,r){var i;if(null==t)i=e*ei,r.point(-ni,i),r.point(0,i),r.point(ni,i),r.point(ni,0),r.point(ni,-i),r.point(0,-i),r.point(-ni,-i),r.point(-ni,0),r.point(-ni,i);else if(fi(t[0]-n[0])>ti){var a=t[0]<n[0]?ni:-ni;i=e*a/2,r.point(-a,i),r.point(0,i),r.point(a,i)}else r.point(n[0],n[1])},[-ni,-ei]);Wr();Wr(),Wr();function Li(t){this._context=t}Li.prototype={_radius:4.5,pointRadius:function(t){return this._radius=t,this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._context.closePath(),this._point=NaN},point:function(t,n){switch(this._point){case 0:this._context.moveTo(t,n),this._point=1;break;case 1:this._context.lineTo(t,n);break;default:this._context.moveTo(t+this._radius,n),this._context.arc(t,n,this._radius,0,ii)}},result:yi};Wr();function Pi(){this._string=[]}function Di(t){return"m0,"+t+"a"+t+","+t+" 0 1,1 0,"+-2*t+"a"+t+","+t+" 0 1,1 0,"+2*t+"z"}Pi.prototype={_radius:4.5,_circle:Di(4.5),pointRadius:function(t){return(t=+t)!==this._radius&&(this._radius=t,this._circle=null),this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._string.push("Z"),this._point=NaN},point:function(t,n){switch(this._point){case 0:this._string.push("M",t,",",n),this._point=1;break;case 1:this._string.push("L",t,",",n);break;default:null==this._circle&&(this._circle=Di(this._radius)),this._string.push("M",t,",",n,this._circle)}},result:function(){if(this._string.length){var t=this._string.join("");return this._string=[],t}return null}};function Ri(t){return function(n){var e=new Fi;for(var r in t)e[r]=t[r];return e.stream=n,e}}function Fi(){}Fi.prototype={constructor:Fi,point:function(t,n){this.stream.point(t,n)},sphere:function(){this.stream.sphere()},lineStart:function(){this.stream.lineStart()},lineEnd:function(){this.stream.lineEnd()},polygonStart:function(){this.stream.polygonStart()},polygonEnd:function(){this.stream.polygonEnd()}};ui(30*ai);Ri({point:function(t,n){this.stream.point(t*ai,n*ai)}});function ji(t){return function(n,e){var r=ui(n),i=ui(e),a=t(r*i);return[a*i*li(n),a*li(e)]}}function Oi(t){return function(n,e){var r=di(n*n+e*e),i=t(r),a=li(i),f=ui(i);return[ci(n*a,r*f),bi(r&&e*a/r)]}}var Yi=ji(function(t){return di(2/(1+t))});Yi.invert=Oi(function(t){return 2*bi(t/2)});var qi=ji(function(t){return(t=_i(t))&&t/li(t)});qi.invert=Oi(function(t){return t});function zi(t,n){return[t,hi(pi((ei+n)/2))]}zi.invert=function(t,n){return[t,2*oi(si(n))-ei]};function Ii(t,n){return[t,n]}Ii.invert=Ii;var Hi=1.340264,$i=-.081106,Bi=893e-6,Xi=.003796,Vi=di(3)/2;function Zi(t,n){var e=bi(Vi*li(n)),r=e*e,i=r*r*r;return[t*ui(e)/(Vi*(Hi+3*$i*r+i*(7*Bi+9*Xi*r))),e*(Hi+$i*r+i*(Bi+Xi*r))]}Zi.invert=function(t,n){for(var e,r=n,i=r*r,a=i*i*i,f=0;f<12&&(a=(i=(r-=e=(r*(Hi+$i*i+a*(Bi+Xi*i))-n)/(Hi+3*$i*i+a*(7*Bi+9*Xi*i)))*r)*i*i,!(fi(e)<1e-12));++f);return[Vi*t*(Hi+3*$i*i+a*(7*Bi+9*Xi*i))/ui(r),bi(li(r)/Vi)]};function Ji(t,n){var e=ui(n),r=ui(t)*e;return[e*li(t)/r,li(n)/r]}Ji.invert=Oi(oi);function Wi(t,n){var e=n*n,r=e*e;return[t*(.8707-.131979*e+r*(r*(.003971*e-.001529*r)-.013791)),n*(1.007226+e*(.015085+r*(.028874*e-.044475-.005916*r)))]}Wi.invert=function(t,n){var e,r=n,i=25;do{var a=r*r,f=a*a;r-=e=(r*(1.007226+a*(.015085+f*(.028874*a-.044475-.005916*f)))-n)/(1.007226+a*(.045255+f*(.259866*a-.311325-.005916*11*f)))}while(fi(e)>ti&&--i>0);return[t/(.8707+(a=r*r)*(a*(a*a*a*(.003971-.001529*a)-.013791)-.131979)),r]};function Qi(t,n){return[ui(n)*li(t),li(n)]}Qi.invert=Oi(bi);function Gi(t,n){var e=ui(n),r=1+ui(t)*e;return[e*li(t)/r,li(n)/r]}Gi.invert=Oi(function(t){return 2*oi(t)});function Ki(t,n){return[hi(pi((ei+n)/2)),-t]}Ki.invert=function(t,n){return[-n,2*oi(si(t))-ei]};function ta(t){var n=0,e=t.children,r=e&&e.length;if(r)for(;--r>=0;)n+=e[r].value;else n=1;t.value=n}function na(t,n){var e,r,i,a,f,o=new aa(t),c=+t.value&&(o.value=t.value),u=[o];for(null==n&&(n=ea);e=u.pop();)if(c&&(e.value=+e.data.value),(i=n(e.data))&&(f=i.length))for(e.children=new Array(f),a=f-1;a>=0;--a)u.push(r=e.children[a]=new aa(i[a])),r.parent=e,r.depth=e.depth+1;return o.eachBefore(ia)}function ea(t){return t.children}function ra(t){t.data=t.data.data}function ia(t){var n=0;do{t.height=n}while((t=t.parent)&&t.height<++n)}function aa(t){this.data=t,this.depth=this.height=0,this.parent=null}aa.prototype=na.prototype={constructor:aa,count:function(){return this.eachAfter(ta)},each:function(t){var n,e,r,i,a=this,f=[a];do{for(n=f.reverse(),f=[];a=n.pop();)if(t(a),e=a.children)for(r=0,i=e.length;r<i;++r)f.push(e[r])}while(f.length);return this},eachAfter:function(t){for(var n,e,r,i=this,a=[i],f=[];i=a.pop();)if(f.push(i),n=i.children)for(e=0,r=n.length;e<r;++e)a.push(n[e]);for(;i=f.pop();)t(i);return this},eachBefore:function(t){for(var n,e,r=this,i=[r];r=i.pop();)if(t(r),n=r.children)for(e=n.length-1;e>=0;--e)i.push(n[e]);return this},sum:function(t){return this.eachAfter(function(n){for(var e=+t(n.data)||0,r=n.children,i=r&&r.length;--i>=0;)e+=r[i].value;n.value=e})},sort:function(t){return this.eachBefore(function(n){n.children&&n.children.sort(t)})},path:function(t){for(var n=this,e=function(t,n){if(t===n)return t;var e=t.ancestors(),r=n.ancestors(),i=null;for(t=e.pop(),n=r.pop();t===n;)i=t,t=e.pop(),n=r.pop();return i}(n,t),r=[n];n!==e;)n=n.parent,r.push(n);for(var i=r.length;t!==e;)r.splice(i,0,t),t=t.parent;return r},ancestors:function(){for(var t=this,n=[t];t=t.parent;)n.push(t);return n},descendants:function(){var t=[];return this.each(function(n){t.push(n)}),t},leaves:function(){var t=[];return this.eachBefore(function(n){n.children||t.push(n)}),t},links:function(){var t=this,n=[];return t.each(function(e){e!==t&&n.push({source:e.parent,target:e})}),n},copy:function(){return na(this).eachBefore(ra)}};Array.prototype.slice;var fa=function(t,n,e,r,i){for(var a,f=t.children,o=-1,c=f.length,u=t.value&&(r-n)/t.value;++o<c;)(a=f[o]).y0=e,a.y1=i,a.x0=n,a.x1=n+=a.value*u};function oa(t,n){this._=t,this.parent=null,this.children=null,this.A=null,this.a=this,this.z=0,this.m=0,this.c=0,this.s=0,this.t=null,this.i=n}oa.prototype=Object.create(aa.prototype);var ca=function(t,n,e,r,i){for(var a,f=t.children,o=-1,c=f.length,u=t.value&&(i-e)/t.value;++o<c;)(a=f[o]).x0=n,a.x1=r,a.y0=e,a.y1=e+=a.value*u},ua=(1+Math.sqrt(5))/2;function sa(t,n,e,r,i,a){for(var f,o,c,u,s,h,l,d,p,_,b,y=[],v=n.children,g=0,x=0,m=v.length,w=n.value;g<m;){c=i-e,u=a-r;do{s=v[x++].value}while(!s&&x<m);for(h=l=s,b=s*s*(_=Math.max(u/c,c/u)/(w*t)),p=Math.max(l/b,b/h);x<m;++x){if(s+=o=v[x].value,o<h&&(h=o),o>l&&(l=o),b=s*s*_,(d=Math.max(l/b,b/h))>p){s-=o;break}p=d}y.push(f={value:s,dice:c<u,children:v.slice(g,x)}),f.dice?fa(f,e,r,i,w?r+=u*s/w:a):ca(f,e,r,w?e+=c*s/w:i,a),w-=s,g=x}return y}(function t(n){function e(t,e,r,i,a){sa(n,t,e,r,i,a)}return e.ratio=function(n){return t((n=+n)>1?n:1)},e})(ua),function t(n){function e(t,e,r,i,a){if((f=t._squarify)&&f.ratio===n)for(var f,o,c,u,s,h=-1,l=f.length,d=t.value;++h<l;){for(c=(o=f[h]).children,u=o.value=0,s=c.length;u<s;++u)o.value+=c[u].value;o.dice?fa(o,e,r,i,r+=(a-r)*o.value/d):ca(o,e,r,e+=(i-e)*o.value/d,a),d-=o.value}else t._squarify=f=sa(n,t,e,r,i,a),f.ratio=n}return e.ratio=function(n){return t((n=+n)>1?n:1)},e}(ua);var ha=function(){return Math.random()},la=(function t(n){function e(t,e){return t=null==t?0:+t,e=null==e?1:+e,1===arguments.length?(e=t,t=0):e-=t,function(){return n()*e+t}}return e.source=t,e}(ha),function t(n){function e(t,e){var r,i;return t=null==t?0:+t,e=null==e?1:+e,function(){var a;if(null!=r)a=r,r=null;else do{r=2*n()-1,a=2*n()-1,i=r*r+a*a}while(!i||i>1);return t+e*a*Math.sqrt(-2*Math.log(i)/i)}}return e.source=t,e}(ha)),da=(function t(n){function e(){var t=la.source(n).apply(this,arguments);return function(){return Math.exp(t())}}return e.source=t,e}(ha),function t(n){function e(t){return function(){for(var e=0,r=0;r<t;++r)e+=n();return e}}return e.source=t,e}(ha));(function t(n){function e(t){var e=da.source(n)(t);return function(){return e()/t}}return e.source=t,e})(ha),function t(n){function e(t){return function(){return-Math.log(1-n())/t}}return e.source=t,e}(ha);function pa(t,n){switch(arguments.length){case 0:break;case 1:this.range(t);break;default:this.range(n).domain(t)}return this}var _a=Array.prototype,ba=_a.map,ya=_a.slice;var va=function(t){return function(){return t}},ga=function(t){return+t},xa=[0,1];function ma(t){return t}function wa(t,n){return(n-=t=+t)?function(e){return(e-t)/n}:va(isNaN(n)?NaN:.5)}function Ma(t){var n,e=t[0],r=t[t.length-1];return e>r&&(n=e,e=r,r=n),function(t){return Math.max(e,Math.min(r,t))}}function ka(t,n,e){var r=t[0],i=t[1],a=n[0],f=n[1];return i<r?(r=wa(i,r),a=e(f,a)):(r=wa(r,i),a=e(a,f)),function(t){return a(r(t))}}function Na(t,n,e){var r=Math.min(t.length,n.length)-1,i=new Array(r),a=new Array(r),f=-1;for(t[r]<t[0]&&(t=t.slice().reverse(),n=n.slice().reverse());++f<r;)i[f]=wa(t[f],t[f+1]),a[f]=e(n[f],n[f+1]);return function(n){var e=o(t,n,1,r)-1;return a[e](i[e](n))}}function Ta(t,n){return n.domain(t.domain()).range(t.range()).interpolate(t.interpolate()).clamp(t.clamp()).unknown(t.unknown())}function Aa(){var t,n,e,r,i,a,f=xa,o=xa,c=Bn,u=ma;function s(){return r=Math.min(f.length,o.length)>2?Na:ka,i=a=null,h}function h(n){return isNaN(n=+n)?e:(i||(i=r(f.map(t),o,c)))(t(u(n)))}return h.invert=function(e){return u(n((a||(a=r(o,f.map(t),jn)))(e)))},h.domain=function(t){return arguments.length?(f=ba.call(t,ga),u===ma||(u=Ma(f)),s()):f.slice()},h.range=function(t){return arguments.length?(o=ya.call(t),s()):o.slice()},h.rangeRound=function(t){return o=ya.call(t),c=Xn,s()},h.clamp=function(t){return arguments.length?(u=t?Ma(f):ma,h):u!==ma},h.interpolate=function(t){return arguments.length?(c=t,s()):c},h.unknown=function(t){return arguments.length?(e=t,h):e},function(e,r){return t=e,n=r,s()}}function Ca(t,n){return Aa()(t,n)}var Sa=function(t,n,e,r){var i,a=_(t,n,e);switch((r=Yr(null==r?",f":r)).type){case"s":var f=Math.max(Math.abs(t),Math.abs(n));return null!=r.precision||isNaN(i=function(t,n){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(jr(n)/3)))-jr(Math.abs(t)))}(a,f))||(r.precision=i),$r(r,f);case"":case"e":case"g":case"p":case"r":null!=r.precision||isNaN(i=function(t,n){return t=Math.abs(t),n=Math.abs(n)-t,Math.max(0,jr(n)-jr(t))+1}(a,Math.max(Math.abs(t),Math.abs(n))))||(r.precision=i-("e"===r.type));break;case"f":case"%":null!=r.precision||isNaN(i=function(t){return Math.max(0,-jr(Math.abs(t)))}(a))||(r.precision=i-2*("%"===r.type))}return Hr(r)};function Ea(t){var n=t.domain;return t.ticks=function(t){var e=n();return d(e[0],e[e.length-1],null==t?10:t)},t.tickFormat=function(t,e){var r=n();return Sa(r[0],r[r.length-1],null==t?10:t,e)},t.nice=function(e){null==e&&(e=10);var r,i=n(),a=0,f=i.length-1,o=i[a],c=i[f];return c<o&&(r=o,o=c,c=r,r=a,a=f,f=r),(r=p(o,c,e))>0?r=p(o=Math.floor(o/r)*r,c=Math.ceil(c/r)*r,e):r<0&&(r=p(o=Math.ceil(o*r)/r,c=Math.floor(c*r)/r,e)),r>0?(i[a]=Math.floor(o/r)*r,i[f]=Math.ceil(c/r)*r,n(i)):r<0&&(i[a]=Math.ceil(o*r)/r,i[f]=Math.floor(c*r)/r,n(i)),t},t}function Ua(){var t=Ca(ma,ma);return t.copy=function(){return Ta(t,Ua())},pa.apply(t,arguments),Ea(t)}var La=new Date,Pa=new Date;function Da(t,n,e,r){function i(n){return t(n=new Date(+n)),n}return i.floor=i,i.ceil=function(e){return t(e=new Date(e-1)),n(e,1),t(e),e},i.round=function(t){var n=i(t),e=i.ceil(t);return t-n<e-t?n:e},i.offset=function(t,e){return n(t=new Date(+t),null==e?1:Math.floor(e)),t},i.range=function(e,r,a){var f,o=[];if(e=i.ceil(e),a=null==a?1:Math.floor(a),!(e<r&&a>0))return o;do{o.push(f=new Date(+e)),n(e,a),t(e)}while(f<e&&e<r);return o},i.filter=function(e){return Da(function(n){if(n>=n)for(;t(n),!e(n);)n.setTime(n-1)},function(t,r){if(t>=t)if(r<0)for(;++r<=0;)for(;n(t,-1),!e(t););else for(;--r>=0;)for(;n(t,1),!e(t););})},e&&(i.count=function(n,r){return La.setTime(+n),Pa.setTime(+r),t(La),t(Pa),Math.floor(e(La,Pa))},i.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?i.filter(r?function(n){return r(n)%t==0}:function(n){return i.count(0,n)%t==0}):i:null}),i}var Ra=Da(function(){},function(t,n){t.setTime(+t+n)},function(t,n){return n-t});Ra.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?Da(function(n){n.setTime(Math.floor(n/t)*t)},function(n,e){n.setTime(+n+e*t)},function(n,e){return(e-n)/t}):Ra:null};Ra.range;var Fa=6e4,ja=6048e5,Oa=Da(function(t){t.setTime(t-t.getMilliseconds())},function(t,n){t.setTime(+t+1e3*n)},function(t,n){return(n-t)/1e3},function(t){return t.getUTCSeconds()}),Ya=(Oa.range,Da(function(t){t.setTime(t-t.getMilliseconds()-1e3*t.getSeconds())},function(t,n){t.setTime(+t+n*Fa)},function(t,n){return(n-t)/Fa},function(t){return t.getMinutes()})),qa=(Ya.range,Da(function(t){t.setTime(t-t.getMilliseconds()-1e3*t.getSeconds()-t.getMinutes()*Fa)},function(t,n){t.setTime(+t+36e5*n)},function(t,n){return(n-t)/36e5},function(t){return t.getHours()})),za=(qa.range,Da(function(t){t.setHours(0,0,0,0)},function(t,n){t.setDate(t.getDate()+n)},function(t,n){return(n-t-(n.getTimezoneOffset()-t.getTimezoneOffset())*Fa)/864e5},function(t){return t.getDate()-1})),Ia=za;za.range;function Ha(t){return Da(function(n){n.setDate(n.getDate()-(n.getDay()+7-t)%7),n.setHours(0,0,0,0)},function(t,n){t.setDate(t.getDate()+7*n)},function(t,n){return(n-t-(n.getTimezoneOffset()-t.getTimezoneOffset())*Fa)/ja})}var $a=Ha(0),Ba=Ha(1),Xa=Ha(2),Va=Ha(3),Za=Ha(4),Ja=Ha(5),Wa=Ha(6),Qa=($a.range,Ba.range,Xa.range,Va.range,Za.range,Ja.range,Wa.range,Da(function(t){t.setDate(1),t.setHours(0,0,0,0)},function(t,n){t.setMonth(t.getMonth()+n)},function(t,n){return n.getMonth()-t.getMonth()+12*(n.getFullYear()-t.getFullYear())},function(t){return t.getMonth()})),Ga=(Qa.range,Da(function(t){t.setMonth(0,1),t.setHours(0,0,0,0)},function(t,n){t.setFullYear(t.getFullYear()+n)},function(t,n){return n.getFullYear()-t.getFullYear()},function(t){return t.getFullYear()}));Ga.every=function(t){return isFinite(t=Math.floor(t))&&t>0?Da(function(n){n.setFullYear(Math.floor(n.getFullYear()/t)*t),n.setMonth(0,1),n.setHours(0,0,0,0)},function(n,e){n.setFullYear(n.getFullYear()+e*t)}):null};var Ka=Ga,tf=(Ga.range,Da(function(t){t.setUTCSeconds(0,0)},function(t,n){t.setTime(+t+n*Fa)},function(t,n){return(n-t)/Fa},function(t){return t.getUTCMinutes()})),nf=(tf.range,Da(function(t){t.setUTCMinutes(0,0,0)},function(t,n){t.setTime(+t+36e5*n)},function(t,n){return(n-t)/36e5},function(t){return t.getUTCHours()})),ef=(nf.range,Da(function(t){t.setUTCHours(0,0,0,0)},function(t,n){t.setUTCDate(t.getUTCDate()+n)},function(t,n){return(n-t)/864e5},function(t){return t.getUTCDate()-1})),rf=ef;ef.range;function af(t){return Da(function(n){n.setUTCDate(n.getUTCDate()-(n.getUTCDay()+7-t)%7),n.setUTCHours(0,0,0,0)},function(t,n){t.setUTCDate(t.getUTCDate()+7*n)},function(t,n){return(n-t)/ja})}var ff=af(0),of=af(1),cf=af(2),uf=af(3),sf=af(4),hf=af(5),lf=af(6),df=(ff.range,of.range,cf.range,uf.range,sf.range,hf.range,lf.range,Da(function(t){t.setUTCDate(1),t.setUTCHours(0,0,0,0)},function(t,n){t.setUTCMonth(t.getUTCMonth()+n)},function(t,n){return n.getUTCMonth()-t.getUTCMonth()+12*(n.getUTCFullYear()-t.getUTCFullYear())},function(t){return t.getUTCMonth()})),pf=(df.range,Da(function(t){t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)},function(t,n){t.setUTCFullYear(t.getUTCFullYear()+n)},function(t,n){return n.getUTCFullYear()-t.getUTCFullYear()},function(t){return t.getUTCFullYear()}));pf.every=function(t){return isFinite(t=Math.floor(t))&&t>0?Da(function(n){n.setUTCFullYear(Math.floor(n.getUTCFullYear()/t)*t),n.setUTCMonth(0,1),n.setUTCHours(0,0,0,0)},function(n,e){n.setUTCFullYear(n.getUTCFullYear()+e*t)}):null};var _f=pf;pf.range;function bf(t){if(0<=t.y&&t.y<100){var n=new Date(-1,t.m,t.d,t.H,t.M,t.S,t.L);return n.setFullYear(t.y),n}return new Date(t.y,t.m,t.d,t.H,t.M,t.S,t.L)}function yf(t){if(0<=t.y&&t.y<100){var n=new Date(Date.UTC(-1,t.m,t.d,t.H,t.M,t.S,t.L));return n.setUTCFullYear(t.y),n}return new Date(Date.UTC(t.y,t.m,t.d,t.H,t.M,t.S,t.L))}function vf(t){return{y:t,m:0,d:1,H:0,M:0,S:0,L:0}}var gf,xf,mf,wf={"-":"",_:" ",0:"0"},Mf=/^\s*\d+/,kf=/^%/,Nf=/[\\^$*+?|[\]().{}]/g;function Tf(t,n,e){var r=t<0?"-":"",i=(r?-t:t)+"",a=i.length;return r+(a<e?new Array(e-a+1).join(n)+i:i)}function Af(t){return t.replace(Nf,"\\$&")}function Cf(t){return new RegExp("^(?:"+t.map(Af).join("|")+")","i")}function Sf(t){for(var n={},e=-1,r=t.length;++e<r;)n[t[e].toLowerCase()]=e;return n}function Ef(t,n,e){var r=Mf.exec(n.slice(e,e+1));return r?(t.w=+r[0],e+r[0].length):-1}function Uf(t,n,e){var r=Mf.exec(n.slice(e,e+1));return r?(t.u=+r[0],e+r[0].length):-1}function Lf(t,n,e){var r=Mf.exec(n.slice(e,e+2));return r?(t.U=+r[0],e+r[0].length):-1}function Pf(t,n,e){var r=Mf.exec(n.slice(e,e+2));return r?(t.V=+r[0],e+r[0].length):-1}function Df(t,n,e){var r=Mf.exec(n.slice(e,e+2));return r?(t.W=+r[0],e+r[0].length):-1}function Rf(t,n,e){var r=Mf.exec(n.slice(e,e+4));return r?(t.y=+r[0],e+r[0].length):-1}function Ff(t,n,e){var r=Mf.exec(n.slice(e,e+2));return r?(t.y=+r[0]+(+r[0]>68?1900:2e3),e+r[0].length):-1}function jf(t,n,e){var r=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(n.slice(e,e+6));return r?(t.Z=r[1]?0:-(r[2]+(r[3]||"00")),e+r[0].length):-1}function Of(t,n,e){var r=Mf.exec(n.slice(e,e+2));return r?(t.m=r[0]-1,e+r[0].length):-1}function Yf(t,n,e){var r=Mf.exec(n.slice(e,e+2));return r?(t.d=+r[0],e+r[0].length):-1}function qf(t,n,e){var r=Mf.exec(n.slice(e,e+3));return r?(t.m=0,t.d=+r[0],e+r[0].length):-1}function zf(t,n,e){var r=Mf.exec(n.slice(e,e+2));return r?(t.H=+r[0],e+r[0].length):-1}function If(t,n,e){var r=Mf.exec(n.slice(e,e+2));return r?(t.M=+r[0],e+r[0].length):-1}function Hf(t,n,e){var r=Mf.exec(n.slice(e,e+2));return r?(t.S=+r[0],e+r[0].length):-1}function $f(t,n,e){var r=Mf.exec(n.slice(e,e+3));return r?(t.L=+r[0],e+r[0].length):-1}function Bf(t,n,e){var r=Mf.exec(n.slice(e,e+6));return r?(t.L=Math.floor(r[0]/1e3),e+r[0].length):-1}function Xf(t,n,e){var r=kf.exec(n.slice(e,e+1));return r?e+r[0].length:-1}function Vf(t,n,e){var r=Mf.exec(n.slice(e));return r?(t.Q=+r[0],e+r[0].length):-1}function Zf(t,n,e){var r=Mf.exec(n.slice(e));return r?(t.Q=1e3*+r[0],e+r[0].length):-1}function Jf(t,n){return Tf(t.getDate(),n,2)}function Wf(t,n){return Tf(t.getHours(),n,2)}function Qf(t,n){return Tf(t.getHours()%12||12,n,2)}function Gf(t,n){return Tf(1+Ia.count(Ka(t),t),n,3)}function Kf(t,n){return Tf(t.getMilliseconds(),n,3)}function to(t,n){return Kf(t,n)+"000"}function no(t,n){return Tf(t.getMonth()+1,n,2)}function eo(t,n){return Tf(t.getMinutes(),n,2)}function ro(t,n){return Tf(t.getSeconds(),n,2)}function io(t){var n=t.getDay();return 0===n?7:n}function ao(t,n){return Tf($a.count(Ka(t),t),n,2)}function fo(t,n){var e=t.getDay();return t=e>=4||0===e?Za(t):Za.ceil(t),Tf(Za.count(Ka(t),t)+(4===Ka(t).getDay()),n,2)}function oo(t){return t.getDay()}function co(t,n){return Tf(Ba.count(Ka(t),t),n,2)}function uo(t,n){return Tf(t.getFullYear()%100,n,2)}function so(t,n){return Tf(t.getFullYear()%1e4,n,4)}function ho(t){var n=t.getTimezoneOffset();return(n>0?"-":(n*=-1,"+"))+Tf(n/60|0,"0",2)+Tf(n%60,"0",2)}function lo(t,n){return Tf(t.getUTCDate(),n,2)}function po(t,n){return Tf(t.getUTCHours(),n,2)}function _o(t,n){return Tf(t.getUTCHours()%12||12,n,2)}function bo(t,n){return Tf(1+rf.count(_f(t),t),n,3)}function yo(t,n){return Tf(t.getUTCMilliseconds(),n,3)}function vo(t,n){return yo(t,n)+"000"}function go(t,n){return Tf(t.getUTCMonth()+1,n,2)}function xo(t,n){return Tf(t.getUTCMinutes(),n,2)}function mo(t,n){return Tf(t.getUTCSeconds(),n,2)}function wo(t){var n=t.getUTCDay();return 0===n?7:n}function Mo(t,n){return Tf(ff.count(_f(t),t),n,2)}function ko(t,n){var e=t.getUTCDay();return t=e>=4||0===e?sf(t):sf.ceil(t),Tf(sf.count(_f(t),t)+(4===_f(t).getUTCDay()),n,2)}function No(t){return t.getUTCDay()}function To(t,n){return Tf(of.count(_f(t),t),n,2)}function Ao(t,n){return Tf(t.getUTCFullYear()%100,n,2)}function Co(t,n){return Tf(t.getUTCFullYear()%1e4,n,4)}function So(){return"+0000"}function Eo(){return"%"}function Uo(t){return+t}function Lo(t){return Math.floor(+t/1e3)}!function(t){gf=function(t){var n=t.dateTime,e=t.date,r=t.time,i=t.periods,a=t.days,f=t.shortDays,o=t.months,c=t.shortMonths,u=Cf(i),s=Sf(i),h=Cf(a),l=Sf(a),d=Cf(f),p=Sf(f),_=Cf(o),b=Sf(o),y=Cf(c),v=Sf(c),g={a:function(t){return f[t.getDay()]},A:function(t){return a[t.getDay()]},b:function(t){return c[t.getMonth()]},B:function(t){return o[t.getMonth()]},c:null,d:Jf,e:Jf,f:to,H:Wf,I:Qf,j:Gf,L:Kf,m:no,M:eo,p:function(t){return i[+(t.getHours()>=12)]},Q:Uo,s:Lo,S:ro,u:io,U:ao,V:fo,w:oo,W:co,x:null,X:null,y:uo,Y:so,Z:ho,"%":Eo},x={a:function(t){return f[t.getUTCDay()]},A:function(t){return a[t.getUTCDay()]},b:function(t){return c[t.getUTCMonth()]},B:function(t){return o[t.getUTCMonth()]},c:null,d:lo,e:lo,f:vo,H:po,I:_o,j:bo,L:yo,m:go,M:xo,p:function(t){return i[+(t.getUTCHours()>=12)]},Q:Uo,s:Lo,S:mo,u:wo,U:Mo,V:ko,w:No,W:To,x:null,X:null,y:Ao,Y:Co,Z:So,"%":Eo},m={a:function(t,n,e){var r=d.exec(n.slice(e));return r?(t.w=p[r[0].toLowerCase()],e+r[0].length):-1},A:function(t,n,e){var r=h.exec(n.slice(e));return r?(t.w=l[r[0].toLowerCase()],e+r[0].length):-1},b:function(t,n,e){var r=y.exec(n.slice(e));return r?(t.m=v[r[0].toLowerCase()],e+r[0].length):-1},B:function(t,n,e){var r=_.exec(n.slice(e));return r?(t.m=b[r[0].toLowerCase()],e+r[0].length):-1},c:function(t,e,r){return k(t,n,e,r)},d:Yf,e:Yf,f:Bf,H:zf,I:zf,j:qf,L:$f,m:Of,M:If,p:function(t,n,e){var r=u.exec(n.slice(e));return r?(t.p=s[r[0].toLowerCase()],e+r[0].length):-1},Q:Vf,s:Zf,S:Hf,u:Uf,U:Lf,V:Pf,w:Ef,W:Df,x:function(t,n,r){return k(t,e,n,r)},X:function(t,n,e){return k(t,r,n,e)},y:Ff,Y:Rf,Z:jf,"%":Xf};function w(t,n){return function(e){var r,i,a,f=[],o=-1,c=0,u=t.length;for(e instanceof Date||(e=new Date(+e));++o<u;)37===t.charCodeAt(o)&&(f.push(t.slice(c,o)),null!=(i=wf[r=t.charAt(++o)])?r=t.charAt(++o):i="e"===r?" ":"0",(a=n[r])&&(r=a(e,i)),f.push(r),c=o+1);return f.push(t.slice(c,o)),f.join("")}}function M(t,n){return function(e){var r,i,a=vf(1900);if(k(a,t,e+="",0)!=e.length)return null;if("Q"in a)return new Date(a.Q);if("p"in a&&(a.H=a.H%12+12*a.p),"V"in a){if(a.V<1||a.V>53)return null;"w"in a||(a.w=1),"Z"in a?(i=(r=yf(vf(a.y))).getUTCDay(),r=i>4||0===i?of.ceil(r):of(r),r=rf.offset(r,7*(a.V-1)),a.y=r.getUTCFullYear(),a.m=r.getUTCMonth(),a.d=r.getUTCDate()+(a.w+6)%7):(i=(r=n(vf(a.y))).getDay(),r=i>4||0===i?Ba.ceil(r):Ba(r),r=Ia.offset(r,7*(a.V-1)),a.y=r.getFullYear(),a.m=r.getMonth(),a.d=r.getDate()+(a.w+6)%7)}else("W"in a||"U"in a)&&("w"in a||(a.w="u"in a?a.u%7:"W"in a?1:0),i="Z"in a?yf(vf(a.y)).getUTCDay():n(vf(a.y)).getDay(),a.m=0,a.d="W"in a?(a.w+6)%7+7*a.W-(i+5)%7:a.w+7*a.U-(i+6)%7);return"Z"in a?(a.H+=a.Z/100|0,a.M+=a.Z%100,yf(a)):n(a)}}function k(t,n,e,r){for(var i,a,f=0,o=n.length,c=e.length;f<o;){if(r>=c)return-1;if(37===(i=n.charCodeAt(f++))){if(i=n.charAt(f++),!(a=m[i in wf?n.charAt(f++):i])||(r=a(t,e,r))<0)return-1}else if(i!=e.charCodeAt(r++))return-1}return r}return g.x=w(e,g),g.X=w(r,g),g.c=w(n,g),x.x=w(e,x),x.X=w(r,x),x.c=w(n,x),{format:function(t){var n=w(t+="",g);return n.toString=function(){return t},n},parse:function(t){var n=M(t+="",bf);return n.toString=function(){return t},n},utcFormat:function(t){var n=w(t+="",x);return n.toString=function(){return t},n},utcParse:function(t){var n=M(t,yf);return n.toString=function(){return t},n}}}(t),gf.format,gf.parse,xf=gf.utcFormat,mf=gf.utcParse}({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});Date.prototype.toISOString||xf("%Y-%m-%dT%H:%M:%S.%LZ");+new Date("2000-01-01T00:00:00.000Z")||mf("%Y-%m-%dT%H:%M:%S.%LZ");var Po=function(t){for(var n=t.length/6|0,e=new Array(n),r=0;r<n;)e[r]="#"+t.slice(6*r,6*++r);return e},Do=(Po("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf"),Po("7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666"),Po("1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666"),Po("a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928"),Po("fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2"),Po("b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc"),Po("e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999"),Po("66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3"),Po("8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f"),function(t){return Fn(t[t.length-1])});Do(new Array(3).concat("d8b365f5f5f55ab4ac","a6611adfc27d80cdc1018571","a6611adfc27df5f5f580cdc1018571","8c510ad8b365f6e8c3c7eae55ab4ac01665e","8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e","8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e","8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e","5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30","5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30").map(Po)),Do(new Array(3).concat("af8dc3f7f7f77fbf7b","7b3294c2a5cfa6dba0008837","7b3294c2a5cff7f7f7a6dba0008837","762a83af8dc3e7d4e8d9f0d37fbf7b1b7837","762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837","762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837","762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837","40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b","40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b").map(Po)),Do(new Array(3).concat("e9a3c9f7f7f7a1d76a","d01c8bf1b6dab8e1864dac26","d01c8bf1b6daf7f7f7b8e1864dac26","c51b7de9a3c9fde0efe6f5d0a1d76a4d9221","c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221","c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221","c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221","8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419","8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419").map(Po)),Do(new Array(3).concat("998ec3f7f7f7f1a340","5e3c99b2abd2fdb863e66101","5e3c99b2abd2f7f7f7fdb863e66101","542788998ec3d8daebfee0b6f1a340b35806","542788998ec3d8daebf7f7f7fee0b6f1a340b35806","5427888073acb2abd2d8daebfee0b6fdb863e08214b35806","5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806","2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08","2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08").map(Po)),Do(new Array(3).concat("ef8a62f7f7f767a9cf","ca0020f4a58292c5de0571b0","ca0020f4a582f7f7f792c5de0571b0","b2182bef8a62fddbc7d1e5f067a9cf2166ac","b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac","b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac","b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac","67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061","67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061").map(Po)),Do(new Array(3).concat("ef8a62ffffff999999","ca0020f4a582bababa404040","ca0020f4a582ffffffbababa404040","b2182bef8a62fddbc7e0e0e09999994d4d4d","b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d","b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d","b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d","67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a","67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a").map(Po)),Do(new Array(3).concat("fc8d59ffffbf91bfdb","d7191cfdae61abd9e92c7bb6","d7191cfdae61ffffbfabd9e92c7bb6","d73027fc8d59fee090e0f3f891bfdb4575b4","d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4","d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4","d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4","a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695","a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695").map(Po)),Do(new Array(3).concat("fc8d59ffffbf91cf60","d7191cfdae61a6d96a1a9641","d7191cfdae61ffffbfa6d96a1a9641","d73027fc8d59fee08bd9ef8b91cf601a9850","d73027fc8d59fee08bffffbfd9ef8b91cf601a9850","d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850","d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850","a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837","a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837").map(Po)),Do(new Array(3).concat("fc8d59ffffbf99d594","d7191cfdae61abdda42b83ba","d7191cfdae61ffffbfabdda42b83ba","d53e4ffc8d59fee08be6f59899d5943288bd","d53e4ffc8d59fee08bffffbfe6f59899d5943288bd","d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd","d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd","9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2","9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2").map(Po)),Do(new Array(3).concat("e5f5f999d8c92ca25f","edf8fbb2e2e266c2a4238b45","edf8fbb2e2e266c2a42ca25f006d2c","edf8fbccece699d8c966c2a42ca25f006d2c","edf8fbccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b").map(Po)),Do(new Array(3).concat("e0ecf49ebcda8856a7","edf8fbb3cde38c96c688419d","edf8fbb3cde38c96c68856a7810f7c","edf8fbbfd3e69ebcda8c96c68856a7810f7c","edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b","f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b","f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b").map(Po)),Do(new Array(3).concat("e0f3dba8ddb543a2ca","f0f9e8bae4bc7bccc42b8cbe","f0f9e8bae4bc7bccc443a2ca0868ac","f0f9e8ccebc5a8ddb57bccc443a2ca0868ac","f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e","f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e","f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081").map(Po)),Do(new Array(3).concat("fee8c8fdbb84e34a33","fef0d9fdcc8afc8d59d7301f","fef0d9fdcc8afc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000").map(Po)),Do(new Array(3).concat("ece2f0a6bddb1c9099","f6eff7bdc9e167a9cf02818a","f6eff7bdc9e167a9cf1c9099016c59","f6eff7d0d1e6a6bddb67a9cf1c9099016c59","f6eff7d0d1e6a6bddb67a9cf3690c002818a016450","fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450","fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636").map(Po)),Do(new Array(3).concat("ece7f2a6bddb2b8cbe","f1eef6bdc9e174a9cf0570b0","f1eef6bdc9e174a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858").map(Po)),Do(new Array(3).concat("e7e1efc994c7dd1c77","f1eef6d7b5d8df65b0ce1256","f1eef6d7b5d8df65b0dd1c77980043","f1eef6d4b9dac994c7df65b0dd1c77980043","f1eef6d4b9dac994c7df65b0e7298ace125691003f","f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f","f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f").map(Po)),Do(new Array(3).concat("fde0ddfa9fb5c51b8a","feebe2fbb4b9f768a1ae017e","feebe2fbb4b9f768a1c51b8a7a0177","feebe2fcc5c0fa9fb5f768a1c51b8a7a0177","feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177","fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177","fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a").map(Po)),Do(new Array(3).concat("edf8b17fcdbb2c7fb8","ffffcca1dab441b6c4225ea8","ffffcca1dab441b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58").map(Po)),Do(new Array(3).concat("f7fcb9addd8e31a354","ffffccc2e69978c679238443","ffffccc2e69978c67931a354006837","ffffccd9f0a3addd8e78c67931a354006837","ffffccd9f0a3addd8e78c67941ab5d238443005a32","ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32","ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529").map(Po)),Do(new Array(3).concat("fff7bcfec44fd95f0e","ffffd4fed98efe9929cc4c02","ffffd4fed98efe9929d95f0e993404","ffffd4fee391fec44ffe9929d95f0e993404","ffffd4fee391fec44ffe9929ec7014cc4c028c2d04","ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04","ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506").map(Po)),Do(new Array(3).concat("ffeda0feb24cf03b20","ffffb2fecc5cfd8d3ce31a1c","ffffb2fecc5cfd8d3cf03b20bd0026","ffffb2fed976feb24cfd8d3cf03b20bd0026","ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026","ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026","ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026").map(Po)),Do(new Array(3).concat("deebf79ecae13182bd","eff3ffbdd7e76baed62171b5","eff3ffbdd7e76baed63182bd08519c","eff3ffc6dbef9ecae16baed63182bd08519c","eff3ffc6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b").map(Po)),Do(new Array(3).concat("e5f5e0a1d99b31a354","edf8e9bae4b374c476238b45","edf8e9bae4b374c47631a354006d2c","edf8e9c7e9c0a1d99b74c47631a354006d2c","edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b").map(Po)),Do(new Array(3).concat("f0f0f0bdbdbd636363","f7f7f7cccccc969696525252","f7f7f7cccccc969696636363252525","f7f7f7d9d9d9bdbdbd969696636363252525","f7f7f7d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000").map(Po)),Do(new Array(3).concat("efedf5bcbddc756bb1","f2f0f7cbc9e29e9ac86a51a3","f2f0f7cbc9e29e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d").map(Po)),Do(new Array(3).concat("fee0d2fc9272de2d26","fee5d9fcae91fb6a4acb181d","fee5d9fcae91fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d").map(Po)),Do(new Array(3).concat("fee6cefdae6be6550d","feeddefdbe85fd8d3cd94701","feeddefdbe85fd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704").map(Po)),ee(Tn(300,.5,0),Tn(-240,.5,1)),ee(Tn(-100,.75,.35),Tn(80,1.5,.8)),ee(Tn(260,.75,.35),Tn(80,1.5,.8)),Tn(),Vt(),Math.PI,Math.PI;function Ro(t){var n=t.length;return function(e){return t[Math.max(0,Math.min(n-1,Math.floor(e*n)))]}}Ro(Po("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725")),Ro(Po("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf")),Ro(Po("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4")),Ro(Po("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921"));var Fo=function(t){return function(){return t}},jo=(Math.abs,Math.atan2,Math.cos,Math.max,Math.min,Math.sin,Math.sqrt,1e-12),Oo=Math.PI,Yo=2*Oo;function qo(t){this._context=t}qo.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;default:this._context.lineTo(t,n)}}};var zo=function(t){return new qo(t)};function Io(t){return t[0]}function Ho(t){return t[1]}var $o=function(){var t=Io,n=Ho,e=Fo(!0),r=null,i=zo,a=null;function f(f){var o,c,u,s=f.length,h=!1;for(null==r&&(a=i(u=tr())),o=0;o<=s;++o)!(o<s&&e(c=f[o],o,f))===h&&((h=!h)?a.lineStart():a.lineEnd()),h&&a.point(+t(c,o,f),+n(c,o,f));if(u)return a=null,u+""||null}return f.x=function(n){return arguments.length?(t="function"==typeof n?n:Fo(+n),f):t},f.y=function(t){return arguments.length?(n="function"==typeof t?t:Fo(+t),f):n},f.defined=function(t){return arguments.length?(e="function"==typeof t?t:Fo(!!t),f):e},f.curve=function(t){return arguments.length?(i=t,null!=r&&(a=i(r)),f):i},f.context=function(t){return arguments.length?(null==t?r=a=null:a=i(r=t),f):r},f};Xo(zo);function Bo(t){this._curve=t}function Xo(t){function n(n){return new Bo(t(n))}return n._curve=t,n}Bo.prototype={areaStart:function(){this._curve.areaStart()},areaEnd:function(){this._curve.areaEnd()},lineStart:function(){this._curve.lineStart()},lineEnd:function(){this._curve.lineEnd()},point:function(t,n){this._curve.point(n*Math.sin(t),n*-Math.cos(t))}};Array.prototype.slice;Math.sqrt(1/3);var Vo=Math.sin(Oo/10)/Math.sin(7*Oo/10),Zo=(Math.sin(Yo/10),Math.cos(Yo/10),Math.sqrt(3),Math.sqrt(3),Math.sqrt(12),function(){});function Jo(t,n,e){t._context.bezierCurveTo((2*t._x0+t._x1)/3,(2*t._y0+t._y1)/3,(t._x0+2*t._x1)/3,(t._y0+2*t._y1)/3,(t._x0+4*t._x1+n)/6,(t._y0+4*t._y1+e)/6)}function Wo(t){this._context=t}Wo.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){switch(this._point){case 3:Jo(this,this._x1,this._y1);case 2:this._context.lineTo(this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;break;case 2:this._point=3,this._context.lineTo((5*this._x0+this._x1)/6,(5*this._y0+this._y1)/6);default:Jo(this,t,n)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n}};function Qo(t){this._context=t}Qo.prototype={areaStart:Zo,areaEnd:Zo,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._y0=this._y1=this._y2=this._y3=this._y4=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x2,this._y2),this._context.closePath();break;case 2:this._context.moveTo((this._x2+2*this._x3)/3,(this._y2+2*this._y3)/3),this._context.lineTo((this._x3+2*this._x2)/3,(this._y3+2*this._y2)/3),this._context.closePath();break;case 3:this.point(this._x2,this._y2),this.point(this._x3,this._y3),this.point(this._x4,this._y4)}},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._x2=t,this._y2=n;break;case 1:this._point=2,this._x3=t,this._y3=n;break;case 2:this._point=3,this._x4=t,this._y4=n,this._context.moveTo((this._x0+4*this._x1+t)/6,(this._y0+4*this._y1+n)/6);break;default:Jo(this,t,n)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n}};function Go(t){this._context=t}Go.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3;var e=(this._x0+4*this._x1+t)/6,r=(this._y0+4*this._y1+n)/6;this._line?this._context.lineTo(e,r):this._context.moveTo(e,r);break;case 3:this._point=4;default:Jo(this,t,n)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n}};function Ko(t,n){this._basis=new Wo(t),this._beta=n}Ko.prototype={lineStart:function(){this._x=[],this._y=[],this._basis.lineStart()},lineEnd:function(){var t=this._x,n=this._y,e=t.length-1;if(e>0)for(var r,i=t[0],a=n[0],f=t[e]-i,o=n[e]-a,c=-1;++c<=e;)r=c/e,this._basis.point(this._beta*t[c]+(1-this._beta)*(i+r*f),this._beta*n[c]+(1-this._beta)*(a+r*o));this._x=this._y=null,this._basis.lineEnd()},point:function(t,n){this._x.push(+t),this._y.push(+n)}};(function t(n){function e(t){return 1===n?new Wo(t):new Ko(t,n)}return e.beta=function(n){return t(+n)},e})(.85);function tc(t,n,e){t._context.bezierCurveTo(t._x1+t._k*(t._x2-t._x0),t._y1+t._k*(t._y2-t._y0),t._x2+t._k*(t._x1-n),t._y2+t._k*(t._y1-e),t._x2,t._y2)}function nc(t,n){this._context=t,this._k=(1-n)/6}nc.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:tc(this,this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2,this._x1=t,this._y1=n;break;case 2:this._point=3;default:tc(this,t,n)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};(function t(n){function e(t){return new nc(t,n)}return e.tension=function(n){return t(+n)},e})(0);function ec(t,n){this._context=t,this._k=(1-n)/6}ec.prototype={areaStart:Zo,areaEnd:Zo,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._x3=t,this._y3=n;break;case 1:this._point=2,this._context.moveTo(this._x4=t,this._y4=n);break;case 2:this._point=3,this._x5=t,this._y5=n;break;default:tc(this,t,n)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};(function t(n){function e(t){return new ec(t,n)}return e.tension=function(n){return t(+n)},e})(0);function rc(t,n){this._context=t,this._k=(1-n)/6}rc.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:tc(this,t,n)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};(function t(n){function e(t){return new rc(t,n)}return e.tension=function(n){return t(+n)},e})(0);function ic(t,n,e){var r=t._x1,i=t._y1,a=t._x2,f=t._y2;if(t._l01_a>jo){var o=2*t._l01_2a+3*t._l01_a*t._l12_a+t._l12_2a,c=3*t._l01_a*(t._l01_a+t._l12_a);r=(r*o-t._x0*t._l12_2a+t._x2*t._l01_2a)/c,i=(i*o-t._y0*t._l12_2a+t._y2*t._l01_2a)/c}if(t._l23_a>jo){var u=2*t._l23_2a+3*t._l23_a*t._l12_a+t._l12_2a,s=3*t._l23_a*(t._l23_a+t._l12_a);a=(a*u+t._x1*t._l23_2a-n*t._l12_2a)/s,f=(f*u+t._y1*t._l23_2a-e*t._l12_2a)/s}t._context.bezierCurveTo(r,i,a,f,t._x2,t._y2)}function ac(t,n){this._context=t,this._alpha=n}ac.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:this.point(this._x2,this._y2)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){if(t=+t,n=+n,this._point){var e=this._x2-t,r=this._y2-n;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(e*e+r*r,this._alpha))}switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;break;case 2:this._point=3;default:ic(this,t,n)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};(function t(n){function e(t){return n?new ac(t,n):new nc(t,0)}return e.alpha=function(n){return t(+n)},e})(.5);function fc(t,n){this._context=t,this._alpha=n}fc.prototype={areaStart:Zo,areaEnd:Zo,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(t,n){if(t=+t,n=+n,this._point){var e=this._x2-t,r=this._y2-n;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(e*e+r*r,this._alpha))}switch(this._point){case 0:this._point=1,this._x3=t,this._y3=n;break;case 1:this._point=2,this._context.moveTo(this._x4=t,this._y4=n);break;case 2:this._point=3,this._x5=t,this._y5=n;break;default:ic(this,t,n)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};(function t(n){function e(t){return n?new fc(t,n):new ec(t,0)}return e.alpha=function(n){return t(+n)},e})(.5);function oc(t,n){this._context=t,this._alpha=n}oc.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){if(t=+t,n=+n,this._point){var e=this._x2-t,r=this._y2-n;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(e*e+r*r,this._alpha))}switch(this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:ic(this,t,n)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};(function t(n){function e(t){return n?new oc(t,n):new rc(t,0)}return e.alpha=function(n){return t(+n)},e})(.5);function cc(t){this._context=t}cc.prototype={areaStart:Zo,areaEnd:Zo,lineStart:function(){this._point=0},lineEnd:function(){this._point&&this._context.closePath()},point:function(t,n){t=+t,n=+n,this._point?this._context.lineTo(t,n):(this._point=1,this._context.moveTo(t,n))}};function uc(t){return t<0?-1:1}function sc(t,n,e){var r=t._x1-t._x0,i=n-t._x1,a=(t._y1-t._y0)/(r||i<0&&-0),f=(e-t._y1)/(i||r<0&&-0),o=(a*i+f*r)/(r+i);return(uc(a)+uc(f))*Math.min(Math.abs(a),Math.abs(f),.5*Math.abs(o))||0}function hc(t,n){var e=t._x1-t._x0;return e?(3*(t._y1-t._y0)/e-n)/2:n}function lc(t,n,e){var r=t._x0,i=t._y0,a=t._x1,f=t._y1,o=(a-r)/3;t._context.bezierCurveTo(r+o,i+o*n,a-o,f-o*e,a,f)}function dc(t){this._context=t}function pc(t){this._context=new _c(t)}function _c(t){this._context=t}function bc(t){this._context=t}function yc(t){var n,e,r=t.length-1,i=new Array(r),a=new Array(r),f=new Array(r);for(i[0]=0,a[0]=2,f[0]=t[0]+2*t[1],n=1;n<r-1;++n)i[n]=1,a[n]=4,f[n]=4*t[n]+2*t[n+1];for(i[r-1]=2,a[r-1]=7,f[r-1]=8*t[r-1]+t[r],n=1;n<r;++n)e=i[n]/a[n-1],a[n]-=e,f[n]-=e*f[n-1];for(i[r-1]=f[r-1]/a[r-1],n=r-2;n>=0;--n)i[n]=(f[n]-i[n+1])/a[n];for(a[r-1]=(t[r]+i[r-1])/2,n=0;n<r-1;++n)a[n]=2*t[n+1]-i[n+1];return[i,a]}dc.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=this._t0=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x1,this._y1);break;case 3:lc(this,this._t0,hc(this,this._t0))}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){var e=NaN;if(n=+n,(t=+t)!==this._x1||n!==this._y1){switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;break;case 2:this._point=3,lc(this,hc(this,e=sc(this,t,n)),e);break;default:lc(this,this._t0,e=sc(this,t,n))}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n,this._t0=e}}},(pc.prototype=Object.create(dc.prototype)).point=function(t,n){dc.prototype.point.call(this,n,t)},_c.prototype={moveTo:function(t,n){this._context.moveTo(n,t)},closePath:function(){this._context.closePath()},lineTo:function(t,n){this._context.lineTo(n,t)},bezierCurveTo:function(t,n,e,r,i,a){this._context.bezierCurveTo(n,t,r,e,a,i)}},bc.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=[],this._y=[]},lineEnd:function(){var t=this._x,n=this._y,e=t.length;if(e)if(this._line?this._context.lineTo(t[0],n[0]):this._context.moveTo(t[0],n[0]),2===e)this._context.lineTo(t[1],n[1]);else for(var r=yc(t),i=yc(n),a=0,f=1;f<e;++a,++f)this._context.bezierCurveTo(r[0][a],i[0][a],r[1][a],i[1][a],t[f],n[f]);(this._line||0!==this._line&&1===e)&&this._context.closePath(),this._line=1-this._line,this._x=this._y=null},point:function(t,n){this._x.push(+t),this._y.push(+n)}};function vc(t,n){this._context=t,this._t=n}vc.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=this._y=NaN,this._point=0},lineEnd:function(){0<this._t&&this._t<1&&2===this._point&&this._context.lineTo(this._x,this._y),(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line>=0&&(this._t=1-this._t,this._line=1-this._line)},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;default:if(this._t<=0)this._context.lineTo(this._x,n),this._context.lineTo(t,n);else{var e=this._x*(1-this._t)+t*this._t;this._context.lineTo(e,this._y),this._context.lineTo(e,n)}}this._x=t,this._y=n}};function gc(){this._=null}function xc(t){t.U=t.C=t.L=t.R=t.P=t.N=null}function mc(t,n){var e=n,r=n.R,i=e.U;i?i.L===e?i.L=r:i.R=r:t._=r,r.U=i,e.U=r,e.R=r.L,e.R&&(e.R.U=e),r.L=e}function wc(t,n){var e=n,r=n.L,i=e.U;i?i.L===e?i.L=r:i.R=r:t._=r,r.U=i,e.U=r,e.L=r.R,e.L&&(e.L.U=e),r.R=e}function Mc(t){for(;t.L;)t=t.L;return t}gc.prototype={constructor:gc,insert:function(t,n){var e,r,i;if(t){if(n.P=t,n.N=t.N,t.N&&(t.N.P=n),t.N=n,t.R){for(t=t.R;t.L;)t=t.L;t.L=n}else t.R=n;e=t}else this._?(t=Mc(this._),n.P=null,n.N=t,t.P=t.L=n,e=t):(n.P=n.N=null,this._=n,e=null);for(n.L=n.R=null,n.U=e,n.C=!0,t=n;e&&e.C;)e===(r=e.U).L?(i=r.R)&&i.C?(e.C=i.C=!1,r.C=!0,t=r):(t===e.R&&(mc(this,e),e=(t=e).U),e.C=!1,r.C=!0,wc(this,r)):(i=r.L)&&i.C?(e.C=i.C=!1,r.C=!0,t=r):(t===e.L&&(wc(this,e),e=(t=e).U),e.C=!1,r.C=!0,mc(this,r)),e=t.U;this._.C=!1},remove:function(t){t.N&&(t.N.P=t.P),t.P&&(t.P.N=t.N),t.N=t.P=null;var n,e,r,i=t.U,a=t.L,f=t.R;if(e=a?f?Mc(f):a:f,i?i.L===t?i.L=e:i.R=e:this._=e,a&&f?(r=e.C,e.C=t.C,e.L=a,a.U=e,e!==f?(i=e.U,e.U=t.U,t=e.R,i.L=t,e.R=f,f.U=e):(e.U=i,i=e,t=e.R)):(r=t.C,t=e),t&&(t.U=i),!r)if(t&&t.C)t.C=!1;else{do{if(t===this._)break;if(t===i.L){if((n=i.R).C&&(n.C=!1,i.C=!0,mc(this,i),n=i.R),n.L&&n.L.C||n.R&&n.R.C){n.R&&n.R.C||(n.L.C=!1,n.C=!0,wc(this,n),n=i.R),n.C=i.C,i.C=n.R.C=!1,mc(this,i),t=this._;break}}else if((n=i.L).C&&(n.C=!1,i.C=!0,wc(this,i),n=i.L),n.L&&n.L.C||n.R&&n.R.C){n.L&&n.L.C||(n.R.C=!1,n.C=!0,mc(this,n),n=i.L),n.C=i.C,i.C=n.L.C=!1,wc(this,i),t=this._;break}n.C=!0,t=i,i=i.U}while(!t.C);t&&(t.C=!1)}}};var kc=gc;function Nc(t,n,e,r){var i=[null,null],a=Jc.push(i)-1;return i.left=t,i.right=n,e&&Ac(i,t,n,e),r&&Ac(i,n,t,r),Vc[t.index].halfedges.push(a),Vc[n.index].halfedges.push(a),i}function Tc(t,n,e){var r=[n,e];return r.left=t,r}function Ac(t,n,e,r){t[0]||t[1]?t.left===e?t[1]=r:t[0]=r:(t[0]=r,t.left=n,t.right=e)}function Cc(t,n,e,r,i){var a,f=t[0],o=t[1],c=f[0],u=f[1],s=0,h=1,l=o[0]-c,d=o[1]-u;if(a=n-c,l||!(a>0)){if(a/=l,l<0){if(a<s)return;a<h&&(h=a)}else if(l>0){if(a>h)return;a>s&&(s=a)}if(a=r-c,l||!(a<0)){if(a/=l,l<0){if(a>h)return;a>s&&(s=a)}else if(l>0){if(a<s)return;a<h&&(h=a)}if(a=e-u,d||!(a>0)){if(a/=d,d<0){if(a<s)return;a<h&&(h=a)}else if(d>0){if(a>h)return;a>s&&(s=a)}if(a=i-u,d||!(a<0)){if(a/=d,d<0){if(a>h)return;a>s&&(s=a)}else if(d>0){if(a<s)return;a<h&&(h=a)}return!(s>0||h<1)||(s>0&&(t[0]=[c+s*l,u+s*d]),h<1&&(t[1]=[c+h*l,u+h*d]),!0)}}}}}function Sc(t,n,e,r,i){var a=t[1];if(a)return!0;var f,o,c=t[0],u=t.left,s=t.right,h=u[0],l=u[1],d=s[0],p=s[1],_=(h+d)/2,b=(l+p)/2;if(p===l){if(_<n||_>=r)return;if(h>d){if(c){if(c[1]>=i)return}else c=[_,e];a=[_,i]}else{if(c){if(c[1]<e)return}else c=[_,i];a=[_,e]}}else if(o=b-(f=(h-d)/(p-l))*_,f<-1||f>1)if(h>d){if(c){if(c[1]>=i)return}else c=[(e-o)/f,e];a=[(i-o)/f,i]}else{if(c){if(c[1]<e)return}else c=[(i-o)/f,i];a=[(e-o)/f,e]}else if(l<p){if(c){if(c[0]>=r)return}else c=[n,f*n+o];a=[r,f*r+o]}else{if(c){if(c[0]<n)return}else c=[r,f*r+o];a=[n,f*n+o]}return t[0]=c,t[1]=a,!0}function Ec(t,n){var e=t.site,r=n.left,i=n.right;return e===i&&(i=r,r=e),i?Math.atan2(i[1]-r[1],i[0]-r[0]):(e===r?(r=n[1],i=n[0]):(r=n[0],i=n[1]),Math.atan2(r[0]-i[0],i[1]-r[1]))}function Uc(t,n){return n[+(n.left!==t.site)]}function Lc(t,n){return n[+(n.left===t.site)]}var Pc,Dc=[];function Rc(){xc(this),this.x=this.y=this.arc=this.site=this.cy=null}function Fc(t){var n=t.P,e=t.N;if(n&&e){var r=n.site,i=t.site,a=e.site;if(r!==a){var f=i[0],o=i[1],c=r[0]-f,u=r[1]-o,s=a[0]-f,h=a[1]-o,l=2*(c*h-u*s);if(!(l>=-Qc)){var d=c*c+u*u,p=s*s+h*h,_=(h*d-u*p)/l,b=(c*p-s*d)/l,y=Dc.pop()||new Rc;y.arc=t,y.site=i,y.x=_+f,y.y=(y.cy=b+o)+Math.sqrt(_*_+b*b),t.circle=y;for(var v=null,g=Zc._;g;)if(y.y<g.y||y.y===g.y&&y.x<=g.x){if(!g.L){v=g.P;break}g=g.L}else{if(!g.R){v=g;break}g=g.R}Zc.insert(v,y),v||(Pc=y)}}}}function jc(t){var n=t.circle;n&&(n.P||(Pc=n.N),Zc.remove(n),Dc.push(n),xc(n),t.circle=null)}var Oc=[];function Yc(){xc(this),this.edge=this.site=this.circle=null}function qc(t){var n=Oc.pop()||new Yc;return n.site=t,n}function zc(t){jc(t),Xc.remove(t),Oc.push(t),xc(t)}function Ic(t){var n=t.circle,e=n.x,r=n.cy,i=[e,r],a=t.P,f=t.N,o=[t];zc(t);for(var c=a;c.circle&&Math.abs(e-c.circle.x)<Wc&&Math.abs(r-c.circle.cy)<Wc;)a=c.P,o.unshift(c),zc(c),c=a;o.unshift(c),jc(c);for(var u=f;u.circle&&Math.abs(e-u.circle.x)<Wc&&Math.abs(r-u.circle.cy)<Wc;)f=u.N,o.push(u),zc(u),u=f;o.push(u),jc(u);var s,h=o.length;for(s=1;s<h;++s)u=o[s],c=o[s-1],Ac(u.edge,c.site,u.site,i);c=o[0],(u=o[h-1]).edge=Nc(c.site,u.site,null,i),Fc(c),Fc(u)}function Hc(t){for(var n,e,r,i,a=t[0],f=t[1],o=Xc._;o;)if((r=$c(o,f)-a)>Wc)o=o.L;else{if(!((i=a-Bc(o,f))>Wc)){r>-Wc?(n=o.P,e=o):i>-Wc?(n=o,e=o.N):n=e=o;break}if(!o.R){n=o;break}o=o.R}!function(t){Vc[t.index]={site:t,halfedges:[]}}(t);var c=qc(t);if(Xc.insert(n,c),n||e){if(n===e)return jc(n),e=qc(n.site),Xc.insert(c,e),c.edge=e.edge=Nc(n.site,c.site),Fc(n),void Fc(e);if(e){jc(n),jc(e);var u=n.site,s=u[0],h=u[1],l=t[0]-s,d=t[1]-h,p=e.site,_=p[0]-s,b=p[1]-h,y=2*(l*b-d*_),v=l*l+d*d,g=_*_+b*b,x=[(b*v-d*g)/y+s,(l*g-_*v)/y+h];Ac(e.edge,u,p,x),c.edge=Nc(u,t,null,x),e.edge=Nc(t,p,null,x),Fc(n),Fc(e)}else c.edge=Nc(n.site,c.site)}}function $c(t,n){var e=t.site,r=e[0],i=e[1],a=i-n;if(!a)return r;var f=t.P;if(!f)return-1/0;var o=(e=f.site)[0],c=e[1],u=c-n;if(!u)return o;var s=o-r,h=1/a-1/u,l=s/u;return h?(-l+Math.sqrt(l*l-2*h*(s*s/(-2*u)-c+u/2+i-a/2)))/h+r:(r+o)/2}function Bc(t,n){var e=t.N;if(e)return $c(e,n);var r=t.site;return r[1]===n?r[0]:1/0}var Xc,Vc,Zc,Jc,Wc=1e-6,Qc=1e-12;function Gc(t,n){return n[1]-t[1]||n[0]-t[0]}function Kc(t,n){var e,r,i,a=t.sort(Gc).pop();for(Jc=[],Vc=new Array(t.length),Xc=new kc,Zc=new kc;;)if(i=Pc,a&&(!i||a[1]<i.y||a[1]===i.y&&a[0]<i.x))a[0]===e&&a[1]===r||(Hc(a),e=a[0],r=a[1]),a=t.pop();else{if(!i)break;Ic(i.arc)}if(function(){for(var t,n,e,r,i=0,a=Vc.length;i<a;++i)if((t=Vc[i])&&(r=(n=t.halfedges).length)){var f=new Array(r),o=new Array(r);for(e=0;e<r;++e)f[e]=e,o[e]=Ec(t,Jc[n[e]]);for(f.sort(function(t,n){return o[n]-o[t]}),e=0;e<r;++e)o[e]=n[f[e]];for(e=0;e<r;++e)n[e]=o[e]}}(),n){var f=+n[0][0],o=+n[0][1],c=+n[1][0],u=+n[1][1];!function(t,n,e,r){for(var i,a=Jc.length;a--;)Sc(i=Jc[a],t,n,e,r)&&Cc(i,t,n,e,r)&&(Math.abs(i[0][0]-i[1][0])>Wc||Math.abs(i[0][1]-i[1][1])>Wc)||delete Jc[a]}(f,o,c,u),function(t,n,e,r){var i,a,f,o,c,u,s,h,l,d,p,_,b=Vc.length,y=!0;for(i=0;i<b;++i)if(a=Vc[i]){for(f=a.site,o=(c=a.halfedges).length;o--;)Jc[c[o]]||c.splice(o,1);for(o=0,u=c.length;o<u;)p=(d=Lc(a,Jc[c[o]]))[0],_=d[1],h=(s=Uc(a,Jc[c[++o%u]]))[0],l=s[1],(Math.abs(p-h)>Wc||Math.abs(_-l)>Wc)&&(c.splice(o,0,Jc.push(Tc(f,d,Math.abs(p-t)<Wc&&r-_>Wc?[t,Math.abs(h-t)<Wc?l:r]:Math.abs(_-r)<Wc&&e-p>Wc?[Math.abs(l-r)<Wc?h:e,r]:Math.abs(p-e)<Wc&&_-n>Wc?[e,Math.abs(h-e)<Wc?l:n]:Math.abs(_-n)<Wc&&p-t>Wc?[Math.abs(l-n)<Wc?h:t,n]:null))-1),++u);u&&(y=!1)}if(y){var v,g,x,m=1/0;for(i=0,y=null;i<b;++i)(a=Vc[i])&&(x=(v=(f=a.site)[0]-t)*v+(g=f[1]-n)*g)<m&&(m=x,y=a);if(y){var w=[t,n],M=[t,r],k=[e,r],N=[e,n];y.halfedges.push(Jc.push(Tc(f=y.site,w,M))-1,Jc.push(Tc(f,M,k))-1,Jc.push(Tc(f,k,N))-1,Jc.push(Tc(f,N,w))-1)}}for(i=0;i<b;++i)(a=Vc[i])&&(a.halfedges.length||delete Vc[i])}(f,o,c,u)}this.edges=Jc,this.cells=Vc,Xc=Zc=Jc=Vc=null}Kc.prototype={constructor:Kc,polygons:function(){var t=this.edges;return this.cells.map(function(n){var e=n.halfedges.map(function(e){return Uc(n,t[e])});return e.data=n.site.data,e})},triangles:function(){var t=[],n=this.edges;return this.cells.forEach(function(e,r){if(a=(i=e.halfedges).length)for(var i,a,f,o,c,u,s=e.site,h=-1,l=n[i[a-1]],d=l.left===s?l.right:l.left;++h<a;)f=d,d=(l=n[i[h]]).left===s?l.right:l.left,f&&d&&r<f.index&&r<d.index&&(c=f,u=d,((o=s)[0]-u[0])*(c[1]-o[1])-(o[0]-c[0])*(u[1]-o[1])<0)&&t.push([s.data,f.data,d.data])}),t},links:function(){return this.edges.filter(function(t){return t.right}).map(function(t){return{source:t.left.data,target:t.right.data}})},find:function(t,n,e){for(var r,i,a=this,f=a._found||0,o=a.cells.length;!(i=a.cells[f]);)if(++f>=o)return null;var c=t-i.site[0],u=n-i.site[1],s=c*c+u*u;do{i=a.cells[r=f],f=null,i.halfedges.forEach(function(e){var r=a.edges[e],o=r.left;if(o!==i.site&&o||(o=r.right)){var c=t-o[0],u=n-o[1],h=c*c+u*u;h<s&&(s=h,f=o.index)}})}while(null!==f);return a._found=r,null==e||s<=e*e?i.site:null}};function tu(t,n,e){this.k=t,this.x=n,this.y=e}tu.prototype={constructor:tu,scale:function(t){return 1===t?this:new tu(this.k*t,this.x,this.y)},translate:function(t,n){return 0===t&0===n?this:new tu(this.k,this.x+this.k*t,this.y+this.k*n)},apply:function(t){return[t[0]*this.k+this.x,t[1]*this.k+this.y]},applyX:function(t){return t*this.k+this.x},applyY:function(t){return t*this.k+this.y},invert:function(t){return[(t[0]-this.x)/this.k,(t[1]-this.y)/this.k]},invertX:function(t){return(t-this.x)/this.k},invertY:function(t){return(t-this.y)/this.k},rescaleX:function(t){return t.copy().domain(t.range().map(this.invertX,this).map(t.invert,t))},rescaleY:function(t){return t.copy().domain(t.range().map(this.invertY,this).map(t.invert,t))},toString:function(){return"translate("+this.x+","+this.y+") scale("+this.k+")"}};new tu(1,0,0);tu.prototype;!function(){var t={top:90,right:120,bottom:30,left:50},n=1200-t.left-t.right,e=700-t.top-t.bottom,r=Ua().range([0,n]),i=Ua().range([e,0]),a=S(m,o).scale(r).tickSize(0).ticks(25),f=["Dec 28, 2014","Jan 4, 2015","Jan 11, 2015","Jan 18, 2015","Jan 25, 2015","Feb 1,2015","Feb 8, 2015","Feb 15, 2015","Feb 22, 2015","Mar 1, 2015","Mar 8, 2015","Mar 15, 2015","Mar 22, 2015","Mar 29, 2015","Apr 5, 2015","Apr 12, 2015","Apr 19, 2015","Apr 26, 2015","May 3, 2015","May 10, 2015","May 17, 2015","May 24, 2015","May 31, 2015","Jun 7, 2015","Jun 14, 2015"];var o;a.tickFormat(function(t,n){return f[n]});var u=function(t){return S(k,t)}().scale(i).tickFormat(function(t){return t}).ticks(16).tickSizeInner(-n).tickPadding(10).tickSizeOuter(0),s=$o().x(function(t){return r(t.week)}).y(function(t){return i(t.rank)}),h=kt("#graphic").append("svg").attr("width",n+t.left+t.right).attr("height",e+t.top+t.bottom).call(function(t){var n=kt(t.node().parentNode),e=parseInt(t.style("width")),r=parseInt(t.style("height")),i=e/r;function a(){var e=parseInt(n.style("width"));t.attr("width",.8*e),t.attr("height",Math.round(e/i*.8))}t.attr("viewBox","0 0 "+e+" "+r).attr("perserveAspectRatio","xMinYMid").call(a),kt(window).on("resize."+n.attr("#graphic"),a)}).append("g").attr("transform","translate("+t.left+","+t.top+")"),l=h.append("clipPath").attr("id","clip").append("rect").attr("x","-5").attr("y","-20").attr("width",0).attr("height",1.2*e);Nr("rankdata.csv",function(t,f){var o=(void 0).category20();o.domain(or(f[0]).filter(function(t){return"week"!==t})),f.forEach(function(t){t.week=+[t.week]});var d=o.domain().map(function(t){return{name:t,values:f.map(function(n){return{name:t,week:n.week,rank:+n[t]}})}});r.domain(c(f,function(t){return t.week})),i.domain([v(d,function(t){return v(t.values,function(t){return t.rank})}),b(d,function(t){return b(t.values,function(t){return t.rank})})].reverse()),h.append("g").attr("class","x axis").attr("transform","translate(0,0)").call(a).selectAll("text").style("text-anchor","start").attr("dx","2.3em").attr("dy","-0.9em").attr("transform",function(t){return"rotate(-60)"}),h.append("g").attr("class","y axis").call(u),h.append("line").attr({class:"horizontalGrid",x1:-2,x2:n,y1:i(1)-13,y2:i(1)-13,fill:"none","shape-rendering":"crispEdges",stroke:"#e0e1e1","stroke-width":"1px","stroke-dasharray":"3, 3"}).attr("id","dotted").attr("clip-path",function(t){return"url(#clip)"});var d=h.selectAll(".candidate").data(d).enter().append("g").attr("class","candidate");function p(t){return"Hillary Clinton"===t.name?"#7183d3":"Bernie Sanders"===t.name?"#7183d3":"Martin O'Malley"===t.name?"#7183d3":"Lincoln Chafee"===t.name?"#7183d3":"Jim Webb"===t.name?"#7183d3":"#ce3b69"}h.selectAll(".candidate").append("path").attr("class","line").attr("d",function(t){return s(t.values)}).attr("clip-path",function(t){return"url(#clip)"}).style("stroke",p),d.append("circle").attr("cx","0").attr("cy",function(t){return i(t.values[0].rank)}).style("fill",p).attr("r",2);var _=d.append("circle").attr("cx",function(t){return r(t.values[0].week)}).attr("cy",function(t){return i(t.values[0].rank)}).style("fill",p).attr("r",2),y=d.append("path").attr("d",Ar.symbol().type("triangle-up")).style("fill","grey").attr("transform",function(t){return"translate("+r(t.values[0].week)+","+(i(1)-15)+") rotate(-30)"}),g=d.append("circle").attr("transform",function(t){return"translate("+(r(t.values[0].week)+15)+","+i(t.values[0].rank)+")"}).attr("x",0).attr("y",0).attr("r",10).on("mouseover",function(t){d.style("opacity",.1),d.filter(function(n){return n.name===t.name}).style("opacity",1)}).on("mouseout",function(t){d.style("opacity",1)}).style("fill",p),x=d.append("text").attr("transform",function(t){return"translate("+(r(t.values[0].week)+15)+","+i(t.values[0].rank)+")"}).attr("x",0).attr("dy",".31em").attr("text-anchor","middle").on("mouseover",function(t){d.style("opacity",.1),d.filter(function(n){return n.name===t.name}).style("opacity",1)}).on("mouseout",function(t){d.style("opacity",1)}).style("cursor","pointer").style("fill","#ffffff").style("font-weight","bold").text(function(t){return t.values[0].rank}),m=d.append("text").attr("transform",function(t){return"translate("+(r(t.values[0].week)+20)+","+i(t.values[0].rank)+")"}).attr("x",8).attr("dy",".31em").attr("id","label").on("mouseover",function(t){d.style("opacity",.1),d.filter(function(n){return n.name===t.name}).style("opacity",1)}).on("mouseout",function(t){d.style("opacity",1)}).style("cursor","pointer").style("stroke",p).text(function(t){return t.name}),w=1,M=Ie().delay(500).duration(500).each("start",function t(){m.transition().duration(500).ease("linear").attr("transform",function(t){return"translate("+(r(t.values[w].week)+20)+","+i(t.values[w].rank)+")"}).text(function(t){return t.name}),x.transition().duration(500).ease("linear").attr("transform",function(t){return"translate("+(r(t.values[w].week)+15)+","+i(t.values[w].rank)+")"}).text(function(t,n){return t.values[w].rank}),g.transition().duration(500).ease("linear").attr("transform",function(t){return"translate("+(r(t.values[w].week)+15)+","+i(t.values[w].rank)+")"}),_.transition().duration(500).ease("linear").attr("cx",function(t){return r(t.values[w].week)}).attr("cy",function(t){return i(t.values[w].rank)}),l.transition().duration(500).ease("linear").attr("width",r(w+1)+5).attr("height",1.2*e),y.transition().duration(500).ease("linear").attr("transform",function(t){return"translate("+r(t.values[w].week)+","+(i(1)-15)+") rotate(-30)"}),(w+=1)!==f[0].length&&(M=M.transition().each("start",t))});$(".candidatename").on("click",function(){var t=$(this).text();d.style("opacity",.1),d.filter(function(n){return n.name===t}).style("opacity",1)})})}(),kt("#replay").on("click",function(){location.reload()})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,