!function(t){var e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(r,i,function(e){return t[e]}.bind(null,i));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=5)}([function(t,e,n){var r=n(1);"string"==typeof r&&(r=[[t.i,r,""]]);var i={hmr:!0,transform:void 0,insertInto:void 0};n(3)(r,i);r.locals&&(t.exports=r.locals)},function(t,e,n){(t.exports=n(2)(!1)).push([t.i,'/*body {*/\r\n/*    font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;*/\r\n/*    width: 960px;*/\r\n/*    height: 500px;*/\r\n/*    position: relative;*/\r\n/*}*/\r\n\r\n/*svg {*/\r\n/*    width: 100%;*/\r\n/*    height: 100%;*/\r\n/*    position: center;*/\r\n/*}*/\r\n\r\n/*.toolTip {*/\r\n/*    font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;*/\r\n/*    position: absolute;*/\r\n/*    display: none;*/\r\n/*    width: auto;*/\r\n/*    height: auto;*/\r\n/*    background: none repeat scroll 0 0 white;*/\r\n/*    border: 0 none;*/\r\n/*    border-radius: 8px 8px 8px 8px;*/\r\n/*    box-shadow: -3px 3px 15px #888888;*/\r\n/*    color: black;*/\r\n/*    font: 12px sans-serif;*/\r\n/*    padding: 5px;*/\r\n/*    text-align: center;*/\r\n/*}*/\r\n\r\n/*text {*/\r\n/*    font: 10px sans-serif;*/\r\n/*    !*color: white;*!*/\r\n/*}*/\r\n/*text.value {*/\r\n/*    font-size: 120%;*/\r\n/*    fill: white;*/\r\n/*}*/\r\n\r\n/*text.value-2 {*/\r\n/*    font-size: 120%;*/\r\n/*    fill: black;*/\r\n/*}*/\r\n\r\n/*.axisHorizontal path{*/\r\n/*    fill: none;*/\r\n/*}*/\r\n\r\n/*.axisHorizontal .tick line {*/\r\n/*    stroke-width: 1;*/\r\n/*    stroke: rgba(0, 0, 0, 0.2);*/\r\n/*}*/\r\n\r\n/*.bar {*/\r\n/*    fill: steelblue;*/\r\n/*    fill-opacity: .9;*/\r\n/*}*/\r\n\r\n/*.axis {*/\r\n/*    font: 10px sans-serif;*/\r\n/*}*/\r\n\r\n/*.axis path,*/\r\n/*.axis line {*/\r\n/*    fill: none;*/\r\n/*    stroke: #000;*/\r\n/*    shape-rendering: crispEdges;*/\r\n/*}*/\r\n\r\n/*.axis--y path {*/\r\n/*    display: none;*/\r\n/*}*/\r\n\r\n/*.bar {*/\r\n/*    fill: #3182bd;*/\r\n/*    fill-opacity: .9;*/\r\n/*}*/\r\n\r\n/*.wld {*/\r\n/*    fill: #9ecae1;*/\r\n/*}*/\r\n\r\n/*.chart-title {*/\r\n/*    margin-bottom: 0;*/\r\n/*}*/\r\n\r\n/*.source {*/\r\n/*    margin-top: 0;*/\r\n/*    font-size: 11px;*/\r\n/*}*/\r\ntext{\r\n    font-size: 16px;\r\n    font-family: Open Sans, sans-serif;\r\n}\r\ntext.title{\r\n    font-size: 24px;\r\n    font-weight: 500;\r\n}\r\ntext.subTitle{\r\n    font-weight: 500;\r\n    fill: #777777;\r\n}\r\ntext.caption{\r\n    font-weight: 400;\r\n    font-size: 14px;\r\n    fill: #777777;\r\n}\r\ntext.label{\r\n    font-weight: 600;\r\n}\r\ntext.yearText{\r\n    font-size: 64px;\r\n    font-weight: 700;\r\n    opacity: 0.25;\r\n}\r\n.tick text {\r\n    fill: #777777;\r\n}\r\n.xAxis .tick:nth-child(2) text {\r\n    text-anchor: start;\r\n}\r\n.tick line {\r\n    shape-rendering: CrispEdges;\r\n    stroke: #dddddd;\r\n}\r\n.tick line.origin{\r\n    stroke: #aaaaaa;\r\n}\r\npath.domain{\r\n    display: none;\r\n}',""])},function(t,e,n){"use strict";t.exports=function(t){var e=[];return e.toString=function(){return this.map(function(e){var n=function(t,e){var n=t[1]||"",r=t[3];if(!r)return n;if(e&&"function"==typeof btoa){var i=(f=r,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(f))))+" */"),a=r.sources.map(function(t){return"/*# sourceURL="+r.sourceRoot+t+" */"});return[n].concat(a).concat([i]).join("\n")}var f;return[n].join("\n")}(e,t);return e[2]?"@media "+e[2]+"{"+n+"}":n}).join("")},e.i=function(t,n){"string"==typeof t&&(t=[[null,t,""]]);for(var r={},i=0;i<this.length;i++){var a=this[i][0];null!=a&&(r[a]=!0)}for(i=0;i<t.length;i++){var f=t[i];null!=f[0]&&r[f[0]]||(n&&!f[2]?f[2]=n:n&&(f[2]="("+f[2]+") and ("+n+")"),e.push(f))}},e}},function(t,e,n){var r,i,a={},f=(r=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===i&&(i=r.apply(this,arguments)),i}),o=function(t){var e={};return function(t,n){if("function"==typeof t)return t();if(void 0===e[t]){var r=function(t,e){return e?e.querySelector(t):document.querySelector(t)}.call(this,t,n);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(t){r=null}e[t]=r}return e[t]}}(),c=null,s=0,u=[],h=n(4);function l(t,e){for(var n=0;n<t.length;n++){var r=t[n],i=a[r.id];if(i){i.refs++;for(var f=0;f<i.parts.length;f++)i.parts[f](r.parts[f]);for(;f<r.parts.length;f++)i.parts.push(v(r.parts[f],e))}else{var o=[];for(f=0;f<r.parts.length;f++)o.push(v(r.parts[f],e));a[r.id]={id:r.id,refs:1,parts:o}}}}function d(t,e){for(var n=[],r={},i=0;i<t.length;i++){var a=t[i],f=e.base?a[0]+e.base:a[0],o={css:a[1],media:a[2],sourceMap:a[3]};r[f]?r[f].parts.push(o):n.push(r[f]={id:f,parts:[o]})}return n}function _(t,e){var n=o(t.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=u[u.length-1];if("top"===t.insertAt)r?r.nextSibling?n.insertBefore(e,r.nextSibling):n.appendChild(e):n.insertBefore(e,n.firstChild),u.push(e);else if("bottom"===t.insertAt)n.appendChild(e);else{if("object"!=typeof t.insertAt||!t.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var i=o(t.insertAt.before,n);n.insertBefore(e,i)}}function p(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t);var e=u.indexOf(t);e>=0&&u.splice(e,1)}function b(t){var e=document.createElement("style");if(void 0===t.attrs.type&&(t.attrs.type="text/css"),void 0===t.attrs.nonce){var r=function(){0;return n.nc}();r&&(t.attrs.nonce=r)}return y(e,t.attrs),_(t,e),e}function y(t,e){Object.keys(e).forEach(function(n){t.setAttribute(n,e[n])})}function v(t,e){var n,r,i,a;if(e.transform&&t.css){if(!(a="function"==typeof e.transform?e.transform(t.css):e.transform.default(t.css)))return function(){};t.css=a}if(e.singleton){var f=s++;n=c||(c=b(e)),r=m.bind(null,n,f,!1),i=m.bind(null,n,f,!0)}else t.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(t){var e=document.createElement("link");return void 0===t.attrs.type&&(t.attrs.type="text/css"),t.attrs.rel="stylesheet",y(e,t.attrs),_(t,e),e}(e),r=function(t,e,n){var r=n.css,i=n.sourceMap,a=void 0===e.convertToAbsoluteUrls&&i;(e.convertToAbsoluteUrls||a)&&(r=h(r));i&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(i))))+" */");var f=new Blob([r],{type:"text/css"}),o=t.href;t.href=URL.createObjectURL(f),o&&URL.revokeObjectURL(o)}.bind(null,n,e),i=function(){p(n),n.href&&URL.revokeObjectURL(n.href)}):(n=b(e),r=function(t,e){var n=e.css,r=e.media;r&&t.setAttribute("media",r);if(t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}.bind(null,n),i=function(){p(n)});return r(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;r(t=e)}else i()}}t.exports=function(t,e){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(e=e||{}).attrs="object"==typeof e.attrs?e.attrs:{},e.singleton||"boolean"==typeof e.singleton||(e.singleton=f()),e.insertInto||(e.insertInto="head"),e.insertAt||(e.insertAt="bottom");var n=d(t,e);return l(n,e),function(t){for(var r=[],i=0;i<n.length;i++){var f=n[i];(o=a[f.id]).refs--,r.push(o)}t&&l(d(t,e),e);for(i=0;i<r.length;i++){var o;if(0===(o=r[i]).refs){for(var c=0;c<o.parts.length;c++)o.parts[c]();delete a[o.id]}}}};var g,x=(g=[],function(t,e){return g[t]=e,g.filter(Boolean).join("\n")});function m(t,e,n,r){var i=n?"":r.css;if(t.styleSheet)t.styleSheet.cssText=x(e,i);else{var a=document.createTextNode(i),f=t.childNodes;f[e]&&t.removeChild(f[e]),f.length?t.insertBefore(a,f[e]):t.appendChild(a)}}},function(t,e){t.exports=function(t){var e="undefined"!=typeof window&&window.location;if(!e)throw new Error("fixUrls requires window.location");if(!t||"string"!=typeof t)return t;var n=e.protocol+"//"+e.host,r=n+e.pathname.replace(/\/[^\/]*$/,"/");return t.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(t,e){var i,a=e.trim().replace(/^"(.*)"$/,function(t,e){return e}).replace(/^'(.*)'$/,function(t,e){return e});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(a)?t:(i=0===a.indexOf("//")?a:0===a.indexOf("/")?n+a:r+a.replace(/^\.\//,""),"url("+JSON.stringify(i)+")")})}},function(t,e,n){"use strict";n.r(e);n(0);var r=function(t,e){return t<e?-1:t>e?1:t>=e?0:NaN},i=function(t){var e;return 1===t.length&&(e=t,t=function(t,n){return r(e(t),n)}),{left:function(e,n,r,i){for(null==r&&(r=0),null==i&&(i=e.length);r<i;){var a=r+i>>>1;t(e[a],n)<0?r=a+1:i=a}return r},right:function(e,n,r,i){for(null==r&&(r=0),null==i&&(i=e.length);r<i;){var a=r+i>>>1;t(e[a],n)>0?i=a:r=a+1}return r}}};var a=i(r),f=a.right,o=(a.left,f);var c=Array.prototype,s=(c.slice,c.map,Math.sqrt(50)),u=Math.sqrt(10),h=Math.sqrt(2),l=function(t,e,n){var r,i,a,f,o=-1;if(n=+n,(t=+t)===(e=+e)&&n>0)return[t];if((r=e<t)&&(i=t,t=e,e=i),0===(f=d(t,e,n))||!isFinite(f))return[];if(f>0)for(t=Math.ceil(t/f),e=Math.floor(e/f),a=new Array(i=Math.ceil(e-t+1));++o<i;)a[o]=(t+o)*f;else for(t=Math.floor(t*f),e=Math.ceil(e*f),a=new Array(i=Math.ceil(t-e+1));++o<i;)a[o]=(t-o)/f;return r&&a.reverse(),a};function d(t,e,n){var r=(e-t)/Math.max(0,n),i=Math.floor(Math.log(r)/Math.LN10),a=r/Math.pow(10,i);return i>=0?(a>=s?10:a>=u?5:a>=h?2:1)*Math.pow(10,i):-Math.pow(10,-i)/(a>=s?10:a>=u?5:a>=h?2:1)}function _(t,e,n){var r=Math.abs(e-t)/Math.max(0,n),i=Math.pow(10,Math.floor(Math.log(r)/Math.LN10)),a=r/i;return a>=s?i*=10:a>=u?i*=5:a>=h&&(i*=2),e<t?-i:i}var p=function(t,e){var n,r,i=t.length,a=-1;if(null==e){for(;++a<i;)if(null!=(n=t[a])&&n>=n)for(r=n;++a<i;)null!=(n=t[a])&&n>r&&(r=n)}else for(;++a<i;)if(null!=(n=e(t[a],a,t))&&n>=n)for(r=n;++a<i;)null!=(n=e(t[a],a,t))&&n>r&&(r=n);return r},b=function(t){for(var e,n,r,i=t.length,a=-1,f=0;++a<i;)f+=t[a].length;for(n=new Array(f);--i>=0;)for(e=(r=t[i]).length;--e>=0;)n[--f]=r[e];return n};var y=Array.prototype.slice,v=function(t){return t},g=1,x=2,m=3,w=4,M=1e-6;function N(t){return"translate("+(t+.5)+",0)"}function k(t){return"translate(0,"+(t+.5)+")"}function T(){return!this.__axis}function A(t,e){var n=[],r=null,i=null,a=6,f=6,o=3,c=t===g||t===w?-1:1,s=t===w||t===x?"x":"y",u=t===g||t===m?N:k;function h(h){var l=null==r?e.ticks?e.ticks.apply(e,n):e.domain():r,d=null==i?e.tickFormat?e.tickFormat.apply(e,n):v:i,_=Math.max(a,0)+o,p=e.range(),b=+p[0]+.5,y=+p[p.length-1]+.5,N=(e.bandwidth?function(t){var e=Math.max(0,t.bandwidth()-1)/2;return t.round()&&(e=Math.round(e)),function(n){return+t(n)+e}}:function(t){return function(e){return+t(e)}})(e.copy()),k=h.selection?h.selection():h,A=k.selectAll(".domain").data([null]),C=k.selectAll(".tick").data(l,e).order(),S=C.exit(),E=C.enter().append("g").attr("class","tick"),U=C.select("line"),L=C.select("text");A=A.merge(A.enter().insert("path",".tick").attr("class","domain").attr("stroke","currentColor")),C=C.merge(E),U=U.merge(E.append("line").attr("stroke","currentColor").attr(s+"2",c*a)),L=L.merge(E.append("text").attr("fill","currentColor").attr(s,c*_).attr("dy",t===g?"0em":t===m?"0.71em":"0.32em")),h!==k&&(A=A.transition(h),C=C.transition(h),U=U.transition(h),L=L.transition(h),S=S.transition(h).attr("opacity",M).attr("transform",function(t){return isFinite(t=N(t))?u(t):this.getAttribute("transform")}),E.attr("opacity",M).attr("transform",function(t){var e=this.parentNode.__axis;return u(e&&isFinite(e=e(t))?e:N(t))})),S.remove(),A.attr("d",t===w||t==x?f?"M"+c*f+","+b+"H0.5V"+y+"H"+c*f:"M0.5,"+b+"V"+y:f?"M"+b+","+c*f+"V0.5H"+y+"V"+c*f:"M"+b+",0.5H"+y),C.attr("opacity",1).attr("transform",function(t){return u(N(t))}),U.attr(s+"2",c*a),L.attr(s,c*_).text(d),k.filter(T).attr("fill","none").attr("font-size",10).attr("font-family","sans-serif").attr("text-anchor",t===x?"start":t===w?"end":"middle"),k.each(function(){this.__axis=N})}return h.scale=function(t){return arguments.length?(e=t,h):e},h.ticks=function(){return n=y.call(arguments),h},h.tickArguments=function(t){return arguments.length?(n=null==t?[]:y.call(t),h):n.slice()},h.tickValues=function(t){return arguments.length?(r=null==t?null:y.call(t),h):r&&r.slice()},h.tickFormat=function(t){return arguments.length?(i=t,h):i},h.tickSize=function(t){return arguments.length?(a=f=+t,h):a},h.tickSizeInner=function(t){return arguments.length?(a=+t,h):a},h.tickSizeOuter=function(t){return arguments.length?(f=+t,h):f},h.tickPadding=function(t){return arguments.length?(o=+t,h):o},h}var C={value:function(){}};function S(){for(var t,e=0,n=arguments.length,r={};e<n;++e){if(!(t=arguments[e]+"")||t in r)throw new Error("illegal type: "+t);r[t]=[]}return new E(r)}function E(t){this._=t}function U(t,e){for(var n,r=0,i=t.length;r<i;++r)if((n=t[r]).name===e)return n.value}function L(t,e,n){for(var r=0,i=t.length;r<i;++r)if(t[r].name===e){t[r]=C,t=t.slice(0,r).concat(t.slice(r+1));break}return null!=n&&t.push({name:e,value:n}),t}E.prototype=S.prototype={constructor:E,on:function(t,e){var n,r,i=this._,a=(r=i,(t+"").trim().split(/^|\s+/).map(function(t){var e="",n=t.indexOf(".");if(n>=0&&(e=t.slice(n+1),t=t.slice(0,n)),t&&!r.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:e}})),f=-1,o=a.length;if(!(arguments.length<2)){if(null!=e&&"function"!=typeof e)throw new Error("invalid callback: "+e);for(;++f<o;)if(n=(t=a[f]).type)i[n]=L(i[n],t.name,e);else if(null==e)for(n in i)i[n]=L(i[n],t.name,null);return this}for(;++f<o;)if((n=(t=a[f]).type)&&(n=U(i[n],t.name)))return n},copy:function(){var t={},e=this._;for(var n in e)t[n]=e[n].slice();return new E(t)},call:function(t,e){if((n=arguments.length-2)>0)for(var n,r,i=new Array(n),a=0;a<n;++a)i[a]=arguments[a+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(a=0,n=(r=this._[t]).length;a<n;++a)r[a].value.apply(e,i)},apply:function(t,e,n){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var r=this._[t],i=0,a=r.length;i<a;++i)r[i].value.apply(e,n)}};var P=S,D="http://www.w3.org/1999/xhtml",R={svg:"http://www.w3.org/2000/svg",xhtml:D,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"},j=function(t){var e=t+="",n=e.indexOf(":");return n>=0&&"xmlns"!==(e=t.slice(0,n))&&(t=t.slice(n+1)),R.hasOwnProperty(e)?{space:R[e],local:t}:t};var F=function(t){var e=j(t);return(e.local?function(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}:function(t){return function(){var e=this.ownerDocument,n=this.namespaceURI;return n===D&&e.documentElement.namespaceURI===D?e.createElement(t):e.createElementNS(n,t)}})(e)};function O(){}var Y=function(t){return null==t?O:function(){return this.querySelector(t)}};function z(){return[]}var H=function(t){return null==t?z:function(){return this.querySelectorAll(t)}},q=function(t){return function(){return this.matches(t)}},I=function(t){return new Array(t.length)};function $(t,e){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=e}$.prototype={constructor:$,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,e){return this._parent.insertBefore(t,e)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};var B="$";function V(t,e,n,r,i,a){for(var f,o=0,c=e.length,s=a.length;o<s;++o)(f=e[o])?(f.__data__=a[o],r[o]=f):n[o]=new $(t,a[o]);for(;o<c;++o)(f=e[o])&&(i[o]=f)}function X(t,e,n,r,i,a,f){var o,c,s,u={},h=e.length,l=a.length,d=new Array(h);for(o=0;o<h;++o)(c=e[o])&&(d[o]=s=B+f.call(c,c.__data__,o,e),s in u?i[o]=c:u[s]=c);for(o=0;o<l;++o)(c=u[s=B+f.call(t,a[o],o,a)])?(r[o]=c,c.__data__=a[o],u[s]=null):n[o]=new $(t,a[o]);for(o=0;o<h;++o)(c=e[o])&&u[d[o]]===c&&(i[o]=c)}function Z(t,e){return t<e?-1:t>e?1:t>=e?0:NaN}var J=function(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView};function W(t,e){return t.style.getPropertyValue(e)||J(t).getComputedStyle(t,null).getPropertyValue(e)}function Q(t){return t.trim().split(/^|\s+/)}function G(t){return t.classList||new K(t)}function K(t){this._node=t,this._names=Q(t.getAttribute("class")||"")}function tt(t,e){for(var n=G(t),r=-1,i=e.length;++r<i;)n.add(e[r])}function et(t,e){for(var n=G(t),r=-1,i=e.length;++r<i;)n.remove(e[r])}K.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var e=this._names.indexOf(t);e>=0&&(this._names.splice(e,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};function nt(){this.textContent=""}function rt(){this.innerHTML=""}function it(){this.nextSibling&&this.parentNode.appendChild(this)}function at(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function ft(){return null}function ot(){var t=this.parentNode;t&&t.removeChild(this)}function ct(){return this.parentNode.insertBefore(this.cloneNode(!1),this.nextSibling)}function st(){return this.parentNode.insertBefore(this.cloneNode(!0),this.nextSibling)}var ut={},ht=null;"undefined"!=typeof document&&("onmouseenter"in document.documentElement||(ut={mouseenter:"mouseover",mouseleave:"mouseout"}));function lt(t,e,n){return t=dt(t,e,n),function(e){var n=e.relatedTarget;n&&(n===this||8&n.compareDocumentPosition(this))||t.call(this,e)}}function dt(t,e,n){return function(r){var i=ht;ht=r;try{t.call(this,this.__data__,e,n)}finally{ht=i}}}function _t(t){return function(){var e=this.__on;if(e){for(var n,r=0,i=-1,a=e.length;r<a;++r)n=e[r],t.type&&n.type!==t.type||n.name!==t.name?e[++i]=n:this.removeEventListener(n.type,n.listener,n.capture);++i?e.length=i:delete this.__on}}}function pt(t,e,n){var r=ut.hasOwnProperty(t.type)?lt:dt;return function(i,a,f){var o,c=this.__on,s=r(e,a,f);if(c)for(var u=0,h=c.length;u<h;++u)if((o=c[u]).type===t.type&&o.name===t.name)return this.removeEventListener(o.type,o.listener,o.capture),this.addEventListener(o.type,o.listener=s,o.capture=n),void(o.value=e);this.addEventListener(t.type,s,n),o={type:t.type,name:t.name,value:e,listener:s,capture:n},c?c.push(o):this.__on=[o]}}function bt(t,e,n){var r=J(t),i=r.CustomEvent;"function"==typeof i?i=new i(e,n):(i=r.document.createEvent("Event"),n?(i.initEvent(e,n.bubbles,n.cancelable),i.detail=n.detail):i.initEvent(e,!1,!1)),t.dispatchEvent(i)}var yt=[null];function vt(t,e){this._groups=t,this._parents=e}function gt(){return new vt([[document.documentElement]],yt)}vt.prototype=gt.prototype={constructor:vt,select:function(t){"function"!=typeof t&&(t=Y(t));for(var e=this._groups,n=e.length,r=new Array(n),i=0;i<n;++i)for(var a,f,o=e[i],c=o.length,s=r[i]=new Array(c),u=0;u<c;++u)(a=o[u])&&(f=t.call(a,a.__data__,u,o))&&("__data__"in a&&(f.__data__=a.__data__),s[u]=f);return new vt(r,this._parents)},selectAll:function(t){"function"!=typeof t&&(t=H(t));for(var e=this._groups,n=e.length,r=[],i=[],a=0;a<n;++a)for(var f,o=e[a],c=o.length,s=0;s<c;++s)(f=o[s])&&(r.push(t.call(f,f.__data__,s,o)),i.push(f));return new vt(r,i)},filter:function(t){"function"!=typeof t&&(t=q(t));for(var e=this._groups,n=e.length,r=new Array(n),i=0;i<n;++i)for(var a,f=e[i],o=f.length,c=r[i]=[],s=0;s<o;++s)(a=f[s])&&t.call(a,a.__data__,s,f)&&c.push(a);return new vt(r,this._parents)},data:function(t,e){if(!t)return _=new Array(this.size()),u=-1,this.each(function(t){_[++u]=t}),_;var n,r=e?X:V,i=this._parents,a=this._groups;"function"!=typeof t&&(n=t,t=function(){return n});for(var f=a.length,o=new Array(f),c=new Array(f),s=new Array(f),u=0;u<f;++u){var h=i[u],l=a[u],d=l.length,_=t.call(h,h&&h.__data__,u,i),p=_.length,b=c[u]=new Array(p),y=o[u]=new Array(p);r(h,l,b,y,s[u]=new Array(d),_,e);for(var v,g,x=0,m=0;x<p;++x)if(v=b[x]){for(x>=m&&(m=x+1);!(g=y[m])&&++m<p;);v._next=g||null}}return(o=new vt(o,i))._enter=c,o._exit=s,o},enter:function(){return new vt(this._enter||this._groups.map(I),this._parents)},exit:function(){return new vt(this._exit||this._groups.map(I),this._parents)},join:function(t,e,n){var r=this.enter(),i=this,a=this.exit();return r="function"==typeof t?t(r):r.append(t+""),null!=e&&(i=e(i)),null==n?a.remove():n(a),r&&i?r.merge(i).order():i},merge:function(t){for(var e=this._groups,n=t._groups,r=e.length,i=n.length,a=Math.min(r,i),f=new Array(r),o=0;o<a;++o)for(var c,s=e[o],u=n[o],h=s.length,l=f[o]=new Array(h),d=0;d<h;++d)(c=s[d]||u[d])&&(l[d]=c);for(;o<r;++o)f[o]=e[o];return new vt(f,this._parents)},order:function(){for(var t=this._groups,e=-1,n=t.length;++e<n;)for(var r,i=t[e],a=i.length-1,f=i[a];--a>=0;)(r=i[a])&&(f&&4^r.compareDocumentPosition(f)&&f.parentNode.insertBefore(r,f),f=r);return this},sort:function(t){function e(e,n){return e&&n?t(e.__data__,n.__data__):!e-!n}t||(t=Z);for(var n=this._groups,r=n.length,i=new Array(r),a=0;a<r;++a){for(var f,o=n[a],c=o.length,s=i[a]=new Array(c),u=0;u<c;++u)(f=o[u])&&(s[u]=f);s.sort(e)}return new vt(i,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){var t=new Array(this.size()),e=-1;return this.each(function(){t[++e]=this}),t},node:function(){for(var t=this._groups,e=0,n=t.length;e<n;++e)for(var r=t[e],i=0,a=r.length;i<a;++i){var f=r[i];if(f)return f}return null},size:function(){var t=0;return this.each(function(){++t}),t},empty:function(){return!this.node()},each:function(t){for(var e=this._groups,n=0,r=e.length;n<r;++n)for(var i,a=e[n],f=0,o=a.length;f<o;++f)(i=a[f])&&t.call(i,i.__data__,f,a);return this},attr:function(t,e){var n=j(t);if(arguments.length<2){var r=this.node();return n.local?r.getAttributeNS(n.space,n.local):r.getAttribute(n)}return this.each((null==e?n.local?function(t){return function(){this.removeAttributeNS(t.space,t.local)}}:function(t){return function(){this.removeAttribute(t)}}:"function"==typeof e?n.local?function(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,n)}}:function(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttribute(t):this.setAttribute(t,n)}}:n.local?function(t,e){return function(){this.setAttributeNS(t.space,t.local,e)}}:function(t,e){return function(){this.setAttribute(t,e)}})(n,e))},style:function(t,e,n){return arguments.length>1?this.each((null==e?function(t){return function(){this.style.removeProperty(t)}}:"function"==typeof e?function(t,e,n){return function(){var r=e.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,n)}}:function(t,e,n){return function(){this.style.setProperty(t,e,n)}})(t,e,null==n?"":n)):W(this.node(),t)},property:function(t,e){return arguments.length>1?this.each((null==e?function(t){return function(){delete this[t]}}:"function"==typeof e?function(t,e){return function(){var n=e.apply(this,arguments);null==n?delete this[t]:this[t]=n}}:function(t,e){return function(){this[t]=e}})(t,e)):this.node()[t]},classed:function(t,e){var n=Q(t+"");if(arguments.length<2){for(var r=G(this.node()),i=-1,a=n.length;++i<a;)if(!r.contains(n[i]))return!1;return!0}return this.each(("function"==typeof e?function(t,e){return function(){(e.apply(this,arguments)?tt:et)(this,t)}}:e?function(t){return function(){tt(this,t)}}:function(t){return function(){et(this,t)}})(n,e))},text:function(t){return arguments.length?this.each(null==t?nt:("function"==typeof t?function(t){return function(){var e=t.apply(this,arguments);this.textContent=null==e?"":e}}:function(t){return function(){this.textContent=t}})(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?rt:("function"==typeof t?function(t){return function(){var e=t.apply(this,arguments);this.innerHTML=null==e?"":e}}:function(t){return function(){this.innerHTML=t}})(t)):this.node().innerHTML},raise:function(){return this.each(it)},lower:function(){return this.each(at)},append:function(t){var e="function"==typeof t?t:F(t);return this.select(function(){return this.appendChild(e.apply(this,arguments))})},insert:function(t,e){var n="function"==typeof t?t:F(t),r=null==e?ft:"function"==typeof e?e:Y(e);return this.select(function(){return this.insertBefore(n.apply(this,arguments),r.apply(this,arguments)||null)})},remove:function(){return this.each(ot)},clone:function(t){return this.select(t?st:ct)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,e,n){var r,i,a=function(t){return t.trim().split(/^|\s+/).map(function(t){var e="",n=t.indexOf(".");return n>=0&&(e=t.slice(n+1),t=t.slice(0,n)),{type:t,name:e}})}(t+""),f=a.length;if(!(arguments.length<2)){for(o=e?pt:_t,null==n&&(n=!1),r=0;r<f;++r)this.each(o(a[r],e,n));return this}var o=this.node().__on;if(o)for(var c,s=0,u=o.length;s<u;++s)for(r=0,c=o[s];r<f;++r)if((i=a[r]).type===c.type&&i.name===c.name)return c.value},dispatch:function(t,e){return this.each(("function"==typeof e?function(t,e){return function(){return bt(this,t,e.apply(this,arguments))}}:function(t,e){return function(){return bt(this,t,e)}})(t,e))}};var xt=gt,mt=function(t){return"string"==typeof t?new vt([[document.querySelector(t)]],[document.documentElement]):new vt([[t]],yt)},wt=0;function Mt(){this._="@"+(++wt).toString(36)}Mt.prototype=function(){return new Mt}.prototype={constructor:Mt,get:function(t){for(var e=this._;!(e in t);)if(!(t=t.parentNode))return;return t[e]},set:function(t,e){return t[this._]=e},remove:function(t){return this._ in t&&delete t[this._]},toString:function(){return this._}};function Nt(t,e,n,r,i,a,f,o,c,s){this.target=t,this.type=e,this.subject=n,this.identifier=r,this.active=i,this.x=a,this.y=f,this.dx=o,this.dy=c,this._=s}Nt.prototype.on=function(){var t=this._.on.apply(this._,arguments);return t===this._?this:t};var kt=function(t,e,n){t.prototype=e.prototype=n,n.constructor=t};function Tt(t,e){var n=Object.create(t.prototype);for(var r in e)n[r]=e[r];return n}function At(){}var Ct="\\s*([+-]?\\d+)\\s*",St="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",Et="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",Ut=/^#([0-9a-f]{3})$/,Lt=/^#([0-9a-f]{6})$/,Pt=new RegExp("^rgb\\("+[Ct,Ct,Ct]+"\\)$"),Dt=new RegExp("^rgb\\("+[Et,Et,Et]+"\\)$"),Rt=new RegExp("^rgba\\("+[Ct,Ct,Ct,St]+"\\)$"),jt=new RegExp("^rgba\\("+[Et,Et,Et,St]+"\\)$"),Ft=new RegExp("^hsl\\("+[St,Et,Et]+"\\)$"),Ot=new RegExp("^hsla\\("+[St,Et,Et,St]+"\\)$"),Yt={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function zt(t){var e;return t=(t+"").trim().toLowerCase(),(e=Ut.exec(t))?new Bt((e=parseInt(e[1],16))>>8&15|e>>4&240,e>>4&15|240&e,(15&e)<<4|15&e,1):(e=Lt.exec(t))?Ht(parseInt(e[1],16)):(e=Pt.exec(t))?new Bt(e[1],e[2],e[3],1):(e=Dt.exec(t))?new Bt(255*e[1]/100,255*e[2]/100,255*e[3]/100,1):(e=Rt.exec(t))?qt(e[1],e[2],e[3],e[4]):(e=jt.exec(t))?qt(255*e[1]/100,255*e[2]/100,255*e[3]/100,e[4]):(e=Ft.exec(t))?Xt(e[1],e[2]/100,e[3]/100,1):(e=Ot.exec(t))?Xt(e[1],e[2]/100,e[3]/100,e[4]):Yt.hasOwnProperty(t)?Ht(Yt[t]):"transparent"===t?new Bt(NaN,NaN,NaN,0):null}function Ht(t){return new Bt(t>>16&255,t>>8&255,255&t,1)}function qt(t,e,n,r){return r<=0&&(t=e=n=NaN),new Bt(t,e,n,r)}function It(t){return t instanceof At||(t=zt(t)),t?new Bt((t=t.rgb()).r,t.g,t.b,t.opacity):new Bt}function $t(t,e,n,r){return 1===arguments.length?It(t):new Bt(t,e,n,null==r?1:r)}function Bt(t,e,n,r){this.r=+t,this.g=+e,this.b=+n,this.opacity=+r}function Vt(t){return((t=Math.max(0,Math.min(255,Math.round(t)||0)))<16?"0":"")+t.toString(16)}function Xt(t,e,n,r){return r<=0?t=e=n=NaN:n<=0||n>=1?t=e=NaN:e<=0&&(t=NaN),new Jt(t,e,n,r)}function Zt(t,e,n,r){return 1===arguments.length?function(t){if(t instanceof Jt)return new Jt(t.h,t.s,t.l,t.opacity);if(t instanceof At||(t=zt(t)),!t)return new Jt;if(t instanceof Jt)return t;var e=(t=t.rgb()).r/255,n=t.g/255,r=t.b/255,i=Math.min(e,n,r),a=Math.max(e,n,r),f=NaN,o=a-i,c=(a+i)/2;return o?(f=e===a?(n-r)/o+6*(n<r):n===a?(r-e)/o+2:(e-n)/o+4,o/=c<.5?a+i:2-a-i,f*=60):o=c>0&&c<1?0:f,new Jt(f,o,c,t.opacity)}(t):new Jt(t,e,n,null==r?1:r)}function Jt(t,e,n,r){this.h=+t,this.s=+e,this.l=+n,this.opacity=+r}function Wt(t,e,n){return 255*(t<60?e+(n-e)*t/60:t<180?n:t<240?e+(n-e)*(240-t)/60:e)}kt(At,zt,{displayable:function(){return this.rgb().displayable()},hex:function(){return this.rgb().hex()},toString:function(){return this.rgb()+""}}),kt(Bt,$t,Tt(At,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new Bt(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new Bt(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return 0<=this.r&&this.r<=255&&0<=this.g&&this.g<=255&&0<=this.b&&this.b<=255&&0<=this.opacity&&this.opacity<=1},hex:function(){return"#"+Vt(this.r)+Vt(this.g)+Vt(this.b)},toString:function(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}})),kt(Jt,Zt,Tt(At,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new Jt(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new Jt(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),e=isNaN(t)||isNaN(this.s)?0:this.s,n=this.l,r=n+(n<.5?n:1-n)*e,i=2*n-r;return new Bt(Wt(t>=240?t-240:t+120,i,r),Wt(t,i,r),Wt(t<120?t+240:t-120,i,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1}}));var Qt=Math.PI/180,Gt=180/Math.PI,Kt=.96422,te=1,ee=.82521,ne=4/29,re=6/29,ie=3*re*re,ae=re*re*re;function fe(t){if(t instanceof ce)return new ce(t.l,t.a,t.b,t.opacity);if(t instanceof pe){if(isNaN(t.h))return new ce(t.l,0,0,t.opacity);var e=t.h*Qt;return new ce(t.l,Math.cos(e)*t.c,Math.sin(e)*t.c,t.opacity)}t instanceof Bt||(t=It(t));var n,r,i=le(t.r),a=le(t.g),f=le(t.b),o=se((.2225045*i+.7168786*a+.0606169*f)/te);return i===a&&a===f?n=r=o:(n=se((.4360747*i+.3850649*a+.1430804*f)/Kt),r=se((.0139322*i+.0971045*a+.7141733*f)/ee)),new ce(116*o-16,500*(n-o),200*(o-r),t.opacity)}function oe(t,e,n,r){return 1===arguments.length?fe(t):new ce(t,e,n,null==r?1:r)}function ce(t,e,n,r){this.l=+t,this.a=+e,this.b=+n,this.opacity=+r}function se(t){return t>ae?Math.pow(t,1/3):t/ie+ne}function ue(t){return t>re?t*t*t:ie*(t-ne)}function he(t){return 255*(t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055)}function le(t){return(t/=255)<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4)}function de(t){if(t instanceof pe)return new pe(t.h,t.c,t.l,t.opacity);if(t instanceof ce||(t=fe(t)),0===t.a&&0===t.b)return new pe(NaN,0,t.l,t.opacity);var e=Math.atan2(t.b,t.a)*Gt;return new pe(e<0?e+360:e,Math.sqrt(t.a*t.a+t.b*t.b),t.l,t.opacity)}function _e(t,e,n,r){return 1===arguments.length?de(t):new pe(t,e,n,null==r?1:r)}function pe(t,e,n,r){this.h=+t,this.c=+e,this.l=+n,this.opacity=+r}kt(ce,oe,Tt(At,{brighter:function(t){return new ce(this.l+18*(null==t?1:t),this.a,this.b,this.opacity)},darker:function(t){return new ce(this.l-18*(null==t?1:t),this.a,this.b,this.opacity)},rgb:function(){var t=(this.l+16)/116,e=isNaN(this.a)?t:t+this.a/500,n=isNaN(this.b)?t:t-this.b/200;return new Bt(he(3.1338561*(e=Kt*ue(e))-1.6168667*(t=te*ue(t))-.4906146*(n=ee*ue(n))),he(-.9787684*e+1.9161415*t+.033454*n),he(.0719453*e-.2289914*t+1.4052427*n),this.opacity)}})),kt(pe,_e,Tt(At,{brighter:function(t){return new pe(this.h,this.c,this.l+18*(null==t?1:t),this.opacity)},darker:function(t){return new pe(this.h,this.c,this.l-18*(null==t?1:t),this.opacity)},rgb:function(){return fe(this).rgb()}}));var be=-.29227,ye=-.90649,ve=1.97294,ge=ve*ye,xe=1.78277*ve,me=1.78277*be- -.14861*ye;function we(t,e,n,r){return 1===arguments.length?function(t){if(t instanceof Me)return new Me(t.h,t.s,t.l,t.opacity);t instanceof Bt||(t=It(t));var e=t.r/255,n=t.g/255,r=t.b/255,i=(me*r+ge*e-xe*n)/(me+ge-xe),a=r-i,f=(ve*(n-i)-be*a)/ye,o=Math.sqrt(f*f+a*a)/(ve*i*(1-i)),c=o?Math.atan2(f,a)*Gt-120:NaN;return new Me(c<0?c+360:c,o,i,t.opacity)}(t):new Me(t,e,n,null==r?1:r)}function Me(t,e,n,r){this.h=+t,this.s=+e,this.l=+n,this.opacity=+r}function Ne(t,e,n,r,i){var a=t*t,f=a*t;return((1-3*t+3*a-f)*e+(4-6*a+3*f)*n+(1+3*t+3*a-3*f)*r+f*i)/6}kt(Me,we,Tt(At,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new Me(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new Me(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=isNaN(this.h)?0:(this.h+120)*Qt,e=+this.l,n=isNaN(this.s)?0:this.s*e*(1-e),r=Math.cos(t),i=Math.sin(t);return new Bt(255*(e+n*(-.14861*r+1.78277*i)),255*(e+n*(be*r+ye*i)),255*(e+n*(ve*r)),this.opacity)}}));var ke=function(t){return function(){return t}};function Te(t,e){return function(n){return t+n*e}}function Ae(t,e){var n=e-t;return n?Te(t,n>180||n<-180?n-360*Math.round(n/360):n):ke(isNaN(t)?e:t)}function Ce(t){return 1==(t=+t)?Se:function(e,n){return n-e?function(t,e,n){return t=Math.pow(t,n),e=Math.pow(e,n)-t,n=1/n,function(r){return Math.pow(t+r*e,n)}}(e,n,t):ke(isNaN(e)?n:e)}}function Se(t,e){var n=e-t;return n?Te(t,n):ke(isNaN(t)?e:t)}var Ee=function t(e){var n=Ce(e);function r(t,e){var r=n((t=$t(t)).r,(e=$t(e)).r),i=n(t.g,e.g),a=n(t.b,e.b),f=Se(t.opacity,e.opacity);return function(e){return t.r=r(e),t.g=i(e),t.b=a(e),t.opacity=f(e),t+""}}return r.gamma=t,r}(1);function Ue(t){return function(e){var n,r,i=e.length,a=new Array(i),f=new Array(i),o=new Array(i);for(n=0;n<i;++n)r=$t(e[n]),a[n]=r.r||0,f[n]=r.g||0,o[n]=r.b||0;return a=t(a),f=t(f),o=t(o),r.opacity=1,function(t){return r.r=a(t),r.g=f(t),r.b=o(t),r+""}}}var Le=Ue(function(t){var e=t.length-1;return function(n){var r=n<=0?n=0:n>=1?(n=1,e-1):Math.floor(n*e),i=t[r],a=t[r+1],f=r>0?t[r-1]:2*i-a,o=r<e-1?t[r+2]:2*a-i;return Ne((n-r/e)*e,f,i,a,o)}}),Pe=(Ue(function(t){var e=t.length;return function(n){var r=Math.floor(((n%=1)<0?++n:n)*e),i=t[(r+e-1)%e],a=t[r%e],f=t[(r+1)%e],o=t[(r+2)%e];return Ne((n-r/e)*e,i,a,f,o)}}),function(t,e){return e-=t=+t,function(n){return t+e*n}}),De=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,Re=new RegExp(De.source,"g");var je,Fe,Oe,Ye,ze=function(t,e){var n,r,i,a=De.lastIndex=Re.lastIndex=0,f=-1,o=[],c=[];for(t+="",e+="";(n=De.exec(t))&&(r=Re.exec(e));)(i=r.index)>a&&(i=e.slice(a,i),o[f]?o[f]+=i:o[++f]=i),(n=n[0])===(r=r[0])?o[f]?o[f]+=r:o[++f]=r:(o[++f]=null,c.push({i:f,x:Pe(n,r)})),a=Re.lastIndex;return a<e.length&&(i=e.slice(a),o[f]?o[f]+=i:o[++f]=i),o.length<2?c[0]?function(t){return function(e){return t(e)+""}}(c[0].x):function(t){return function(){return t}}(e):(e=c.length,function(t){for(var n,r=0;r<e;++r)o[(n=c[r]).i]=n.x(t);return o.join("")})},He=function(t,e){var n,r=typeof e;return null==e||"boolean"===r?ke(e):("number"===r?Pe:"string"===r?(n=zt(e))?(e=n,Ee):ze:e instanceof zt?Ee:e instanceof Date?function(t,e){var n=new Date;return e-=t=+t,function(r){return n.setTime(t+e*r),n}}:Array.isArray(e)?function(t,e){var n,r=e?e.length:0,i=t?Math.min(r,t.length):0,a=new Array(i),f=new Array(r);for(n=0;n<i;++n)a[n]=He(t[n],e[n]);for(;n<r;++n)f[n]=e[n];return function(t){for(n=0;n<i;++n)f[n]=a[n](t);return f}}:"function"!=typeof e.valueOf&&"function"!=typeof e.toString||isNaN(e)?function(t,e){var n,r={},i={};for(n in null!==t&&"object"==typeof t||(t={}),null!==e&&"object"==typeof e||(e={}),e)n in t?r[n]=He(t[n],e[n]):i[n]=e[n];return function(t){for(n in r)i[n]=r[n](t);return i}}:Pe)(t,e)},qe=function(t,e){return e-=t=+t,function(n){return Math.round(t+e*n)}},Ie=180/Math.PI,$e={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1},Be=function(t,e,n,r,i,a){var f,o,c;return(f=Math.sqrt(t*t+e*e))&&(t/=f,e/=f),(c=t*n+e*r)&&(n-=t*c,r-=e*c),(o=Math.sqrt(n*n+r*r))&&(n/=o,r/=o,c/=o),t*r<e*n&&(t=-t,e=-e,c=-c,f=-f),{translateX:i,translateY:a,rotate:Math.atan2(e,t)*Ie,skewX:Math.atan(c)*Ie,scaleX:f,scaleY:o}};function Ve(t,e,n,r){function i(t){return t.length?t.pop()+" ":""}return function(a,f){var o=[],c=[];return a=t(a),f=t(f),function(t,r,i,a,f,o){if(t!==i||r!==a){var c=f.push("translate(",null,e,null,n);o.push({i:c-4,x:Pe(t,i)},{i:c-2,x:Pe(r,a)})}else(i||a)&&f.push("translate("+i+e+a+n)}(a.translateX,a.translateY,f.translateX,f.translateY,o,c),function(t,e,n,a){t!==e?(t-e>180?e+=360:e-t>180&&(t+=360),a.push({i:n.push(i(n)+"rotate(",null,r)-2,x:Pe(t,e)})):e&&n.push(i(n)+"rotate("+e+r)}(a.rotate,f.rotate,o,c),function(t,e,n,a){t!==e?a.push({i:n.push(i(n)+"skewX(",null,r)-2,x:Pe(t,e)}):e&&n.push(i(n)+"skewX("+e+r)}(a.skewX,f.skewX,o,c),function(t,e,n,r,a,f){if(t!==n||e!==r){var o=a.push(i(a)+"scale(",null,",",null,")");f.push({i:o-4,x:Pe(t,n)},{i:o-2,x:Pe(e,r)})}else 1===n&&1===r||a.push(i(a)+"scale("+n+","+r+")")}(a.scaleX,a.scaleY,f.scaleX,f.scaleY,o,c),a=f=null,function(t){for(var e,n=-1,r=c.length;++n<r;)o[(e=c[n]).i]=e.x(t);return o.join("")}}}var Xe=Ve(function(t){return"none"===t?$e:(je||(je=document.createElement("DIV"),Fe=document.documentElement,Oe=document.defaultView),je.style.transform=t,t=Oe.getComputedStyle(Fe.appendChild(je),null).getPropertyValue("transform"),Fe.removeChild(je),t=t.slice(7,-1).split(","),Be(+t[0],+t[1],+t[2],+t[3],+t[4],+t[5]))},"px, ","px)","deg)"),Ze=Ve(function(t){return null==t?$e:(Ye||(Ye=document.createElementNS("http://www.w3.org/2000/svg","g")),Ye.setAttribute("transform",t),(t=Ye.transform.baseVal.consolidate())?(t=t.matrix,Be(t.a,t.b,t.c,t.d,t.e,t.f)):$e)},", ",")",")");Math.SQRT2;function Je(t){return function(e,n){var r=t((e=Zt(e)).h,(n=Zt(n)).h),i=Se(e.s,n.s),a=Se(e.l,n.l),f=Se(e.opacity,n.opacity);return function(t){return e.h=r(t),e.s=i(t),e.l=a(t),e.opacity=f(t),e+""}}}Je(Ae),Je(Se);function We(t){return function(e,n){var r=t((e=_e(e)).h,(n=_e(n)).h),i=Se(e.c,n.c),a=Se(e.l,n.l),f=Se(e.opacity,n.opacity);return function(t){return e.h=r(t),e.c=i(t),e.l=a(t),e.opacity=f(t),e+""}}}We(Ae),We(Se);function Qe(t){return function e(n){function r(e,r){var i=t((e=we(e)).h,(r=we(r)).h),a=Se(e.s,r.s),f=Se(e.l,r.l),o=Se(e.opacity,r.opacity);return function(t){return e.h=i(t),e.s=a(t),e.l=f(Math.pow(t,n)),e.opacity=o(t),e+""}}return n=+n,r.gamma=e,r}(1)}Qe(Ae);var Ge=Qe(Se);var Ke,tn,en=0,nn=0,rn=0,an=1e3,fn=0,on=0,cn=0,sn="object"==typeof performance&&performance.now?performance:Date,un="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function hn(){return on||(un(ln),on=sn.now()+cn)}function ln(){on=0}function dn(){this._call=this._time=this._next=null}function _n(t,e,n){var r=new dn;return r.restart(t,e,n),r}function pn(){on=(fn=sn.now())+cn,en=nn=0;try{!function(){hn(),++en;for(var t,e=Ke;e;)(t=on-e._time)>=0&&e._call.call(null,t),e=e._next;--en}()}finally{en=0,function(){var t,e,n=Ke,r=1/0;for(;n;)n._call?(r>n._time&&(r=n._time),t=n,n=n._next):(e=n._next,n._next=null,n=t?t._next=e:Ke=e);tn=t,yn(r)}(),on=0}}function bn(){var t=sn.now(),e=t-fn;e>an&&(cn-=e,fn=t)}function yn(t){en||(nn&&(nn=clearTimeout(nn)),t-on>24?(t<1/0&&(nn=setTimeout(pn,t-sn.now()-cn)),rn&&(rn=clearInterval(rn))):(rn||(fn=sn.now(),rn=setInterval(bn,an)),en=1,un(pn)))}dn.prototype=_n.prototype={constructor:dn,restart:function(t,e,n){if("function"!=typeof t)throw new TypeError("callback is not a function");n=(null==n?hn():+n)+(null==e?0:+e),this._next||tn===this||(tn?tn._next=this:Ke=this,tn=this),this._call=t,this._time=n,yn()},stop:function(){this._call&&(this._call=null,this._time=1/0,yn())}};var vn=function(t,e,n){var r=new dn;return e=null==e?0:+e,r.restart(function(n){r.stop(),t(n+e)},e,n),r},gn=P("start","end","cancel","interrupt"),xn=[],mn=0,wn=1,Mn=2,Nn=3,kn=4,Tn=5,An=6,Cn=function(t,e,n,r,i,a){var f=t.__transition;if(f){if(n in f)return}else t.__transition={};!function(t,e,n){var r,i=t.__transition;function a(c){var s,u,h,l;if(n.state!==wn)return o();for(s in i)if((l=i[s]).name===n.name){if(l.state===Nn)return vn(a);l.state===kn?(l.state=An,l.timer.stop(),l.on.call("interrupt",t,t.__data__,l.index,l.group),delete i[s]):+s<e&&(l.state=An,l.timer.stop(),l.on.call("cancel",t,t.__data__,l.index,l.group),delete i[s])}if(vn(function(){n.state===Nn&&(n.state=kn,n.timer.restart(f,n.delay,n.time),f(c))}),n.state=Mn,n.on.call("start",t,t.__data__,n.index,n.group),n.state===Mn){for(n.state=Nn,r=new Array(h=n.tween.length),s=0,u=-1;s<h;++s)(l=n.tween[s].value.call(t,t.__data__,n.index,n.group))&&(r[++u]=l);r.length=u+1}}function f(e){for(var i=e<n.duration?n.ease.call(null,e/n.duration):(n.timer.restart(o),n.state=Tn,1),a=-1,f=r.length;++a<f;)r[a].call(t,i);n.state===Tn&&(n.on.call("end",t,t.__data__,n.index,n.group),o())}function o(){for(var r in n.state=An,n.timer.stop(),delete i[e],i)return;delete t.__transition}i[e]=n,n.timer=_n(function(t){n.state=wn,n.timer.restart(a,n.delay,n.time),n.delay<=t&&a(t-n.delay)},0,n.time)}(t,n,{name:e,index:r,group:i,on:gn,tween:xn,time:a.time,delay:a.delay,duration:a.duration,ease:a.ease,timer:null,state:mn})};function Sn(t,e){var n=Un(t,e);if(n.state>mn)throw new Error("too late; already scheduled");return n}function En(t,e){var n=Un(t,e);if(n.state>Nn)throw new Error("too late; already running");return n}function Un(t,e){var n=t.__transition;if(!n||!(n=n[e]))throw new Error("transition not found");return n}var Ln=function(t,e){var n,r,i,a=t.__transition,f=!0;if(a){for(i in e=null==e?null:e+"",a)(n=a[i]).name===e?(r=n.state>Mn&&n.state<Tn,n.state=An,n.timer.stop(),n.on.call(r?"interrupt":"cancel",t,t.__data__,n.index,n.group),delete a[i]):f=!1;f&&delete t.__transition}};function Pn(t,e,n){var r=t._id;return t.each(function(){var t=En(this,r);(t.value||(t.value={}))[e]=n.apply(this,arguments)}),function(t){return Un(t,r).value[e]}}var Dn=function(t,e){var n;return("number"==typeof e?Pe:e instanceof zt?Ee:(n=zt(e))?(e=n,Ee):ze)(t,e)};var Rn=xt.prototype.constructor;function jn(t){return function(){this.style.removeProperty(t)}}var Fn=0;function On(t,e,n,r){this._groups=t,this._parents=e,this._name=n,this._id=r}function Yn(){return++Fn}var zn=xt.prototype;function Hn(t){return+t}On.prototype=function(t){return xt().transition(t)}.prototype={constructor:On,select:function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=Y(t));for(var r=this._groups,i=r.length,a=new Array(i),f=0;f<i;++f)for(var o,c,s=r[f],u=s.length,h=a[f]=new Array(u),l=0;l<u;++l)(o=s[l])&&(c=t.call(o,o.__data__,l,s))&&("__data__"in o&&(c.__data__=o.__data__),h[l]=c,Cn(h[l],e,n,l,h,Un(o,n)));return new On(a,this._parents,e,n)},selectAll:function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=H(t));for(var r=this._groups,i=r.length,a=[],f=[],o=0;o<i;++o)for(var c,s=r[o],u=s.length,h=0;h<u;++h)if(c=s[h]){for(var l,d=t.call(c,c.__data__,h,s),_=Un(c,n),p=0,b=d.length;p<b;++p)(l=d[p])&&Cn(l,e,n,p,d,_);a.push(d),f.push(c)}return new On(a,f,e,n)},filter:function(t){"function"!=typeof t&&(t=q(t));for(var e=this._groups,n=e.length,r=new Array(n),i=0;i<n;++i)for(var a,f=e[i],o=f.length,c=r[i]=[],s=0;s<o;++s)(a=f[s])&&t.call(a,a.__data__,s,f)&&c.push(a);return new On(r,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var e=this._groups,n=t._groups,r=e.length,i=n.length,a=Math.min(r,i),f=new Array(r),o=0;o<a;++o)for(var c,s=e[o],u=n[o],h=s.length,l=f[o]=new Array(h),d=0;d<h;++d)(c=s[d]||u[d])&&(l[d]=c);for(;o<r;++o)f[o]=e[o];return new On(f,this._parents,this._name,this._id)},selection:function(){return new Rn(this._groups,this._parents)},transition:function(){for(var t=this._name,e=this._id,n=Yn(),r=this._groups,i=r.length,a=0;a<i;++a)for(var f,o=r[a],c=o.length,s=0;s<c;++s)if(f=o[s]){var u=Un(f,e);Cn(f,t,n,s,o,{time:u.time+u.delay+u.duration,delay:0,duration:u.duration,ease:u.ease})}return new On(r,this._parents,t,n)},call:zn.call,nodes:zn.nodes,node:zn.node,size:zn.size,empty:zn.empty,each:zn.each,on:function(t,e){var n=this._id;return arguments.length<2?Un(this.node(),n).on.on(t):this.each(function(t,e,n){var r,i,a=function(t){return(t+"").trim().split(/^|\s+/).every(function(t){var e=t.indexOf(".");return e>=0&&(t=t.slice(0,e)),!t||"start"===t})}(e)?Sn:En;return function(){var f=a(this,t),o=f.on;o!==r&&(i=(r=o).copy()).on(e,n),f.on=i}}(n,t,e))},attr:function(t,e){var n=j(t),r="transform"===n?Ze:Dn;return this.attrTween(t,"function"==typeof e?(n.local?function(t,e,n){var r,i,a;return function(){var f,o,c=n(this);if(null!=c)return(f=this.getAttributeNS(t.space,t.local))===(o=c+"")?null:f===r&&o===i?a:(i=o,a=e(r=f,c));this.removeAttributeNS(t.space,t.local)}}:function(t,e,n){var r,i,a;return function(){var f,o,c=n(this);if(null!=c)return(f=this.getAttribute(t))===(o=c+"")?null:f===r&&o===i?a:(i=o,a=e(r=f,c));this.removeAttribute(t)}})(n,r,Pn(this,"attr."+t,e)):null==e?(n.local?function(t){return function(){this.removeAttributeNS(t.space,t.local)}}:function(t){return function(){this.removeAttribute(t)}})(n):(n.local?function(t,e,n){var r,i,a=n+"";return function(){var f=this.getAttributeNS(t.space,t.local);return f===a?null:f===r?i:i=e(r=f,n)}}:function(t,e,n){var r,i,a=n+"";return function(){var f=this.getAttribute(t);return f===a?null:f===r?i:i=e(r=f,n)}})(n,r,e))},attrTween:function(t,e){var n="attr."+t;if(arguments.length<2)return(n=this.tween(n))&&n._value;if(null==e)return this.tween(n,null);if("function"!=typeof e)throw new Error;var r=j(t);return this.tween(n,(r.local?function(t,e){var n,r;function i(){var i=e.apply(this,arguments);return i!==r&&(n=(r=i)&&function(t,e){return function(n){this.setAttributeNS(t.space,t.local,e(n))}}(t,i)),n}return i._value=e,i}:function(t,e){var n,r;function i(){var i=e.apply(this,arguments);return i!==r&&(n=(r=i)&&function(t,e){return function(n){this.setAttribute(t,e(n))}}(t,i)),n}return i._value=e,i})(r,e))},style:function(t,e,n){var r="transform"==(t+="")?Xe:Dn;return null==e?this.styleTween(t,function(t,e){var n,r,i;return function(){var a=W(this,t),f=(this.style.removeProperty(t),W(this,t));return a===f?null:a===n&&f===r?i:i=e(n=a,r=f)}}(t,r)).on("end.style."+t,jn(t)):"function"==typeof e?this.styleTween(t,function(t,e,n){var r,i,a;return function(){var f=W(this,t),o=n(this),c=o+"";return null==o&&(this.style.removeProperty(t),c=o=W(this,t)),f===c?null:f===r&&c===i?a:(i=c,a=e(r=f,o))}}(t,r,Pn(this,"style."+t,e))).each(function(t,e){var n,r,i,a,f="style."+e,o="end."+f;return function(){var c=En(this,t),s=c.on,u=null==c.value[f]?a||(a=jn(e)):void 0;s===n&&i===u||(r=(n=s).copy()).on(o,i=u),c.on=r}}(this._id,t)):this.styleTween(t,function(t,e,n){var r,i,a=n+"";return function(){var f=W(this,t);return f===a?null:f===r?i:i=e(r=f,n)}}(t,r,e),n).on("end.style."+t,null)},styleTween:function(t,e,n){var r="style."+(t+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==e)return this.tween(r,null);if("function"!=typeof e)throw new Error;return this.tween(r,function(t,e,n){var r,i;function a(){var a=e.apply(this,arguments);return a!==i&&(r=(i=a)&&function(t,e,n){return function(r){this.style.setProperty(t,e(r),n)}}(t,a,n)),r}return a._value=e,a}(t,e,null==n?"":n))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var e=t(this);this.textContent=null==e?"":e}}(Pn(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},remove:function(){return this.on("end.remove",(t=this._id,function(){var e=this.parentNode;for(var n in this.__transition)if(+n!==t)return;e&&e.removeChild(this)}));var t},tween:function(t,e){var n=this._id;if(t+="",arguments.length<2){for(var r,i=Un(this.node(),n).tween,a=0,f=i.length;a<f;++a)if((r=i[a]).name===t)return r.value;return null}return this.each((null==e?function(t,e){var n,r;return function(){var i=En(this,t),a=i.tween;if(a!==n)for(var f=0,o=(r=n=a).length;f<o;++f)if(r[f].name===e){(r=r.slice()).splice(f,1);break}i.tween=r}}:function(t,e,n){var r,i;if("function"!=typeof n)throw new Error;return function(){var a=En(this,t),f=a.tween;if(f!==r){i=(r=f).slice();for(var o={name:e,value:n},c=0,s=i.length;c<s;++c)if(i[c].name===e){i[c]=o;break}c===s&&i.push(o)}a.tween=i}})(n,t,e))},delay:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?function(t,e){return function(){Sn(this,t).delay=+e.apply(this,arguments)}}:function(t,e){return e=+e,function(){Sn(this,t).delay=e}})(e,t)):Un(this.node(),e).delay},duration:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?function(t,e){return function(){En(this,t).duration=+e.apply(this,arguments)}}:function(t,e){return e=+e,function(){En(this,t).duration=e}})(e,t)):Un(this.node(),e).duration},ease:function(t){var e=this._id;return arguments.length?this.each(function(t,e){if("function"!=typeof e)throw new Error;return function(){En(this,t).ease=e}}(e,t)):Un(this.node(),e).ease},end:function(){var t,e,n=this,r=n._id,i=n.size();return new Promise(function(a,f){var o={value:f},c={value:function(){0==--i&&a()}};n.each(function(){var n=En(this,r),i=n.on;i!==t&&((e=(t=i).copy())._.cancel.push(o),e._.interrupt.push(o),e._.end.push(c)),n.on=e})})}};(function t(e){function n(t){return Math.pow(t,e)}return e=+e,n.exponent=t,n})(3),function t(e){function n(t){return 1-Math.pow(1-t,e)}return e=+e,n.exponent=t,n}(3),function t(e){function n(t){return((t*=2)<=1?Math.pow(t,e):2-Math.pow(2-t,e))/2}return e=+e,n.exponent=t,n}(3),Math.PI;(function t(e){function n(t){return t*t*((e+1)*t-e)}return e=+e,n.overshoot=t,n})(1.70158),function t(e){function n(t){return--t*t*((e+1)*t+e)+1}return e=+e,n.overshoot=t,n}(1.70158),function t(e){function n(t){return((t*=2)<1?t*t*((e+1)*t-e):(t-=2)*t*((e+1)*t+e)+2)/2}return e=+e,n.overshoot=t,n}(1.70158);var qn=2*Math.PI,In=(function t(e,n){var r=Math.asin(1/(e=Math.max(1,e)))*(n/=qn);function i(t){return e*Math.pow(2,10*--t)*Math.sin((r-t)/n)}return i.amplitude=function(e){return t(e,n*qn)},i.period=function(n){return t(e,n)},i}(1,.3),function t(e,n){var r=Math.asin(1/(e=Math.max(1,e)))*(n/=qn);function i(t){return 1-e*Math.pow(2,-10*(t=+t))*Math.sin((t+r)/n)}return i.amplitude=function(e){return t(e,n*qn)},i.period=function(n){return t(e,n)},i}(1,.3),function t(e,n){var r=Math.asin(1/(e=Math.max(1,e)))*(n/=qn);function i(t){return((t=2*t-1)<0?e*Math.pow(2,10*t)*Math.sin((r-t)/n):2-e*Math.pow(2,-10*t)*Math.sin((r+t)/n))/2}return i.amplitude=function(e){return t(e,n*qn)},i.period=function(n){return t(e,n)},i}(1,.3),{time:null,delay:0,duration:250,ease:function(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}});function $n(t,e){for(var n;!(n=t.__transition)||!(n=n[e]);)if(!(t=t.parentNode))return In.time=hn(),In;return n}xt.prototype.interrupt=function(t){return this.each(function(){Ln(this,t)})},xt.prototype.transition=function(t){var e,n;t instanceof On?(e=t._id,t=t._name):(e=Yn(),(n=In).time=hn(),t=null==t?null:t+"");for(var r=this._groups,i=r.length,a=0;a<i;++a)for(var f,o=r[a],c=o.length,s=0;s<c;++s)(f=o[s])&&Cn(f,t,e,s,o,n||$n(f,e));return new On(r,this._parents,t,e)};["e","w"].map(Bn),["n","s"].map(Bn),["n","e","s","w","nw","ne","se","sw"].map(Bn);function Bn(t){return{type:t}}Math.cos,Math.sin,Math.PI,Math.max;Array.prototype.slice;var Vn=Math.PI,Xn=2*Vn,Zn=Xn-1e-6;function Jn(){this._x0=this._y0=this._x1=this._y1=null,this._=""}function Wn(){return new Jn}Jn.prototype=Wn.prototype={constructor:Jn,moveTo:function(t,e){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+e)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")},lineTo:function(t,e){this._+="L"+(this._x1=+t)+","+(this._y1=+e)},quadraticCurveTo:function(t,e,n,r){this._+="Q"+ +t+","+ +e+","+(this._x1=+n)+","+(this._y1=+r)},bezierCurveTo:function(t,e,n,r,i,a){this._+="C"+ +t+","+ +e+","+ +n+","+ +r+","+(this._x1=+i)+","+(this._y1=+a)},arcTo:function(t,e,n,r,i){t=+t,e=+e,n=+n,r=+r,i=+i;var a=this._x1,f=this._y1,o=n-t,c=r-e,s=a-t,u=f-e,h=s*s+u*u;if(i<0)throw new Error("negative radius: "+i);if(null===this._x1)this._+="M"+(this._x1=t)+","+(this._y1=e);else if(h>1e-6)if(Math.abs(u*o-c*s)>1e-6&&i){var l=n-a,d=r-f,_=o*o+c*c,p=l*l+d*d,b=Math.sqrt(_),y=Math.sqrt(h),v=i*Math.tan((Vn-Math.acos((_+h-p)/(2*b*y)))/2),g=v/y,x=v/b;Math.abs(g-1)>1e-6&&(this._+="L"+(t+g*s)+","+(e+g*u)),this._+="A"+i+","+i+",0,0,"+ +(u*l>s*d)+","+(this._x1=t+x*o)+","+(this._y1=e+x*c)}else this._+="L"+(this._x1=t)+","+(this._y1=e);else;},arc:function(t,e,n,r,i,a){t=+t,e=+e;var f=(n=+n)*Math.cos(r),o=n*Math.sin(r),c=t+f,s=e+o,u=1^a,h=a?r-i:i-r;if(n<0)throw new Error("negative radius: "+n);null===this._x1?this._+="M"+c+","+s:(Math.abs(this._x1-c)>1e-6||Math.abs(this._y1-s)>1e-6)&&(this._+="L"+c+","+s),n&&(h<0&&(h=h%Xn+Xn),h>Zn?this._+="A"+n+","+n+",0,1,"+u+","+(t-f)+","+(e-o)+"A"+n+","+n+",0,1,"+u+","+(this._x1=c)+","+(this._y1=s):h>1e-6&&(this._+="A"+n+","+n+",0,"+ +(h>=Vn)+","+u+","+(this._x1=t+n*Math.cos(i))+","+(this._y1=e+n*Math.sin(i))))},rect:function(t,e,n,r){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+e)+"h"+ +n+"v"+ +r+"h"+-n+"Z"},toString:function(){return this._}};function Qn(){}function Gn(t,e){var n=new Qn;if(t instanceof Qn)t.each(function(t,e){n.set(e,t)});else if(Array.isArray(t)){var r,i=-1,a=t.length;if(null==e)for(;++i<a;)n.set(i,t[i]);else for(;++i<a;)n.set(e(r=t[i],i,t),r)}else if(t)for(var f in t)n.set(f,t[f]);return n}Qn.prototype=Gn.prototype={constructor:Qn,has:function(t){return"$"+t in this},get:function(t){return this["$"+t]},set:function(t,e){return this["$"+t]=e,this},remove:function(t){var e="$"+t;return e in this&&delete this[e]},clear:function(){for(var t in this)"$"===t[0]&&delete this[t]},keys:function(){var t=[];for(var e in this)"$"===e[0]&&t.push(e.slice(1));return t},values:function(){var t=[];for(var e in this)"$"===e[0]&&t.push(this[e]);return t},entries:function(){var t=[];for(var e in this)"$"===e[0]&&t.push({key:e.slice(1),value:this[e]});return t},size:function(){var t=0;for(var e in this)"$"===e[0]&&++t;return t},empty:function(){for(var t in this)if("$"===t[0])return!1;return!0},each:function(t){for(var e in this)"$"===e[0]&&t(this[e],e.slice(1),this)}};var Kn=Gn;function tr(){}var er=Kn.prototype;function nr(t,e){var n=new tr;if(t instanceof tr)t.each(function(t){n.add(t)});else if(t){var r=-1,i=t.length;if(null==e)for(;++r<i;)n.add(t[r]);else for(;++r<i;)n.add(e(t[r],r,t))}return n}tr.prototype=nr.prototype={constructor:tr,has:er.has,add:function(t){return this["$"+(t+="")]=t,this},remove:er.remove,clear:er.clear,values:er.keys,size:er.size,empty:er.empty,each:er.each};Array.prototype.slice;var rr={},ir={},ar=34,fr=10,or=13;function cr(t){return new Function("d","return {"+t.map(function(t,e){return JSON.stringify(t)+": d["+e+"]"}).join(",")+"}")}function sr(t){var e=Object.create(null),n=[];return t.forEach(function(t){for(var r in t)r in e||n.push(e[r]=r)}),n}function ur(t,e){var n=t+"",r=n.length;return r<e?new Array(e-r+1).join(0)+n:n}function hr(t){var e,n=t.getUTCHours(),r=t.getUTCMinutes(),i=t.getUTCSeconds(),a=t.getUTCMilliseconds();return isNaN(t)?"Invalid Date":((e=t.getUTCFullYear())<0?"-"+ur(-e,6):e>9999?"+"+ur(e,6):ur(e,4))+"-"+ur(t.getUTCMonth()+1,2)+"-"+ur(t.getUTCDate(),2)+(a?"T"+ur(n,2)+":"+ur(r,2)+":"+ur(i,2)+"."+ur(a,3)+"Z":i?"T"+ur(n,2)+":"+ur(r,2)+":"+ur(i,2)+"Z":r||n?"T"+ur(n,2)+":"+ur(r,2)+"Z":"")}var lr=function(t){var e=new RegExp('["'+t+"\n\r]"),n=t.charCodeAt(0);function r(t,e){var r,i=[],a=t.length,f=0,o=0,c=a<=0,s=!1;function u(){if(c)return ir;if(s)return s=!1,rr;var e,r,i=f;if(t.charCodeAt(i)===ar){for(;f++<a&&t.charCodeAt(f)!==ar||t.charCodeAt(++f)===ar;);return(e=f)>=a?c=!0:(r=t.charCodeAt(f++))===fr?s=!0:r===or&&(s=!0,t.charCodeAt(f)===fr&&++f),t.slice(i+1,e-1).replace(/""/g,'"')}for(;f<a;){if((r=t.charCodeAt(e=f++))===fr)s=!0;else if(r===or)s=!0,t.charCodeAt(f)===fr&&++f;else if(r!==n)continue;return t.slice(i,e)}return c=!0,t.slice(i,a)}for(t.charCodeAt(a-1)===fr&&--a,t.charCodeAt(a-1)===or&&--a;(r=u())!==ir;){for(var h=[];r!==rr&&r!==ir;)h.push(r),r=u();e&&null==(h=e(h,o++))||i.push(h)}return i}function i(e,n){return e.map(function(e){return n.map(function(t){return f(e[t])}).join(t)})}function a(e){return e.map(f).join(t)}function f(t){return null==t?"":t instanceof Date?hr(t):e.test(t+="")?'"'+t.replace(/"/g,'""')+'"':t}return{parse:function(t,e){var n,i,a=r(t,function(t,r){if(n)return n(t,r-1);i=t,n=e?function(t,e){var n=cr(t);return function(r,i){return e(n(r),i,t)}}(t,e):cr(t)});return a.columns=i||[],a},parseRows:r,format:function(e,n){return null==n&&(n=sr(e)),[n.map(f).join(t)].concat(i(e,n)).join("\n")},formatBody:function(t,e){return null==e&&(e=sr(t)),i(t,e).join("\n")},formatRows:function(t){return t.map(a).join("\n")}}},dr=lr(","),_r=dr.parse,pr=(dr.parseRows,dr.format,dr.formatBody,dr.formatRows,lr("\t")),br=pr.parse;pr.parseRows,pr.format,pr.formatBody,pr.formatRows;function yr(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.text()}var vr=function(t,e){return fetch(t,e).then(yr)};function gr(t){return function(e,n,r){return 2===arguments.length&&"function"==typeof n&&(r=n,n=void 0),vr(e,n).then(function(e){return t(e,r)})}}gr(_r),gr(br);function xr(t){return function(e,n){return vr(e,n).then(function(e){return(new DOMParser).parseFromString(e,t)})}}xr("application/xml"),xr("text/html"),xr("image/svg+xml");function mr(t,e,n,r){if(isNaN(e)||isNaN(n))return t;var i,a,f,o,c,s,u,h,l,d=t._root,_={data:r},p=t._x0,b=t._y0,y=t._x1,v=t._y1;if(!d)return t._root=_,t;for(;d.length;)if((s=e>=(a=(p+y)/2))?p=a:y=a,(u=n>=(f=(b+v)/2))?b=f:v=f,i=d,!(d=d[h=u<<1|s]))return i[h]=_,t;if(o=+t._x.call(null,d.data),c=+t._y.call(null,d.data),e===o&&n===c)return _.next=d,i?i[h]=_:t._root=_,t;do{i=i?i[h]=new Array(4):t._root=new Array(4),(s=e>=(a=(p+y)/2))?p=a:y=a,(u=n>=(f=(b+v)/2))?b=f:v=f}while((h=u<<1|s)==(l=(c>=f)<<1|o>=a));return i[l]=d,i[h]=_,t}var wr=function(t,e,n,r,i){this.node=t,this.x0=e,this.y0=n,this.x1=r,this.y1=i};function Mr(t){return t[0]}function Nr(t){return t[1]}function kr(t,e,n){var r=new Tr(null==e?Mr:e,null==n?Nr:n,NaN,NaN,NaN,NaN);return null==t?r:r.addAll(t)}function Tr(t,e,n,r,i,a){this._x=t,this._y=e,this._x0=n,this._y0=r,this._x1=i,this._y1=a,this._root=void 0}function Ar(t){for(var e={data:t.data},n=e;t=t.next;)n=n.next={data:t.data};return e}var Cr=kr.prototype=Tr.prototype;Cr.copy=function(){var t,e,n=new Tr(this._x,this._y,this._x0,this._y0,this._x1,this._y1),r=this._root;if(!r)return n;if(!r.length)return n._root=Ar(r),n;for(t=[{source:r,target:n._root=new Array(4)}];r=t.pop();)for(var i=0;i<4;++i)(e=r.source[i])&&(e.length?t.push({source:e,target:r.target[i]=new Array(4)}):r.target[i]=Ar(e));return n},Cr.add=function(t){var e=+this._x.call(null,t),n=+this._y.call(null,t);return mr(this.cover(e,n),e,n,t)},Cr.addAll=function(t){var e,n,r,i,a=t.length,f=new Array(a),o=new Array(a),c=1/0,s=1/0,u=-1/0,h=-1/0;for(n=0;n<a;++n)isNaN(r=+this._x.call(null,e=t[n]))||isNaN(i=+this._y.call(null,e))||(f[n]=r,o[n]=i,r<c&&(c=r),r>u&&(u=r),i<s&&(s=i),i>h&&(h=i));if(c>u||s>h)return this;for(this.cover(c,s).cover(u,h),n=0;n<a;++n)mr(this,f[n],o[n],t[n]);return this},Cr.cover=function(t,e){if(isNaN(t=+t)||isNaN(e=+e))return this;var n=this._x0,r=this._y0,i=this._x1,a=this._y1;if(isNaN(n))i=(n=Math.floor(t))+1,a=(r=Math.floor(e))+1;else{for(var f,o,c=i-n,s=this._root;n>t||t>=i||r>e||e>=a;)switch(o=(e<r)<<1|t<n,(f=new Array(4))[o]=s,s=f,c*=2,o){case 0:i=n+c,a=r+c;break;case 1:n=i-c,a=r+c;break;case 2:i=n+c,r=a-c;break;case 3:n=i-c,r=a-c}this._root&&this._root.length&&(this._root=s)}return this._x0=n,this._y0=r,this._x1=i,this._y1=a,this},Cr.data=function(){var t=[];return this.visit(function(e){if(!e.length)do{t.push(e.data)}while(e=e.next)}),t},Cr.extent=function(t){return arguments.length?this.cover(+t[0][0],+t[0][1]).cover(+t[1][0],+t[1][1]):isNaN(this._x0)?void 0:[[this._x0,this._y0],[this._x1,this._y1]]},Cr.find=function(t,e,n){var r,i,a,f,o,c,s,u=this._x0,h=this._y0,l=this._x1,d=this._y1,_=[],p=this._root;for(p&&_.push(new wr(p,u,h,l,d)),null==n?n=1/0:(u=t-n,h=e-n,l=t+n,d=e+n,n*=n);c=_.pop();)if(!(!(p=c.node)||(i=c.x0)>l||(a=c.y0)>d||(f=c.x1)<u||(o=c.y1)<h))if(p.length){var b=(i+f)/2,y=(a+o)/2;_.push(new wr(p[3],b,y,f,o),new wr(p[2],i,y,b,o),new wr(p[1],b,a,f,y),new wr(p[0],i,a,b,y)),(s=(e>=y)<<1|t>=b)&&(c=_[_.length-1],_[_.length-1]=_[_.length-1-s],_[_.length-1-s]=c)}else{var v=t-+this._x.call(null,p.data),g=e-+this._y.call(null,p.data),x=v*v+g*g;if(x<n){var m=Math.sqrt(n=x);u=t-m,h=e-m,l=t+m,d=e+m,r=p.data}}return r},Cr.remove=function(t){if(isNaN(a=+this._x.call(null,t))||isNaN(f=+this._y.call(null,t)))return this;var e,n,r,i,a,f,o,c,s,u,h,l,d=this._root,_=this._x0,p=this._y0,b=this._x1,y=this._y1;if(!d)return this;if(d.length)for(;;){if((s=a>=(o=(_+b)/2))?_=o:b=o,(u=f>=(c=(p+y)/2))?p=c:y=c,e=d,!(d=d[h=u<<1|s]))return this;if(!d.length)break;(e[h+1&3]||e[h+2&3]||e[h+3&3])&&(n=e,l=h)}for(;d.data!==t;)if(r=d,!(d=d.next))return this;return(i=d.next)&&delete d.next,r?(i?r.next=i:delete r.next,this):e?(i?e[h]=i:delete e[h],(d=e[0]||e[1]||e[2]||e[3])&&d===(e[3]||e[2]||e[1]||e[0])&&!d.length&&(n?n[l]=d:this._root=d),this):(this._root=i,this)},Cr.removeAll=function(t){for(var e=0,n=t.length;e<n;++e)this.remove(t[e]);return this},Cr.root=function(){return this._root},Cr.size=function(){var t=0;return this.visit(function(e){if(!e.length)do{++t}while(e=e.next)}),t},Cr.visit=function(t){var e,n,r,i,a,f,o=[],c=this._root;for(c&&o.push(new wr(c,this._x0,this._y0,this._x1,this._y1));e=o.pop();)if(!t(c=e.node,r=e.x0,i=e.y0,a=e.x1,f=e.y1)&&c.length){var s=(r+a)/2,u=(i+f)/2;(n=c[3])&&o.push(new wr(n,s,u,a,f)),(n=c[2])&&o.push(new wr(n,r,u,s,f)),(n=c[1])&&o.push(new wr(n,s,i,a,u)),(n=c[0])&&o.push(new wr(n,r,i,s,u))}return this},Cr.visitAfter=function(t){var e,n=[],r=[];for(this._root&&n.push(new wr(this._root,this._x0,this._y0,this._x1,this._y1));e=n.pop();){var i=e.node;if(i.length){var a,f=e.x0,o=e.y0,c=e.x1,s=e.y1,u=(f+c)/2,h=(o+s)/2;(a=i[0])&&n.push(new wr(a,f,o,u,h)),(a=i[1])&&n.push(new wr(a,u,o,c,h)),(a=i[2])&&n.push(new wr(a,f,h,u,s)),(a=i[3])&&n.push(new wr(a,u,h,c,s))}r.push(e)}for(;e=r.pop();)t(e.node,e.x0,e.y0,e.x1,e.y1);return this},Cr.x=function(t){return arguments.length?(this._x=t,this):this._x},Cr.y=function(t){return arguments.length?(this._y=t,this):this._y};Math.PI,Math.sqrt(5);var Sr=function(t,e){if((n=(t=e?t.toExponential(e-1):t.toExponential()).indexOf("e"))<0)return null;var n,r=t.slice(0,n);return[r.length>1?r[0]+r.slice(2):r,+t.slice(n+1)]},Er=function(t){return(t=Sr(Math.abs(t)))?t[1]:NaN},Ur=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function Lr(t){return new Pr(t)}function Pr(t){if(!(e=Ur.exec(t)))throw new Error("invalid format: "+t);var e;this.fill=e[1]||" ",this.align=e[2]||">",this.sign=e[3]||"-",this.symbol=e[4]||"",this.zero=!!e[5],this.width=e[6]&&+e[6],this.comma=!!e[7],this.precision=e[8]&&+e[8].slice(1),this.trim=!!e[9],this.type=e[10]||""}Lr.prototype=Pr.prototype,Pr.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(null==this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(null==this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};var Dr,Rr,jr,Fr,Or=function(t){t:for(var e,n=t.length,r=1,i=-1;r<n;++r)switch(t[r]){case".":i=e=r;break;case"0":0===i&&(i=r),e=r;break;default:if(i>0){if(!+t[r])break t;i=0}}return i>0?t.slice(0,i)+t.slice(e+1):t},Yr=function(t,e){var n=Sr(t,e);if(!n)return t+"";var r=n[0],i=n[1];return i<0?"0."+new Array(-i).join("0")+r:r.length>i+1?r.slice(0,i+1)+"."+r.slice(i+1):r+new Array(i-r.length+2).join("0")},zr={"%":function(t,e){return(100*t).toFixed(e)},b:function(t){return Math.round(t).toString(2)},c:function(t){return t+""},d:function(t){return Math.round(t).toString(10)},e:function(t,e){return t.toExponential(e)},f:function(t,e){return t.toFixed(e)},g:function(t,e){return t.toPrecision(e)},o:function(t){return Math.round(t).toString(8)},p:function(t,e){return Yr(100*t,e)},r:Yr,s:function(t,e){var n=Sr(t,e);if(!n)return t+"";var r=n[0],i=n[1],a=i-(Dr=3*Math.max(-8,Math.min(8,Math.floor(i/3))))+1,f=r.length;return a===f?r:a>f?r+new Array(a-f+1).join("0"):a>0?r.slice(0,a)+"."+r.slice(a):"0."+new Array(1-a).join("0")+Sr(t,Math.max(0,e+a-1))[0]},X:function(t){return Math.round(t).toString(16).toUpperCase()},x:function(t){return Math.round(t).toString(16)}},Hr=function(t){return t},qr=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];Rr=function(t){var e,n,r=t.grouping&&t.thousands?(e=t.grouping,n=t.thousands,function(t,r){for(var i=t.length,a=[],f=0,o=e[0],c=0;i>0&&o>0&&(c+o+1>r&&(o=Math.max(1,r-c)),a.push(t.substring(i-=o,i+o)),!((c+=o+1)>r));)o=e[f=(f+1)%e.length];return a.reverse().join(n)}):Hr,i=t.currency,a=t.decimal,f=t.numerals?function(t){return function(e){return e.replace(/[0-9]/g,function(e){return t[+e]})}}(t.numerals):Hr,o=t.percent||"%";function c(t){var e=(t=Lr(t)).fill,n=t.align,c=t.sign,s=t.symbol,u=t.zero,h=t.width,l=t.comma,d=t.precision,_=t.trim,p=t.type;"n"===p?(l=!0,p="g"):zr[p]||(null==d&&(d=12),_=!0,p="g"),(u||"0"===e&&"="===n)&&(u=!0,e="0",n="=");var b="$"===s?i[0]:"#"===s&&/[boxX]/.test(p)?"0"+p.toLowerCase():"",y="$"===s?i[1]:/[%p]/.test(p)?o:"",v=zr[p],g=/[defgprs%]/.test(p);function x(t){var i,o,s,x=b,m=y;if("c"===p)m=v(t)+m,t="";else{var w=(t=+t)<0;if(t=v(Math.abs(t),d),_&&(t=Or(t)),w&&0==+t&&(w=!1),x=(w?"("===c?c:"-":"-"===c||"("===c?"":c)+x,m=("s"===p?qr[8+Dr/3]:"")+m+(w&&"("===c?")":""),g)for(i=-1,o=t.length;++i<o;)if(48>(s=t.charCodeAt(i))||s>57){m=(46===s?a+t.slice(i+1):t.slice(i))+m,t=t.slice(0,i);break}}l&&!u&&(t=r(t,1/0));var M=x.length+t.length+m.length,N=M<h?new Array(h-M+1).join(e):"";switch(l&&u&&(t=r(N+t,N.length?h-m.length:1/0),N=""),n){case"<":t=x+t+m+N;break;case"=":t=x+N+t+m;break;case"^":t=N.slice(0,M=N.length>>1)+x+t+m+N.slice(M);break;default:t=N+x+t+m}return f(t)}return d=null==d?6:/[gprs]/.test(p)?Math.max(1,Math.min(21,d)):Math.max(0,Math.min(20,d)),x.toString=function(){return t+""},x}return{format:c,formatPrefix:function(t,e){var n=c(((t=Lr(t)).type="f",t)),r=3*Math.max(-8,Math.min(8,Math.floor(Er(e)/3))),i=Math.pow(10,-r),a=qr[8+r/3];return function(t){return n(i*t)+a}}}}({decimal:".",thousands:",",grouping:[3],currency:["$",""]}),jr=Rr.format,Fr=Rr.formatPrefix;var Ir=function(){return new $r};function $r(){this.reset()}$r.prototype={constructor:$r,reset:function(){this.s=this.t=0},add:function(t){Vr(Br,t,this.t),Vr(this,Br.s,this.s),this.s?this.t+=Br.t:this.s=Br.t},valueOf:function(){return this.s}};var Br=new $r;function Vr(t,e,n){var r=t.s=e+n,i=r-e,a=r-i;t.t=e-a+(n-i)}var Xr=1e-6,Zr=Math.PI,Jr=Zr/2,Wr=Zr/4,Qr=2*Zr,Gr=Zr/180,Kr=Math.abs,ti=Math.atan,ei=Math.atan2,ni=Math.cos,ri=(Math.ceil,Math.exp),ii=(Math.floor,Math.log),ai=(Math.pow,Math.sin),fi=(Math.sign,Math.sqrt),oi=Math.tan;function ci(t){return t>1?0:t<-1?Zr:Math.acos(t)}function si(t){return t>1?Jr:t<-1?-Jr:Math.asin(t)}function ui(){}Ir(),Ir();function hi(t){var e=t[0],n=t[1],r=ni(n);return[r*ni(e),r*ai(e),ai(n)]}function li(t,e){return[t[1]*e[2]-t[2]*e[1],t[2]*e[0]-t[0]*e[2],t[0]*e[1]-t[1]*e[0]]}function di(t){var e=fi(t[0]*t[0]+t[1]*t[1]+t[2]*t[2]);t[0]/=e,t[1]/=e,t[2]/=e}Ir();function _i(t,e){return[Kr(t)>Zr?t+Math.round(-t/Qr)*Qr:t,e]}_i.invert=_i;var pi=function(){var t,e=[];return{point:function(e,n){t.push([e,n])},lineStart:function(){e.push(t=[])},lineEnd:ui,rejoin:function(){e.length>1&&e.push(e.pop().concat(e.shift()))},result:function(){var n=e;return e=[],t=null,n}}},bi=function(t,e){return Kr(t[0]-e[0])<Xr&&Kr(t[1]-e[1])<Xr};function yi(t,e,n,r){this.x=t,this.z=e,this.o=n,this.e=r,this.v=!1,this.n=this.p=null}var vi=function(t,e,n,r,i){var a,f,o=[],c=[];if(t.forEach(function(t){if(!((e=t.length-1)<=0)){var e,n,r=t[0],f=t[e];if(bi(r,f)){for(i.lineStart(),a=0;a<e;++a)i.point((r=t[a])[0],r[1]);i.lineEnd()}else o.push(n=new yi(r,t,null,!0)),c.push(n.o=new yi(r,null,n,!1)),o.push(n=new yi(f,t,null,!1)),c.push(n.o=new yi(f,null,n,!0))}}),o.length){for(c.sort(e),gi(o),gi(c),a=0,f=c.length;a<f;++a)c[a].e=n=!n;for(var s,u,h=o[0];;){for(var l=h,d=!0;l.v;)if((l=l.n)===h)return;s=l.z,i.lineStart();do{if(l.v=l.o.v=!0,l.e){if(d)for(a=0,f=s.length;a<f;++a)i.point((u=s[a])[0],u[1]);else r(l.x,l.n.x,1,i);l=l.n}else{if(d)for(s=l.p.z,a=s.length-1;a>=0;--a)i.point((u=s[a])[0],u[1]);else r(l.x,l.p.x,-1,i);l=l.p}s=(l=l.o).z,d=!d}while(!l.v);i.lineEnd()}}};function gi(t){if(e=t.length){for(var e,n,r=0,i=t[0];++r<e;)i.n=n=t[r],n.p=i,i=n;i.n=n=t[0],n.p=i}}var xi=Ir(),mi=function(t,e){var n=e[0],r=e[1],i=ai(r),a=[ai(n),-ni(n),0],f=0,o=0;xi.reset(),1===i?r=Jr+Xr:-1===i&&(r=-Jr-Xr);for(var c=0,s=t.length;c<s;++c)if(h=(u=t[c]).length)for(var u,h,l=u[h-1],d=l[0],_=l[1]/2+Wr,p=ai(_),b=ni(_),y=0;y<h;++y,d=g,p=m,b=w,l=v){var v=u[y],g=v[0],x=v[1]/2+Wr,m=ai(x),w=ni(x),M=g-d,N=M>=0?1:-1,k=N*M,T=k>Zr,A=p*m;if(xi.add(ei(A*N*ai(k),b*w+A*ni(k))),f+=T?M+N*Qr:M,T^d>=n^g>=n){var C=li(hi(l),hi(v));di(C);var S=li(a,C);di(S);var E=(T^M>=0?-1:1)*si(S[2]);(r>E||r===E&&(C[0]||C[1]))&&(o+=T^M>=0?1:-1)}}return(f<-Xr||f<Xr&&xi<-Xr)^1&o},wi=function(t,e,n,r){return function(i){var a,f,o,c=e(i),s=pi(),u=e(s),h=!1,l={point:d,lineStart:p,lineEnd:y,polygonStart:function(){l.point=v,l.lineStart=g,l.lineEnd=x,f=[],a=[]},polygonEnd:function(){l.point=d,l.lineStart=p,l.lineEnd=y,f=b(f);var t=mi(a,r);f.length?(h||(i.polygonStart(),h=!0),vi(f,Ni,t,n,i)):t&&(h||(i.polygonStart(),h=!0),i.lineStart(),n(null,null,1,i),i.lineEnd()),h&&(i.polygonEnd(),h=!1),f=a=null},sphere:function(){i.polygonStart(),i.lineStart(),n(null,null,1,i),i.lineEnd(),i.polygonEnd()}};function d(e,n){t(e,n)&&i.point(e,n)}function _(t,e){c.point(t,e)}function p(){l.point=_,c.lineStart()}function y(){l.point=d,c.lineEnd()}function v(t,e){o.push([t,e]),u.point(t,e)}function g(){u.lineStart(),o=[]}function x(){v(o[0][0],o[0][1]),u.lineEnd();var t,e,n,r,c=u.clean(),l=s.result(),d=l.length;if(o.pop(),a.push(o),o=null,d)if(1&c){if((e=(n=l[0]).length-1)>0){for(h||(i.polygonStart(),h=!0),i.lineStart(),t=0;t<e;++t)i.point((r=n[t])[0],r[1]);i.lineEnd()}}else d>1&&2&c&&l.push(l.pop().concat(l.shift())),f.push(l.filter(Mi))}return l}};function Mi(t){return t.length>1}function Ni(t,e){return((t=t.x)[0]<0?t[1]-Jr-Xr:Jr-t[1])-((e=e.x)[0]<0?e[1]-Jr-Xr:Jr-e[1])}wi(function(){return!0},function(t){var e,n=NaN,r=NaN,i=NaN;return{lineStart:function(){t.lineStart(),e=1},point:function(a,f){var o=a>0?Zr:-Zr,c=Kr(a-n);Kr(c-Zr)<Xr?(t.point(n,r=(r+f)/2>0?Jr:-Jr),t.point(i,r),t.lineEnd(),t.lineStart(),t.point(o,r),t.point(a,r),e=0):i!==o&&c>=Zr&&(Kr(n-i)<Xr&&(n-=i*Xr),Kr(a-o)<Xr&&(a-=o*Xr),r=function(t,e,n,r){var i,a,f=ai(t-n);return Kr(f)>Xr?ti((ai(e)*(a=ni(r))*ai(n)-ai(r)*(i=ni(e))*ai(t))/(i*a*f)):(e+r)/2}(n,r,a,f),t.point(i,r),t.lineEnd(),t.lineStart(),t.point(o,r),e=0),t.point(n=a,r=f),i=o},lineEnd:function(){t.lineEnd(),n=r=NaN},clean:function(){return 2-e}}},function(t,e,n,r){var i;if(null==t)i=n*Jr,r.point(-Zr,i),r.point(0,i),r.point(Zr,i),r.point(Zr,0),r.point(Zr,-i),r.point(0,-i),r.point(-Zr,-i),r.point(-Zr,0),r.point(-Zr,i);else if(Kr(t[0]-e[0])>Xr){var a=t[0]<e[0]?Zr:-Zr;i=n*a/2,r.point(-a,i),r.point(0,i),r.point(a,i)}else r.point(e[0],e[1])},[-Zr,-Jr]);Ir();Ir(),Ir();function ki(t){this._context=t}ki.prototype={_radius:4.5,pointRadius:function(t){return this._radius=t,this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._context.closePath(),this._point=NaN},point:function(t,e){switch(this._point){case 0:this._context.moveTo(t,e),this._point=1;break;case 1:this._context.lineTo(t,e);break;default:this._context.moveTo(t+this._radius,e),this._context.arc(t,e,this._radius,0,Qr)}},result:ui};Ir();function Ti(){this._string=[]}function Ai(t){return"m0,"+t+"a"+t+","+t+" 0 1,1 0,"+-2*t+"a"+t+","+t+" 0 1,1 0,"+2*t+"z"}Ti.prototype={_radius:4.5,_circle:Ai(4.5),pointRadius:function(t){return(t=+t)!==this._radius&&(this._radius=t,this._circle=null),this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._string.push("Z"),this._point=NaN},point:function(t,e){switch(this._point){case 0:this._string.push("M",t,",",e),this._point=1;break;case 1:this._string.push("L",t,",",e);break;default:null==this._circle&&(this._circle=Ai(this._radius)),this._string.push("M",t,",",e,this._circle)}},result:function(){if(this._string.length){var t=this._string.join("");return this._string=[],t}return null}};function Ci(t){return function(e){var n=new Si;for(var r in t)n[r]=t[r];return n.stream=e,n}}function Si(){}Si.prototype={constructor:Si,point:function(t,e){this.stream.point(t,e)},sphere:function(){this.stream.sphere()},lineStart:function(){this.stream.lineStart()},lineEnd:function(){this.stream.lineEnd()},polygonStart:function(){this.stream.polygonStart()},polygonEnd:function(){this.stream.polygonEnd()}};ni(30*Gr);Ci({point:function(t,e){this.stream.point(t*Gr,e*Gr)}});function Ei(t){return function(e,n){var r=ni(e),i=ni(n),a=t(r*i);return[a*i*ai(e),a*ai(n)]}}function Ui(t){return function(e,n){var r=fi(e*e+n*n),i=t(r),a=ai(i),f=ni(i);return[ei(e*a,r*f),si(r&&n*a/r)]}}var Li=Ei(function(t){return fi(2/(1+t))});Li.invert=Ui(function(t){return 2*si(t/2)});var Pi=Ei(function(t){return(t=ci(t))&&t/ai(t)});Pi.invert=Ui(function(t){return t});function Di(t,e){return[t,ii(oi((Jr+e)/2))]}Di.invert=function(t,e){return[t,2*ti(ri(e))-Jr]};function Ri(t,e){return[t,e]}Ri.invert=Ri;var ji=1.340264,Fi=-.081106,Oi=893e-6,Yi=.003796,zi=fi(3)/2;function Hi(t,e){var n=si(zi*ai(e)),r=n*n,i=r*r*r;return[t*ni(n)/(zi*(ji+3*Fi*r+i*(7*Oi+9*Yi*r))),n*(ji+Fi*r+i*(Oi+Yi*r))]}Hi.invert=function(t,e){for(var n,r=e,i=r*r,a=i*i*i,f=0;f<12&&(a=(i=(r-=n=(r*(ji+Fi*i+a*(Oi+Yi*i))-e)/(ji+3*Fi*i+a*(7*Oi+9*Yi*i)))*r)*i*i,!(Kr(n)<1e-12));++f);return[zi*t*(ji+3*Fi*i+a*(7*Oi+9*Yi*i))/ni(r),si(ai(r)/zi)]};function qi(t,e){var n=ni(e),r=ni(t)*n;return[n*ai(t)/r,ai(e)/r]}qi.invert=Ui(ti);function Ii(t,e){var n=e*e,r=n*n;return[t*(.8707-.131979*n+r*(r*(.003971*n-.001529*r)-.013791)),e*(1.007226+n*(.015085+r*(.028874*n-.044475-.005916*r)))]}Ii.invert=function(t,e){var n,r=e,i=25;do{var a=r*r,f=a*a;r-=n=(r*(1.007226+a*(.015085+f*(.028874*a-.044475-.005916*f)))-e)/(1.007226+a*(.045255+f*(.259866*a-.311325-.005916*11*f)))}while(Kr(n)>Xr&&--i>0);return[t/(.8707+(a=r*r)*(a*(a*a*a*(.003971-.001529*a)-.013791)-.131979)),r]};function $i(t,e){return[ni(e)*ai(t),ai(e)]}$i.invert=Ui(si);function Bi(t,e){var n=ni(e),r=1+ni(t)*n;return[n*ai(t)/r,ai(e)/r]}Bi.invert=Ui(function(t){return 2*ti(t)});function Vi(t,e){return[ii(oi((Jr+e)/2)),-t]}Vi.invert=function(t,e){return[-e,2*ti(ri(t))-Jr]};function Xi(t){var e=0,n=t.children,r=n&&n.length;if(r)for(;--r>=0;)e+=n[r].value;else e=1;t.value=e}function Zi(t,e){var n,r,i,a,f,o=new Gi(t),c=+t.value&&(o.value=t.value),s=[o];for(null==e&&(e=Ji);n=s.pop();)if(c&&(n.value=+n.data.value),(i=e(n.data))&&(f=i.length))for(n.children=new Array(f),a=f-1;a>=0;--a)s.push(r=n.children[a]=new Gi(i[a])),r.parent=n,r.depth=n.depth+1;return o.eachBefore(Qi)}function Ji(t){return t.children}function Wi(t){t.data=t.data.data}function Qi(t){var e=0;do{t.height=e}while((t=t.parent)&&t.height<++e)}function Gi(t){this.data=t,this.depth=this.height=0,this.parent=null}Gi.prototype=Zi.prototype={constructor:Gi,count:function(){return this.eachAfter(Xi)},each:function(t){var e,n,r,i,a=this,f=[a];do{for(e=f.reverse(),f=[];a=e.pop();)if(t(a),n=a.children)for(r=0,i=n.length;r<i;++r)f.push(n[r])}while(f.length);return this},eachAfter:function(t){for(var e,n,r,i=this,a=[i],f=[];i=a.pop();)if(f.push(i),e=i.children)for(n=0,r=e.length;n<r;++n)a.push(e[n]);for(;i=f.pop();)t(i);return this},eachBefore:function(t){for(var e,n,r=this,i=[r];r=i.pop();)if(t(r),e=r.children)for(n=e.length-1;n>=0;--n)i.push(e[n]);return this},sum:function(t){return this.eachAfter(function(e){for(var n=+t(e.data)||0,r=e.children,i=r&&r.length;--i>=0;)n+=r[i].value;e.value=n})},sort:function(t){return this.eachBefore(function(e){e.children&&e.children.sort(t)})},path:function(t){for(var e=this,n=function(t,e){if(t===e)return t;var n=t.ancestors(),r=e.ancestors(),i=null;for(t=n.pop(),e=r.pop();t===e;)i=t,t=n.pop(),e=r.pop();return i}(e,t),r=[e];e!==n;)e=e.parent,r.push(e);for(var i=r.length;t!==n;)r.splice(i,0,t),t=t.parent;return r},ancestors:function(){for(var t=this,e=[t];t=t.parent;)e.push(t);return e},descendants:function(){var t=[];return this.each(function(e){t.push(e)}),t},leaves:function(){var t=[];return this.eachBefore(function(e){e.children||t.push(e)}),t},links:function(){var t=this,e=[];return t.each(function(n){n!==t&&e.push({source:n.parent,target:n})}),e},copy:function(){return Zi(this).eachBefore(Wi)}};Array.prototype.slice;var Ki=function(t,e,n,r,i){for(var a,f=t.children,o=-1,c=f.length,s=t.value&&(r-e)/t.value;++o<c;)(a=f[o]).y0=n,a.y1=i,a.x0=e,a.x1=e+=a.value*s};function ta(t,e){this._=t,this.parent=null,this.children=null,this.A=null,this.a=this,this.z=0,this.m=0,this.c=0,this.s=0,this.t=null,this.i=e}ta.prototype=Object.create(Gi.prototype);var ea=function(t,e,n,r,i){for(var a,f=t.children,o=-1,c=f.length,s=t.value&&(i-n)/t.value;++o<c;)(a=f[o]).x0=e,a.x1=r,a.y0=n,a.y1=n+=a.value*s},na=(1+Math.sqrt(5))/2;function ra(t,e,n,r,i,a){for(var f,o,c,s,u,h,l,d,_,p,b,y=[],v=e.children,g=0,x=0,m=v.length,w=e.value;g<m;){c=i-n,s=a-r;do{u=v[x++].value}while(!u&&x<m);for(h=l=u,b=u*u*(p=Math.max(s/c,c/s)/(w*t)),_=Math.max(l/b,b/h);x<m;++x){if(u+=o=v[x].value,o<h&&(h=o),o>l&&(l=o),b=u*u*p,(d=Math.max(l/b,b/h))>_){u-=o;break}_=d}y.push(f={value:u,dice:c<s,children:v.slice(g,x)}),f.dice?Ki(f,n,r,i,w?r+=s*u/w:a):ea(f,n,r,w?n+=c*u/w:i,a),w-=u,g=x}return y}(function t(e){function n(t,n,r,i,a){ra(e,t,n,r,i,a)}return n.ratio=function(e){return t((e=+e)>1?e:1)},n})(na),function t(e){function n(t,n,r,i,a){if((f=t._squarify)&&f.ratio===e)for(var f,o,c,s,u,h=-1,l=f.length,d=t.value;++h<l;){for(c=(o=f[h]).children,s=o.value=0,u=c.length;s<u;++s)o.value+=c[s].value;o.dice?Ki(o,n,r,i,r+=(a-r)*o.value/d):ea(o,n,r,n+=(i-n)*o.value/d,a),d-=o.value}else t._squarify=f=ra(e,t,n,r,i,a),f.ratio=e}return n.ratio=function(e){return t((e=+e)>1?e:1)},n}(na);var ia=function(){return Math.random()},aa=(function t(e){function n(t,n){return t=null==t?0:+t,n=null==n?1:+n,1===arguments.length?(n=t,t=0):n-=t,function(){return e()*n+t}}return n.source=t,n}(ia),function t(e){function n(t,n){var r,i;return t=null==t?0:+t,n=null==n?1:+n,function(){var a;if(null!=r)a=r,r=null;else do{r=2*e()-1,a=2*e()-1,i=r*r+a*a}while(!i||i>1);return t+n*a*Math.sqrt(-2*Math.log(i)/i)}}return n.source=t,n}(ia)),fa=(function t(e){function n(){var t=aa.source(e).apply(this,arguments);return function(){return Math.exp(t())}}return n.source=t,n}(ia),function t(e){function n(t){return function(){for(var n=0,r=0;r<t;++r)n+=e();return n}}return n.source=t,n}(ia));(function t(e){function n(t){var n=fa.source(e)(t);return function(){return n()/t}}return n.source=t,n})(ia),function t(e){function n(t){return function(){return-Math.log(1-e())/t}}return n.source=t,n}(ia);function oa(t,e){switch(arguments.length){case 0:break;case 1:this.range(t);break;default:this.range(e).domain(t)}return this}var ca=Array.prototype,sa=ca.map,ua=ca.slice;var ha=function(t){return function(){return t}},la=function(t){return+t},da=[0,1];function _a(t){return t}function pa(t,e){return(e-=t=+t)?function(n){return(n-t)/e}:ha(isNaN(e)?NaN:.5)}function ba(t){var e,n=t[0],r=t[t.length-1];return n>r&&(e=n,n=r,r=e),function(t){return Math.max(n,Math.min(r,t))}}function ya(t,e,n){var r=t[0],i=t[1],a=e[0],f=e[1];return i<r?(r=pa(i,r),a=n(f,a)):(r=pa(r,i),a=n(a,f)),function(t){return a(r(t))}}function va(t,e,n){var r=Math.min(t.length,e.length)-1,i=new Array(r),a=new Array(r),f=-1;for(t[r]<t[0]&&(t=t.slice().reverse(),e=e.slice().reverse());++f<r;)i[f]=pa(t[f],t[f+1]),a[f]=n(e[f],e[f+1]);return function(e){var n=o(t,e,1,r)-1;return a[n](i[n](e))}}function ga(t,e){return e.domain(t.domain()).range(t.range()).interpolate(t.interpolate()).clamp(t.clamp()).unknown(t.unknown())}function xa(){var t,e,n,r,i,a,f=da,o=da,c=He,s=_a;function u(){return r=Math.min(f.length,o.length)>2?va:ya,i=a=null,h}function h(e){return isNaN(e=+e)?n:(i||(i=r(f.map(t),o,c)))(t(s(e)))}return h.invert=function(n){return s(e((a||(a=r(o,f.map(t),Pe)))(n)))},h.domain=function(t){return arguments.length?(f=sa.call(t,la),s===_a||(s=ba(f)),u()):f.slice()},h.range=function(t){return arguments.length?(o=ua.call(t),u()):o.slice()},h.rangeRound=function(t){return o=ua.call(t),c=qe,u()},h.clamp=function(t){return arguments.length?(s=t?ba(f):_a,h):s!==_a},h.interpolate=function(t){return arguments.length?(c=t,u()):c},h.unknown=function(t){return arguments.length?(n=t,h):n},function(n,r){return t=n,e=r,u()}}function ma(t,e){return xa()(t,e)}var wa=function(t,e,n,r){var i,a=_(t,e,n);switch((r=Lr(null==r?",f":r)).type){case"s":var f=Math.max(Math.abs(t),Math.abs(e));return null!=r.precision||isNaN(i=function(t,e){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(Er(e)/3)))-Er(Math.abs(t)))}(a,f))||(r.precision=i),Fr(r,f);case"":case"e":case"g":case"p":case"r":null!=r.precision||isNaN(i=function(t,e){return t=Math.abs(t),e=Math.abs(e)-t,Math.max(0,Er(e)-Er(t))+1}(a,Math.max(Math.abs(t),Math.abs(e))))||(r.precision=i-("e"===r.type));break;case"f":case"%":null!=r.precision||isNaN(i=function(t){return Math.max(0,-Er(Math.abs(t)))}(a))||(r.precision=i-2*("%"===r.type))}return jr(r)};function Ma(t){var e=t.domain;return t.ticks=function(t){var n=e();return l(n[0],n[n.length-1],null==t?10:t)},t.tickFormat=function(t,n){var r=e();return wa(r[0],r[r.length-1],null==t?10:t,n)},t.nice=function(n){null==n&&(n=10);var r,i=e(),a=0,f=i.length-1,o=i[a],c=i[f];return c<o&&(r=o,o=c,c=r,r=a,a=f,f=r),(r=d(o,c,n))>0?r=d(o=Math.floor(o/r)*r,c=Math.ceil(c/r)*r,n):r<0&&(r=d(o=Math.ceil(o*r)/r,c=Math.floor(c*r)/r,n)),r>0?(i[a]=Math.floor(o/r)*r,i[f]=Math.ceil(c/r)*r,e(i)):r<0&&(i[a]=Math.ceil(o*r)/r,i[f]=Math.floor(c*r)/r,e(i)),t},t}function Na(){var t=ma(_a,_a);return t.copy=function(){return ga(t,Na())},oa.apply(t,arguments),Ma(t)}var ka=new Date,Ta=new Date;function Aa(t,e,n,r){function i(e){return t(e=new Date(+e)),e}return i.floor=i,i.ceil=function(n){return t(n=new Date(n-1)),e(n,1),t(n),n},i.round=function(t){var e=i(t),n=i.ceil(t);return t-e<n-t?e:n},i.offset=function(t,n){return e(t=new Date(+t),null==n?1:Math.floor(n)),t},i.range=function(n,r,a){var f,o=[];if(n=i.ceil(n),a=null==a?1:Math.floor(a),!(n<r&&a>0))return o;do{o.push(f=new Date(+n)),e(n,a),t(n)}while(f<n&&n<r);return o},i.filter=function(n){return Aa(function(e){if(e>=e)for(;t(e),!n(e);)e.setTime(e-1)},function(t,r){if(t>=t)if(r<0)for(;++r<=0;)for(;e(t,-1),!n(t););else for(;--r>=0;)for(;e(t,1),!n(t););})},n&&(i.count=function(e,r){return ka.setTime(+e),Ta.setTime(+r),t(ka),t(Ta),Math.floor(n(ka,Ta))},i.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?i.filter(r?function(e){return r(e)%t==0}:function(e){return i.count(0,e)%t==0}):i:null}),i}var Ca=Aa(function(){},function(t,e){t.setTime(+t+e)},function(t,e){return e-t});Ca.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?Aa(function(e){e.setTime(Math.floor(e/t)*t)},function(e,n){e.setTime(+e+n*t)},function(e,n){return(n-e)/t}):Ca:null};Ca.range;var Sa=6e4,Ea=6048e5,Ua=Aa(function(t){t.setTime(t-t.getMilliseconds())},function(t,e){t.setTime(+t+1e3*e)},function(t,e){return(e-t)/1e3},function(t){return t.getUTCSeconds()}),La=(Ua.range,Aa(function(t){t.setTime(t-t.getMilliseconds()-1e3*t.getSeconds())},function(t,e){t.setTime(+t+e*Sa)},function(t,e){return(e-t)/Sa},function(t){return t.getMinutes()})),Pa=(La.range,Aa(function(t){t.setTime(t-t.getMilliseconds()-1e3*t.getSeconds()-t.getMinutes()*Sa)},function(t,e){t.setTime(+t+36e5*e)},function(t,e){return(e-t)/36e5},function(t){return t.getHours()})),Da=(Pa.range,Aa(function(t){t.setHours(0,0,0,0)},function(t,e){t.setDate(t.getDate()+e)},function(t,e){return(e-t-(e.getTimezoneOffset()-t.getTimezoneOffset())*Sa)/864e5},function(t){return t.getDate()-1})),Ra=Da;Da.range;function ja(t){return Aa(function(e){e.setDate(e.getDate()-(e.getDay()+7-t)%7),e.setHours(0,0,0,0)},function(t,e){t.setDate(t.getDate()+7*e)},function(t,e){return(e-t-(e.getTimezoneOffset()-t.getTimezoneOffset())*Sa)/Ea})}var Fa=ja(0),Oa=ja(1),Ya=ja(2),za=ja(3),Ha=ja(4),qa=ja(5),Ia=ja(6),$a=(Fa.range,Oa.range,Ya.range,za.range,Ha.range,qa.range,Ia.range,Aa(function(t){t.setDate(1),t.setHours(0,0,0,0)},function(t,e){t.setMonth(t.getMonth()+e)},function(t,e){return e.getMonth()-t.getMonth()+12*(e.getFullYear()-t.getFullYear())},function(t){return t.getMonth()})),Ba=($a.range,Aa(function(t){t.setMonth(0,1),t.setHours(0,0,0,0)},function(t,e){t.setFullYear(t.getFullYear()+e)},function(t,e){return e.getFullYear()-t.getFullYear()},function(t){return t.getFullYear()}));Ba.every=function(t){return isFinite(t=Math.floor(t))&&t>0?Aa(function(e){e.setFullYear(Math.floor(e.getFullYear()/t)*t),e.setMonth(0,1),e.setHours(0,0,0,0)},function(e,n){e.setFullYear(e.getFullYear()+n*t)}):null};var Va=Ba,Xa=(Ba.range,Aa(function(t){t.setUTCSeconds(0,0)},function(t,e){t.setTime(+t+e*Sa)},function(t,e){return(e-t)/Sa},function(t){return t.getUTCMinutes()})),Za=(Xa.range,Aa(function(t){t.setUTCMinutes(0,0,0)},function(t,e){t.setTime(+t+36e5*e)},function(t,e){return(e-t)/36e5},function(t){return t.getUTCHours()})),Ja=(Za.range,Aa(function(t){t.setUTCHours(0,0,0,0)},function(t,e){t.setUTCDate(t.getUTCDate()+e)},function(t,e){return(e-t)/864e5},function(t){return t.getUTCDate()-1})),Wa=Ja;Ja.range;function Qa(t){return Aa(function(e){e.setUTCDate(e.getUTCDate()-(e.getUTCDay()+7-t)%7),e.setUTCHours(0,0,0,0)},function(t,e){t.setUTCDate(t.getUTCDate()+7*e)},function(t,e){return(e-t)/Ea})}var Ga=Qa(0),Ka=Qa(1),tf=Qa(2),ef=Qa(3),nf=Qa(4),rf=Qa(5),af=Qa(6),ff=(Ga.range,Ka.range,tf.range,ef.range,nf.range,rf.range,af.range,Aa(function(t){t.setUTCDate(1),t.setUTCHours(0,0,0,0)},function(t,e){t.setUTCMonth(t.getUTCMonth()+e)},function(t,e){return e.getUTCMonth()-t.getUTCMonth()+12*(e.getUTCFullYear()-t.getUTCFullYear())},function(t){return t.getUTCMonth()})),of=(ff.range,Aa(function(t){t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)},function(t,e){t.setUTCFullYear(t.getUTCFullYear()+e)},function(t,e){return e.getUTCFullYear()-t.getUTCFullYear()},function(t){return t.getUTCFullYear()}));of.every=function(t){return isFinite(t=Math.floor(t))&&t>0?Aa(function(e){e.setUTCFullYear(Math.floor(e.getUTCFullYear()/t)*t),e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0)},function(e,n){e.setUTCFullYear(e.getUTCFullYear()+n*t)}):null};var cf=of;of.range;function sf(t){if(0<=t.y&&t.y<100){var e=new Date(-1,t.m,t.d,t.H,t.M,t.S,t.L);return e.setFullYear(t.y),e}return new Date(t.y,t.m,t.d,t.H,t.M,t.S,t.L)}function uf(t){if(0<=t.y&&t.y<100){var e=new Date(Date.UTC(-1,t.m,t.d,t.H,t.M,t.S,t.L));return e.setUTCFullYear(t.y),e}return new Date(Date.UTC(t.y,t.m,t.d,t.H,t.M,t.S,t.L))}function hf(t){return{y:t,m:0,d:1,H:0,M:0,S:0,L:0}}var lf,df,_f,pf={"-":"",_:" ",0:"0"},bf=/^\s*\d+/,yf=/^%/,vf=/[\\^$*+?|[\]().{}]/g;function gf(t,e,n){var r=t<0?"-":"",i=(r?-t:t)+"",a=i.length;return r+(a<n?new Array(n-a+1).join(e)+i:i)}function xf(t){return t.replace(vf,"\\$&")}function mf(t){return new RegExp("^(?:"+t.map(xf).join("|")+")","i")}function wf(t){for(var e={},n=-1,r=t.length;++n<r;)e[t[n].toLowerCase()]=n;return e}function Mf(t,e,n){var r=bf.exec(e.slice(n,n+1));return r?(t.w=+r[0],n+r[0].length):-1}function Nf(t,e,n){var r=bf.exec(e.slice(n,n+1));return r?(t.u=+r[0],n+r[0].length):-1}function kf(t,e,n){var r=bf.exec(e.slice(n,n+2));return r?(t.U=+r[0],n+r[0].length):-1}function Tf(t,e,n){var r=bf.exec(e.slice(n,n+2));return r?(t.V=+r[0],n+r[0].length):-1}function Af(t,e,n){var r=bf.exec(e.slice(n,n+2));return r?(t.W=+r[0],n+r[0].length):-1}function Cf(t,e,n){var r=bf.exec(e.slice(n,n+4));return r?(t.y=+r[0],n+r[0].length):-1}function Sf(t,e,n){var r=bf.exec(e.slice(n,n+2));return r?(t.y=+r[0]+(+r[0]>68?1900:2e3),n+r[0].length):-1}function Ef(t,e,n){var r=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(e.slice(n,n+6));return r?(t.Z=r[1]?0:-(r[2]+(r[3]||"00")),n+r[0].length):-1}function Uf(t,e,n){var r=bf.exec(e.slice(n,n+2));return r?(t.m=r[0]-1,n+r[0].length):-1}function Lf(t,e,n){var r=bf.exec(e.slice(n,n+2));return r?(t.d=+r[0],n+r[0].length):-1}function Pf(t,e,n){var r=bf.exec(e.slice(n,n+3));return r?(t.m=0,t.d=+r[0],n+r[0].length):-1}function Df(t,e,n){var r=bf.exec(e.slice(n,n+2));return r?(t.H=+r[0],n+r[0].length):-1}function Rf(t,e,n){var r=bf.exec(e.slice(n,n+2));return r?(t.M=+r[0],n+r[0].length):-1}function jf(t,e,n){var r=bf.exec(e.slice(n,n+2));return r?(t.S=+r[0],n+r[0].length):-1}function Ff(t,e,n){var r=bf.exec(e.slice(n,n+3));return r?(t.L=+r[0],n+r[0].length):-1}function Of(t,e,n){var r=bf.exec(e.slice(n,n+6));return r?(t.L=Math.floor(r[0]/1e3),n+r[0].length):-1}function Yf(t,e,n){var r=yf.exec(e.slice(n,n+1));return r?n+r[0].length:-1}function zf(t,e,n){var r=bf.exec(e.slice(n));return r?(t.Q=+r[0],n+r[0].length):-1}function Hf(t,e,n){var r=bf.exec(e.slice(n));return r?(t.Q=1e3*+r[0],n+r[0].length):-1}function qf(t,e){return gf(t.getDate(),e,2)}function If(t,e){return gf(t.getHours(),e,2)}function $f(t,e){return gf(t.getHours()%12||12,e,2)}function Bf(t,e){return gf(1+Ra.count(Va(t),t),e,3)}function Vf(t,e){return gf(t.getMilliseconds(),e,3)}function Xf(t,e){return Vf(t,e)+"000"}function Zf(t,e){return gf(t.getMonth()+1,e,2)}function Jf(t,e){return gf(t.getMinutes(),e,2)}function Wf(t,e){return gf(t.getSeconds(),e,2)}function Qf(t){var e=t.getDay();return 0===e?7:e}function Gf(t,e){return gf(Fa.count(Va(t),t),e,2)}function Kf(t,e){var n=t.getDay();return t=n>=4||0===n?Ha(t):Ha.ceil(t),gf(Ha.count(Va(t),t)+(4===Va(t).getDay()),e,2)}function to(t){return t.getDay()}function eo(t,e){return gf(Oa.count(Va(t),t),e,2)}function no(t,e){return gf(t.getFullYear()%100,e,2)}function ro(t,e){return gf(t.getFullYear()%1e4,e,4)}function io(t){var e=t.getTimezoneOffset();return(e>0?"-":(e*=-1,"+"))+gf(e/60|0,"0",2)+gf(e%60,"0",2)}function ao(t,e){return gf(t.getUTCDate(),e,2)}function fo(t,e){return gf(t.getUTCHours(),e,2)}function oo(t,e){return gf(t.getUTCHours()%12||12,e,2)}function co(t,e){return gf(1+Wa.count(cf(t),t),e,3)}function so(t,e){return gf(t.getUTCMilliseconds(),e,3)}function uo(t,e){return so(t,e)+"000"}function ho(t,e){return gf(t.getUTCMonth()+1,e,2)}function lo(t,e){return gf(t.getUTCMinutes(),e,2)}function _o(t,e){return gf(t.getUTCSeconds(),e,2)}function po(t){var e=t.getUTCDay();return 0===e?7:e}function bo(t,e){return gf(Ga.count(cf(t),t),e,2)}function yo(t,e){var n=t.getUTCDay();return t=n>=4||0===n?nf(t):nf.ceil(t),gf(nf.count(cf(t),t)+(4===cf(t).getUTCDay()),e,2)}function vo(t){return t.getUTCDay()}function go(t,e){return gf(Ka.count(cf(t),t),e,2)}function xo(t,e){return gf(t.getUTCFullYear()%100,e,2)}function mo(t,e){return gf(t.getUTCFullYear()%1e4,e,4)}function wo(){return"+0000"}function Mo(){return"%"}function No(t){return+t}function ko(t){return Math.floor(+t/1e3)}!function(t){lf=function(t){var e=t.dateTime,n=t.date,r=t.time,i=t.periods,a=t.days,f=t.shortDays,o=t.months,c=t.shortMonths,s=mf(i),u=wf(i),h=mf(a),l=wf(a),d=mf(f),_=wf(f),p=mf(o),b=wf(o),y=mf(c),v=wf(c),g={a:function(t){return f[t.getDay()]},A:function(t){return a[t.getDay()]},b:function(t){return c[t.getMonth()]},B:function(t){return o[t.getMonth()]},c:null,d:qf,e:qf,f:Xf,H:If,I:$f,j:Bf,L:Vf,m:Zf,M:Jf,p:function(t){return i[+(t.getHours()>=12)]},Q:No,s:ko,S:Wf,u:Qf,U:Gf,V:Kf,w:to,W:eo,x:null,X:null,y:no,Y:ro,Z:io,"%":Mo},x={a:function(t){return f[t.getUTCDay()]},A:function(t){return a[t.getUTCDay()]},b:function(t){return c[t.getUTCMonth()]},B:function(t){return o[t.getUTCMonth()]},c:null,d:ao,e:ao,f:uo,H:fo,I:oo,j:co,L:so,m:ho,M:lo,p:function(t){return i[+(t.getUTCHours()>=12)]},Q:No,s:ko,S:_o,u:po,U:bo,V:yo,w:vo,W:go,x:null,X:null,y:xo,Y:mo,Z:wo,"%":Mo},m={a:function(t,e,n){var r=d.exec(e.slice(n));return r?(t.w=_[r[0].toLowerCase()],n+r[0].length):-1},A:function(t,e,n){var r=h.exec(e.slice(n));return r?(t.w=l[r[0].toLowerCase()],n+r[0].length):-1},b:function(t,e,n){var r=y.exec(e.slice(n));return r?(t.m=v[r[0].toLowerCase()],n+r[0].length):-1},B:function(t,e,n){var r=p.exec(e.slice(n));return r?(t.m=b[r[0].toLowerCase()],n+r[0].length):-1},c:function(t,n,r){return N(t,e,n,r)},d:Lf,e:Lf,f:Of,H:Df,I:Df,j:Pf,L:Ff,m:Uf,M:Rf,p:function(t,e,n){var r=s.exec(e.slice(n));return r?(t.p=u[r[0].toLowerCase()],n+r[0].length):-1},Q:zf,s:Hf,S:jf,u:Nf,U:kf,V:Tf,w:Mf,W:Af,x:function(t,e,r){return N(t,n,e,r)},X:function(t,e,n){return N(t,r,e,n)},y:Sf,Y:Cf,Z:Ef,"%":Yf};function w(t,e){return function(n){var r,i,a,f=[],o=-1,c=0,s=t.length;for(n instanceof Date||(n=new Date(+n));++o<s;)37===t.charCodeAt(o)&&(f.push(t.slice(c,o)),null!=(i=pf[r=t.charAt(++o)])?r=t.charAt(++o):i="e"===r?" ":"0",(a=e[r])&&(r=a(n,i)),f.push(r),c=o+1);return f.push(t.slice(c,o)),f.join("")}}function M(t,e){return function(n){var r,i,a=hf(1900);if(N(a,t,n+="",0)!=n.length)return null;if("Q"in a)return new Date(a.Q);if("p"in a&&(a.H=a.H%12+12*a.p),"V"in a){if(a.V<1||a.V>53)return null;"w"in a||(a.w=1),"Z"in a?(i=(r=uf(hf(a.y))).getUTCDay(),r=i>4||0===i?Ka.ceil(r):Ka(r),r=Wa.offset(r,7*(a.V-1)),a.y=r.getUTCFullYear(),a.m=r.getUTCMonth(),a.d=r.getUTCDate()+(a.w+6)%7):(i=(r=e(hf(a.y))).getDay(),r=i>4||0===i?Oa.ceil(r):Oa(r),r=Ra.offset(r,7*(a.V-1)),a.y=r.getFullYear(),a.m=r.getMonth(),a.d=r.getDate()+(a.w+6)%7)}else("W"in a||"U"in a)&&("w"in a||(a.w="u"in a?a.u%7:"W"in a?1:0),i="Z"in a?uf(hf(a.y)).getUTCDay():e(hf(a.y)).getDay(),a.m=0,a.d="W"in a?(a.w+6)%7+7*a.W-(i+5)%7:a.w+7*a.U-(i+6)%7);return"Z"in a?(a.H+=a.Z/100|0,a.M+=a.Z%100,uf(a)):e(a)}}function N(t,e,n,r){for(var i,a,f=0,o=e.length,c=n.length;f<o;){if(r>=c)return-1;if(37===(i=e.charCodeAt(f++))){if(i=e.charAt(f++),!(a=m[i in pf?e.charAt(f++):i])||(r=a(t,n,r))<0)return-1}else if(i!=n.charCodeAt(r++))return-1}return r}return g.x=w(n,g),g.X=w(r,g),g.c=w(e,g),x.x=w(n,x),x.X=w(r,x),x.c=w(e,x),{format:function(t){var e=w(t+="",g);return e.toString=function(){return t},e},parse:function(t){var e=M(t+="",sf);return e.toString=function(){return t},e},utcFormat:function(t){var e=w(t+="",x);return e.toString=function(){return t},e},utcParse:function(t){var e=M(t,uf);return e.toString=function(){return t},e}}}(t),lf.format,lf.parse,df=lf.utcFormat,_f=lf.utcParse}({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});Date.prototype.toISOString||df("%Y-%m-%dT%H:%M:%S.%LZ");+new Date("2000-01-01T00:00:00.000Z")||_f("%Y-%m-%dT%H:%M:%S.%LZ");var To=function(t){for(var e=t.length/6|0,n=new Array(e),r=0;r<e;)n[r]="#"+t.slice(6*r,6*++r);return n},Ao=(To("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf"),To("7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666"),To("1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666"),To("a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928"),To("fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2"),To("b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc"),To("e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999"),To("66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3"),To("8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f"),function(t){return Le(t[t.length-1])});Ao(new Array(3).concat("d8b365f5f5f55ab4ac","a6611adfc27d80cdc1018571","a6611adfc27df5f5f580cdc1018571","8c510ad8b365f6e8c3c7eae55ab4ac01665e","8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e","8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e","8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e","5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30","5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30").map(To)),Ao(new Array(3).concat("af8dc3f7f7f77fbf7b","7b3294c2a5cfa6dba0008837","7b3294c2a5cff7f7f7a6dba0008837","762a83af8dc3e7d4e8d9f0d37fbf7b1b7837","762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837","762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837","762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837","40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b","40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b").map(To)),Ao(new Array(3).concat("e9a3c9f7f7f7a1d76a","d01c8bf1b6dab8e1864dac26","d01c8bf1b6daf7f7f7b8e1864dac26","c51b7de9a3c9fde0efe6f5d0a1d76a4d9221","c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221","c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221","c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221","8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419","8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419").map(To)),Ao(new Array(3).concat("998ec3f7f7f7f1a340","5e3c99b2abd2fdb863e66101","5e3c99b2abd2f7f7f7fdb863e66101","542788998ec3d8daebfee0b6f1a340b35806","542788998ec3d8daebf7f7f7fee0b6f1a340b35806","5427888073acb2abd2d8daebfee0b6fdb863e08214b35806","5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806","2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08","2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08").map(To)),Ao(new Array(3).concat("ef8a62f7f7f767a9cf","ca0020f4a58292c5de0571b0","ca0020f4a582f7f7f792c5de0571b0","b2182bef8a62fddbc7d1e5f067a9cf2166ac","b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac","b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac","b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac","67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061","67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061").map(To)),Ao(new Array(3).concat("ef8a62ffffff999999","ca0020f4a582bababa404040","ca0020f4a582ffffffbababa404040","b2182bef8a62fddbc7e0e0e09999994d4d4d","b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d","b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d","b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d","67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a","67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a").map(To)),Ao(new Array(3).concat("fc8d59ffffbf91bfdb","d7191cfdae61abd9e92c7bb6","d7191cfdae61ffffbfabd9e92c7bb6","d73027fc8d59fee090e0f3f891bfdb4575b4","d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4","d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4","d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4","a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695","a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695").map(To)),Ao(new Array(3).concat("fc8d59ffffbf91cf60","d7191cfdae61a6d96a1a9641","d7191cfdae61ffffbfa6d96a1a9641","d73027fc8d59fee08bd9ef8b91cf601a9850","d73027fc8d59fee08bffffbfd9ef8b91cf601a9850","d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850","d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850","a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837","a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837").map(To)),Ao(new Array(3).concat("fc8d59ffffbf99d594","d7191cfdae61abdda42b83ba","d7191cfdae61ffffbfabdda42b83ba","d53e4ffc8d59fee08be6f59899d5943288bd","d53e4ffc8d59fee08bffffbfe6f59899d5943288bd","d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd","d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd","9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2","9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2").map(To)),Ao(new Array(3).concat("e5f5f999d8c92ca25f","edf8fbb2e2e266c2a4238b45","edf8fbb2e2e266c2a42ca25f006d2c","edf8fbccece699d8c966c2a42ca25f006d2c","edf8fbccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b").map(To)),Ao(new Array(3).concat("e0ecf49ebcda8856a7","edf8fbb3cde38c96c688419d","edf8fbb3cde38c96c68856a7810f7c","edf8fbbfd3e69ebcda8c96c68856a7810f7c","edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b","f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b","f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b").map(To)),Ao(new Array(3).concat("e0f3dba8ddb543a2ca","f0f9e8bae4bc7bccc42b8cbe","f0f9e8bae4bc7bccc443a2ca0868ac","f0f9e8ccebc5a8ddb57bccc443a2ca0868ac","f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e","f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e","f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081").map(To)),Ao(new Array(3).concat("fee8c8fdbb84e34a33","fef0d9fdcc8afc8d59d7301f","fef0d9fdcc8afc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000").map(To)),Ao(new Array(3).concat("ece2f0a6bddb1c9099","f6eff7bdc9e167a9cf02818a","f6eff7bdc9e167a9cf1c9099016c59","f6eff7d0d1e6a6bddb67a9cf1c9099016c59","f6eff7d0d1e6a6bddb67a9cf3690c002818a016450","fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450","fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636").map(To)),Ao(new Array(3).concat("ece7f2a6bddb2b8cbe","f1eef6bdc9e174a9cf0570b0","f1eef6bdc9e174a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858").map(To)),Ao(new Array(3).concat("e7e1efc994c7dd1c77","f1eef6d7b5d8df65b0ce1256","f1eef6d7b5d8df65b0dd1c77980043","f1eef6d4b9dac994c7df65b0dd1c77980043","f1eef6d4b9dac994c7df65b0e7298ace125691003f","f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f","f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f").map(To)),Ao(new Array(3).concat("fde0ddfa9fb5c51b8a","feebe2fbb4b9f768a1ae017e","feebe2fbb4b9f768a1c51b8a7a0177","feebe2fcc5c0fa9fb5f768a1c51b8a7a0177","feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177","fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177","fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a").map(To)),Ao(new Array(3).concat("edf8b17fcdbb2c7fb8","ffffcca1dab441b6c4225ea8","ffffcca1dab441b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58").map(To)),Ao(new Array(3).concat("f7fcb9addd8e31a354","ffffccc2e69978c679238443","ffffccc2e69978c67931a354006837","ffffccd9f0a3addd8e78c67931a354006837","ffffccd9f0a3addd8e78c67941ab5d238443005a32","ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32","ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529").map(To)),Ao(new Array(3).concat("fff7bcfec44fd95f0e","ffffd4fed98efe9929cc4c02","ffffd4fed98efe9929d95f0e993404","ffffd4fee391fec44ffe9929d95f0e993404","ffffd4fee391fec44ffe9929ec7014cc4c028c2d04","ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04","ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506").map(To)),Ao(new Array(3).concat("ffeda0feb24cf03b20","ffffb2fecc5cfd8d3ce31a1c","ffffb2fecc5cfd8d3cf03b20bd0026","ffffb2fed976feb24cfd8d3cf03b20bd0026","ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026","ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026","ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026").map(To)),Ao(new Array(3).concat("deebf79ecae13182bd","eff3ffbdd7e76baed62171b5","eff3ffbdd7e76baed63182bd08519c","eff3ffc6dbef9ecae16baed63182bd08519c","eff3ffc6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b").map(To)),Ao(new Array(3).concat("e5f5e0a1d99b31a354","edf8e9bae4b374c476238b45","edf8e9bae4b374c47631a354006d2c","edf8e9c7e9c0a1d99b74c47631a354006d2c","edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b").map(To)),Ao(new Array(3).concat("f0f0f0bdbdbd636363","f7f7f7cccccc969696525252","f7f7f7cccccc969696636363252525","f7f7f7d9d9d9bdbdbd969696636363252525","f7f7f7d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000").map(To)),Ao(new Array(3).concat("efedf5bcbddc756bb1","f2f0f7cbc9e29e9ac86a51a3","f2f0f7cbc9e29e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d").map(To)),Ao(new Array(3).concat("fee0d2fc9272de2d26","fee5d9fcae91fb6a4acb181d","fee5d9fcae91fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d").map(To)),Ao(new Array(3).concat("fee6cefdae6be6550d","feeddefdbe85fd8d3cd94701","feeddefdbe85fd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704").map(To)),Ge(we(300,.5,0),we(-240,.5,1)),Ge(we(-100,.75,.35),we(80,1.5,.8)),Ge(we(260,.75,.35),we(80,1.5,.8)),we(),$t(),Math.PI,Math.PI;function Co(t){var e=t.length;return function(n){return t[Math.max(0,Math.min(e-1,Math.floor(n*e)))]}}Co(To("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725")),Co(To("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf")),Co(To("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4")),Co(To("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921")),Math.abs,Math.atan2,Math.cos,Math.max,Math.min,Math.sin,Math.sqrt;var So=1e-12,Eo=Math.PI,Uo=2*Eo;function Lo(t){this._context=t}Lo.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;default:this._context.lineTo(t,e)}}};var Po=function(t){return new Lo(t)};Ro(Po);function Do(t){this._curve=t}function Ro(t){function e(e){return new Do(t(e))}return e._curve=t,e}Do.prototype={areaStart:function(){this._curve.areaStart()},areaEnd:function(){this._curve.areaEnd()},lineStart:function(){this._curve.lineStart()},lineEnd:function(){this._curve.lineEnd()},point:function(t,e){this._curve.point(e*Math.sin(t),e*-Math.cos(t))}};Array.prototype.slice;Math.sqrt(1/3);var jo=Math.sin(Eo/10)/Math.sin(7*Eo/10),Fo=(Math.sin(Uo/10),Math.cos(Uo/10),Math.sqrt(3),Math.sqrt(3),Math.sqrt(12),function(){});function Oo(t,e,n){t._context.bezierCurveTo((2*t._x0+t._x1)/3,(2*t._y0+t._y1)/3,(t._x0+2*t._x1)/3,(t._y0+2*t._y1)/3,(t._x0+4*t._x1+e)/6,(t._y0+4*t._y1+n)/6)}function Yo(t){this._context=t}Yo.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){switch(this._point){case 3:Oo(this,this._x1,this._y1);case 2:this._context.lineTo(this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;break;case 2:this._point=3,this._context.lineTo((5*this._x0+this._x1)/6,(5*this._y0+this._y1)/6);default:Oo(this,t,e)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=e}};function zo(t){this._context=t}zo.prototype={areaStart:Fo,areaEnd:Fo,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._y0=this._y1=this._y2=this._y3=this._y4=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x2,this._y2),this._context.closePath();break;case 2:this._context.moveTo((this._x2+2*this._x3)/3,(this._y2+2*this._y3)/3),this._context.lineTo((this._x3+2*this._x2)/3,(this._y3+2*this._y2)/3),this._context.closePath();break;case 3:this.point(this._x2,this._y2),this.point(this._x3,this._y3),this.point(this._x4,this._y4)}},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._x2=t,this._y2=e;break;case 1:this._point=2,this._x3=t,this._y3=e;break;case 2:this._point=3,this._x4=t,this._y4=e,this._context.moveTo((this._x0+4*this._x1+t)/6,(this._y0+4*this._y1+e)/6);break;default:Oo(this,t,e)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=e}};function Ho(t){this._context=t}Ho.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3;var n=(this._x0+4*this._x1+t)/6,r=(this._y0+4*this._y1+e)/6;this._line?this._context.lineTo(n,r):this._context.moveTo(n,r);break;case 3:this._point=4;default:Oo(this,t,e)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=e}};function qo(t,e){this._basis=new Yo(t),this._beta=e}qo.prototype={lineStart:function(){this._x=[],this._y=[],this._basis.lineStart()},lineEnd:function(){var t=this._x,e=this._y,n=t.length-1;if(n>0)for(var r,i=t[0],a=e[0],f=t[n]-i,o=e[n]-a,c=-1;++c<=n;)r=c/n,this._basis.point(this._beta*t[c]+(1-this._beta)*(i+r*f),this._beta*e[c]+(1-this._beta)*(a+r*o));this._x=this._y=null,this._basis.lineEnd()},point:function(t,e){this._x.push(+t),this._y.push(+e)}};(function t(e){function n(t){return 1===e?new Yo(t):new qo(t,e)}return n.beta=function(e){return t(+e)},n})(.85);function Io(t,e,n){t._context.bezierCurveTo(t._x1+t._k*(t._x2-t._x0),t._y1+t._k*(t._y2-t._y0),t._x2+t._k*(t._x1-e),t._y2+t._k*(t._y1-n),t._x2,t._y2)}function $o(t,e){this._context=t,this._k=(1-e)/6}$o.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:Io(this,this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2,this._x1=t,this._y1=e;break;case 2:this._point=3;default:Io(this,t,e)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};(function t(e){function n(t){return new $o(t,e)}return n.tension=function(e){return t(+e)},n})(0);function Bo(t,e){this._context=t,this._k=(1-e)/6}Bo.prototype={areaStart:Fo,areaEnd:Fo,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._x3=t,this._y3=e;break;case 1:this._point=2,this._context.moveTo(this._x4=t,this._y4=e);break;case 2:this._point=3,this._x5=t,this._y5=e;break;default:Io(this,t,e)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};(function t(e){function n(t){return new Bo(t,e)}return n.tension=function(e){return t(+e)},n})(0);function Vo(t,e){this._context=t,this._k=(1-e)/6}Vo.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:Io(this,t,e)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};(function t(e){function n(t){return new Vo(t,e)}return n.tension=function(e){return t(+e)},n})(0);function Xo(t,e,n){var r=t._x1,i=t._y1,a=t._x2,f=t._y2;if(t._l01_a>So){var o=2*t._l01_2a+3*t._l01_a*t._l12_a+t._l12_2a,c=3*t._l01_a*(t._l01_a+t._l12_a);r=(r*o-t._x0*t._l12_2a+t._x2*t._l01_2a)/c,i=(i*o-t._y0*t._l12_2a+t._y2*t._l01_2a)/c}if(t._l23_a>So){var s=2*t._l23_2a+3*t._l23_a*t._l12_a+t._l12_2a,u=3*t._l23_a*(t._l23_a+t._l12_a);a=(a*s+t._x1*t._l23_2a-e*t._l12_2a)/u,f=(f*s+t._y1*t._l23_2a-n*t._l12_2a)/u}t._context.bezierCurveTo(r,i,a,f,t._x2,t._y2)}function Zo(t,e){this._context=t,this._alpha=e}Zo.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:this.point(this._x2,this._y2)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){if(t=+t,e=+e,this._point){var n=this._x2-t,r=this._y2-e;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(n*n+r*r,this._alpha))}switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;break;case 2:this._point=3;default:Xo(this,t,e)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};(function t(e){function n(t){return e?new Zo(t,e):new $o(t,0)}return n.alpha=function(e){return t(+e)},n})(.5);function Jo(t,e){this._context=t,this._alpha=e}Jo.prototype={areaStart:Fo,areaEnd:Fo,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(t,e){if(t=+t,e=+e,this._point){var n=this._x2-t,r=this._y2-e;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(n*n+r*r,this._alpha))}switch(this._point){case 0:this._point=1,this._x3=t,this._y3=e;break;case 1:this._point=2,this._context.moveTo(this._x4=t,this._y4=e);break;case 2:this._point=3,this._x5=t,this._y5=e;break;default:Xo(this,t,e)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};(function t(e){function n(t){return e?new Jo(t,e):new Bo(t,0)}return n.alpha=function(e){return t(+e)},n})(.5);function Wo(t,e){this._context=t,this._alpha=e}Wo.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){if(t=+t,e=+e,this._point){var n=this._x2-t,r=this._y2-e;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(n*n+r*r,this._alpha))}switch(this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:Xo(this,t,e)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};(function t(e){function n(t){return e?new Wo(t,e):new Vo(t,0)}return n.alpha=function(e){return t(+e)},n})(.5);function Qo(t){this._context=t}Qo.prototype={areaStart:Fo,areaEnd:Fo,lineStart:function(){this._point=0},lineEnd:function(){this._point&&this._context.closePath()},point:function(t,e){t=+t,e=+e,this._point?this._context.lineTo(t,e):(this._point=1,this._context.moveTo(t,e))}};function Go(t){return t<0?-1:1}function Ko(t,e,n){var r=t._x1-t._x0,i=e-t._x1,a=(t._y1-t._y0)/(r||i<0&&-0),f=(n-t._y1)/(i||r<0&&-0),o=(a*i+f*r)/(r+i);return(Go(a)+Go(f))*Math.min(Math.abs(a),Math.abs(f),.5*Math.abs(o))||0}function tc(t,e){var n=t._x1-t._x0;return n?(3*(t._y1-t._y0)/n-e)/2:e}function ec(t,e,n){var r=t._x0,i=t._y0,a=t._x1,f=t._y1,o=(a-r)/3;t._context.bezierCurveTo(r+o,i+o*e,a-o,f-o*n,a,f)}function nc(t){this._context=t}function rc(t){this._context=new ic(t)}function ic(t){this._context=t}function ac(t){this._context=t}function fc(t){var e,n,r=t.length-1,i=new Array(r),a=new Array(r),f=new Array(r);for(i[0]=0,a[0]=2,f[0]=t[0]+2*t[1],e=1;e<r-1;++e)i[e]=1,a[e]=4,f[e]=4*t[e]+2*t[e+1];for(i[r-1]=2,a[r-1]=7,f[r-1]=8*t[r-1]+t[r],e=1;e<r;++e)n=i[e]/a[e-1],a[e]-=n,f[e]-=n*f[e-1];for(i[r-1]=f[r-1]/a[r-1],e=r-2;e>=0;--e)i[e]=(f[e]-i[e+1])/a[e];for(a[r-1]=(t[r]+i[r-1])/2,e=0;e<r-1;++e)a[e]=2*t[e+1]-i[e+1];return[i,a]}nc.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=this._t0=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x1,this._y1);break;case 3:ec(this,this._t0,tc(this,this._t0))}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){var n=NaN;if(e=+e,(t=+t)!==this._x1||e!==this._y1){switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;break;case 2:this._point=3,ec(this,tc(this,n=Ko(this,t,e)),n);break;default:ec(this,this._t0,n=Ko(this,t,e))}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=e,this._t0=n}}},(rc.prototype=Object.create(nc.prototype)).point=function(t,e){nc.prototype.point.call(this,e,t)},ic.prototype={moveTo:function(t,e){this._context.moveTo(e,t)},closePath:function(){this._context.closePath()},lineTo:function(t,e){this._context.lineTo(e,t)},bezierCurveTo:function(t,e,n,r,i,a){this._context.bezierCurveTo(e,t,r,n,a,i)}},ac.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=[],this._y=[]},lineEnd:function(){var t=this._x,e=this._y,n=t.length;if(n)if(this._line?this._context.lineTo(t[0],e[0]):this._context.moveTo(t[0],e[0]),2===n)this._context.lineTo(t[1],e[1]);else for(var r=fc(t),i=fc(e),a=0,f=1;f<n;++a,++f)this._context.bezierCurveTo(r[0][a],i[0][a],r[1][a],i[1][a],t[f],e[f]);(this._line||0!==this._line&&1===n)&&this._context.closePath(),this._line=1-this._line,this._x=this._y=null},point:function(t,e){this._x.push(+t),this._y.push(+e)}};function oc(t,e){this._context=t,this._t=e}oc.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=this._y=NaN,this._point=0},lineEnd:function(){0<this._t&&this._t<1&&2===this._point&&this._context.lineTo(this._x,this._y),(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line>=0&&(this._t=1-this._t,this._line=1-this._line)},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;default:if(this._t<=0)this._context.lineTo(this._x,e),this._context.lineTo(t,e);else{var n=this._x*(1-this._t)+t*this._t;this._context.lineTo(n,this._y),this._context.lineTo(n,e)}}this._x=t,this._y=e}};function cc(){this._=null}function sc(t){t.U=t.C=t.L=t.R=t.P=t.N=null}function uc(t,e){var n=e,r=e.R,i=n.U;i?i.L===n?i.L=r:i.R=r:t._=r,r.U=i,n.U=r,n.R=r.L,n.R&&(n.R.U=n),r.L=n}function hc(t,e){var n=e,r=e.L,i=n.U;i?i.L===n?i.L=r:i.R=r:t._=r,r.U=i,n.U=r,n.L=r.R,n.L&&(n.L.U=n),r.R=n}function lc(t){for(;t.L;)t=t.L;return t}cc.prototype={constructor:cc,insert:function(t,e){var n,r,i;if(t){if(e.P=t,e.N=t.N,t.N&&(t.N.P=e),t.N=e,t.R){for(t=t.R;t.L;)t=t.L;t.L=e}else t.R=e;n=t}else this._?(t=lc(this._),e.P=null,e.N=t,t.P=t.L=e,n=t):(e.P=e.N=null,this._=e,n=null);for(e.L=e.R=null,e.U=n,e.C=!0,t=e;n&&n.C;)n===(r=n.U).L?(i=r.R)&&i.C?(n.C=i.C=!1,r.C=!0,t=r):(t===n.R&&(uc(this,n),n=(t=n).U),n.C=!1,r.C=!0,hc(this,r)):(i=r.L)&&i.C?(n.C=i.C=!1,r.C=!0,t=r):(t===n.L&&(hc(this,n),n=(t=n).U),n.C=!1,r.C=!0,uc(this,r)),n=t.U;this._.C=!1},remove:function(t){t.N&&(t.N.P=t.P),t.P&&(t.P.N=t.N),t.N=t.P=null;var e,n,r,i=t.U,a=t.L,f=t.R;if(n=a?f?lc(f):a:f,i?i.L===t?i.L=n:i.R=n:this._=n,a&&f?(r=n.C,n.C=t.C,n.L=a,a.U=n,n!==f?(i=n.U,n.U=t.U,t=n.R,i.L=t,n.R=f,f.U=n):(n.U=i,i=n,t=n.R)):(r=t.C,t=n),t&&(t.U=i),!r)if(t&&t.C)t.C=!1;else{do{if(t===this._)break;if(t===i.L){if((e=i.R).C&&(e.C=!1,i.C=!0,uc(this,i),e=i.R),e.L&&e.L.C||e.R&&e.R.C){e.R&&e.R.C||(e.L.C=!1,e.C=!0,hc(this,e),e=i.R),e.C=i.C,i.C=e.R.C=!1,uc(this,i),t=this._;break}}else if((e=i.L).C&&(e.C=!1,i.C=!0,hc(this,i),e=i.L),e.L&&e.L.C||e.R&&e.R.C){e.L&&e.L.C||(e.R.C=!1,e.C=!0,uc(this,e),e=i.L),e.C=i.C,i.C=e.L.C=!1,hc(this,i),t=this._;break}e.C=!0,t=i,i=i.U}while(!t.C);t&&(t.C=!1)}}};var dc=cc;function _c(t,e,n,r){var i=[null,null],a=Oc.push(i)-1;return i.left=t,i.right=e,n&&bc(i,t,e,n),r&&bc(i,e,t,r),jc[t.index].halfedges.push(a),jc[e.index].halfedges.push(a),i}function pc(t,e,n){var r=[e,n];return r.left=t,r}function bc(t,e,n,r){t[0]||t[1]?t.left===n?t[1]=r:t[0]=r:(t[0]=r,t.left=e,t.right=n)}function yc(t,e,n,r,i){var a,f=t[0],o=t[1],c=f[0],s=f[1],u=0,h=1,l=o[0]-c,d=o[1]-s;if(a=e-c,l||!(a>0)){if(a/=l,l<0){if(a<u)return;a<h&&(h=a)}else if(l>0){if(a>h)return;a>u&&(u=a)}if(a=r-c,l||!(a<0)){if(a/=l,l<0){if(a>h)return;a>u&&(u=a)}else if(l>0){if(a<u)return;a<h&&(h=a)}if(a=n-s,d||!(a>0)){if(a/=d,d<0){if(a<u)return;a<h&&(h=a)}else if(d>0){if(a>h)return;a>u&&(u=a)}if(a=i-s,d||!(a<0)){if(a/=d,d<0){if(a>h)return;a>u&&(u=a)}else if(d>0){if(a<u)return;a<h&&(h=a)}return!(u>0||h<1)||(u>0&&(t[0]=[c+u*l,s+u*d]),h<1&&(t[1]=[c+h*l,s+h*d]),!0)}}}}}function vc(t,e,n,r,i){var a=t[1];if(a)return!0;var f,o,c=t[0],s=t.left,u=t.right,h=s[0],l=s[1],d=u[0],_=u[1],p=(h+d)/2,b=(l+_)/2;if(_===l){if(p<e||p>=r)return;if(h>d){if(c){if(c[1]>=i)return}else c=[p,n];a=[p,i]}else{if(c){if(c[1]<n)return}else c=[p,i];a=[p,n]}}else if(o=b-(f=(h-d)/(_-l))*p,f<-1||f>1)if(h>d){if(c){if(c[1]>=i)return}else c=[(n-o)/f,n];a=[(i-o)/f,i]}else{if(c){if(c[1]<n)return}else c=[(i-o)/f,i];a=[(n-o)/f,n]}else if(l<_){if(c){if(c[0]>=r)return}else c=[e,f*e+o];a=[r,f*r+o]}else{if(c){if(c[0]<e)return}else c=[r,f*r+o];a=[e,f*e+o]}return t[0]=c,t[1]=a,!0}function gc(t,e){var n=t.site,r=e.left,i=e.right;return n===i&&(i=r,r=n),i?Math.atan2(i[1]-r[1],i[0]-r[0]):(n===r?(r=e[1],i=e[0]):(r=e[0],i=e[1]),Math.atan2(r[0]-i[0],i[1]-r[1]))}function xc(t,e){return e[+(e.left!==t.site)]}function mc(t,e){return e[+(e.left===t.site)]}var wc,Mc=[];function Nc(){sc(this),this.x=this.y=this.arc=this.site=this.cy=null}function kc(t){var e=t.P,n=t.N;if(e&&n){var r=e.site,i=t.site,a=n.site;if(r!==a){var f=i[0],o=i[1],c=r[0]-f,s=r[1]-o,u=a[0]-f,h=a[1]-o,l=2*(c*h-s*u);if(!(l>=-zc)){var d=c*c+s*s,_=u*u+h*h,p=(h*d-s*_)/l,b=(c*_-u*d)/l,y=Mc.pop()||new Nc;y.arc=t,y.site=i,y.x=p+f,y.y=(y.cy=b+o)+Math.sqrt(p*p+b*b),t.circle=y;for(var v=null,g=Fc._;g;)if(y.y<g.y||y.y===g.y&&y.x<=g.x){if(!g.L){v=g.P;break}g=g.L}else{if(!g.R){v=g;break}g=g.R}Fc.insert(v,y),v||(wc=y)}}}}function Tc(t){var e=t.circle;e&&(e.P||(wc=e.N),Fc.remove(e),Mc.push(e),sc(e),t.circle=null)}var Ac=[];function Cc(){sc(this),this.edge=this.site=this.circle=null}function Sc(t){var e=Ac.pop()||new Cc;return e.site=t,e}function Ec(t){Tc(t),Rc.remove(t),Ac.push(t),sc(t)}function Uc(t){var e=t.circle,n=e.x,r=e.cy,i=[n,r],a=t.P,f=t.N,o=[t];Ec(t);for(var c=a;c.circle&&Math.abs(n-c.circle.x)<Yc&&Math.abs(r-c.circle.cy)<Yc;)a=c.P,o.unshift(c),Ec(c),c=a;o.unshift(c),Tc(c);for(var s=f;s.circle&&Math.abs(n-s.circle.x)<Yc&&Math.abs(r-s.circle.cy)<Yc;)f=s.N,o.push(s),Ec(s),s=f;o.push(s),Tc(s);var u,h=o.length;for(u=1;u<h;++u)s=o[u],c=o[u-1],bc(s.edge,c.site,s.site,i);c=o[0],(s=o[h-1]).edge=_c(c.site,s.site,null,i),kc(c),kc(s)}function Lc(t){for(var e,n,r,i,a=t[0],f=t[1],o=Rc._;o;)if((r=Pc(o,f)-a)>Yc)o=o.L;else{if(!((i=a-Dc(o,f))>Yc)){r>-Yc?(e=o.P,n=o):i>-Yc?(e=o,n=o.N):e=n=o;break}if(!o.R){e=o;break}o=o.R}!function(t){jc[t.index]={site:t,halfedges:[]}}(t);var c=Sc(t);if(Rc.insert(e,c),e||n){if(e===n)return Tc(e),n=Sc(e.site),Rc.insert(c,n),c.edge=n.edge=_c(e.site,c.site),kc(e),void kc(n);if(n){Tc(e),Tc(n);var s=e.site,u=s[0],h=s[1],l=t[0]-u,d=t[1]-h,_=n.site,p=_[0]-u,b=_[1]-h,y=2*(l*b-d*p),v=l*l+d*d,g=p*p+b*b,x=[(b*v-d*g)/y+u,(l*g-p*v)/y+h];bc(n.edge,s,_,x),c.edge=_c(s,t,null,x),n.edge=_c(t,_,null,x),kc(e),kc(n)}else c.edge=_c(e.site,c.site)}}function Pc(t,e){var n=t.site,r=n[0],i=n[1],a=i-e;if(!a)return r;var f=t.P;if(!f)return-1/0;var o=(n=f.site)[0],c=n[1],s=c-e;if(!s)return o;var u=o-r,h=1/a-1/s,l=u/s;return h?(-l+Math.sqrt(l*l-2*h*(u*u/(-2*s)-c+s/2+i-a/2)))/h+r:(r+o)/2}function Dc(t,e){var n=t.N;if(n)return Pc(n,e);var r=t.site;return r[1]===e?r[0]:1/0}var Rc,jc,Fc,Oc,Yc=1e-6,zc=1e-12;function Hc(t,e){return e[1]-t[1]||e[0]-t[0]}function qc(t,e){var n,r,i,a=t.sort(Hc).pop();for(Oc=[],jc=new Array(t.length),Rc=new dc,Fc=new dc;;)if(i=wc,a&&(!i||a[1]<i.y||a[1]===i.y&&a[0]<i.x))a[0]===n&&a[1]===r||(Lc(a),n=a[0],r=a[1]),a=t.pop();else{if(!i)break;Uc(i.arc)}if(function(){for(var t,e,n,r,i=0,a=jc.length;i<a;++i)if((t=jc[i])&&(r=(e=t.halfedges).length)){var f=new Array(r),o=new Array(r);for(n=0;n<r;++n)f[n]=n,o[n]=gc(t,Oc[e[n]]);for(f.sort(function(t,e){return o[e]-o[t]}),n=0;n<r;++n)o[n]=e[f[n]];for(n=0;n<r;++n)e[n]=o[n]}}(),e){var f=+e[0][0],o=+e[0][1],c=+e[1][0],s=+e[1][1];!function(t,e,n,r){for(var i,a=Oc.length;a--;)vc(i=Oc[a],t,e,n,r)&&yc(i,t,e,n,r)&&(Math.abs(i[0][0]-i[1][0])>Yc||Math.abs(i[0][1]-i[1][1])>Yc)||delete Oc[a]}(f,o,c,s),function(t,e,n,r){var i,a,f,o,c,s,u,h,l,d,_,p,b=jc.length,y=!0;for(i=0;i<b;++i)if(a=jc[i]){for(f=a.site,o=(c=a.halfedges).length;o--;)Oc[c[o]]||c.splice(o,1);for(o=0,s=c.length;o<s;)_=(d=mc(a,Oc[c[o]]))[0],p=d[1],h=(u=xc(a,Oc[c[++o%s]]))[0],l=u[1],(Math.abs(_-h)>Yc||Math.abs(p-l)>Yc)&&(c.splice(o,0,Oc.push(pc(f,d,Math.abs(_-t)<Yc&&r-p>Yc?[t,Math.abs(h-t)<Yc?l:r]:Math.abs(p-r)<Yc&&n-_>Yc?[Math.abs(l-r)<Yc?h:n,r]:Math.abs(_-n)<Yc&&p-e>Yc?[n,Math.abs(h-n)<Yc?l:e]:Math.abs(p-e)<Yc&&_-t>Yc?[Math.abs(l-e)<Yc?h:t,e]:null))-1),++s);s&&(y=!1)}if(y){var v,g,x,m=1/0;for(i=0,y=null;i<b;++i)(a=jc[i])&&(x=(v=(f=a.site)[0]-t)*v+(g=f[1]-e)*g)<m&&(m=x,y=a);if(y){var w=[t,e],M=[t,r],N=[n,r],k=[n,e];y.halfedges.push(Oc.push(pc(f=y.site,w,M))-1,Oc.push(pc(f,M,N))-1,Oc.push(pc(f,N,k))-1,Oc.push(pc(f,k,w))-1)}}for(i=0;i<b;++i)(a=jc[i])&&(a.halfedges.length||delete jc[i])}(f,o,c,s)}this.edges=Oc,this.cells=jc,Rc=Fc=Oc=jc=null}qc.prototype={constructor:qc,polygons:function(){var t=this.edges;return this.cells.map(function(e){var n=e.halfedges.map(function(n){return xc(e,t[n])});return n.data=e.site.data,n})},triangles:function(){var t=[],e=this.edges;return this.cells.forEach(function(n,r){if(a=(i=n.halfedges).length)for(var i,a,f,o,c,s,u=n.site,h=-1,l=e[i[a-1]],d=l.left===u?l.right:l.left;++h<a;)f=d,d=(l=e[i[h]]).left===u?l.right:l.left,f&&d&&r<f.index&&r<d.index&&(c=f,s=d,((o=u)[0]-s[0])*(c[1]-o[1])-(o[0]-c[0])*(s[1]-o[1])<0)&&t.push([u.data,f.data,d.data])}),t},links:function(){return this.edges.filter(function(t){return t.right}).map(function(t){return{source:t.left.data,target:t.right.data}})},find:function(t,e,n){for(var r,i,a=this,f=a._found||0,o=a.cells.length;!(i=a.cells[f]);)if(++f>=o)return null;var c=t-i.site[0],s=e-i.site[1],u=c*c+s*s;do{i=a.cells[r=f],f=null,i.halfedges.forEach(function(n){var r=a.edges[n],o=r.left;if(o!==i.site&&o||(o=r.right)){var c=t-o[0],s=e-o[1],h=c*c+s*s;h<u&&(u=h,f=o.index)}})}while(null!==f);return a._found=r,null==n||u<=n*n?i.site:null}};function Ic(t,e,n){this.k=t,this.x=e,this.y=n}Ic.prototype={constructor:Ic,scale:function(t){return 1===t?this:new Ic(this.k*t,this.x,this.y)},translate:function(t,e){return 0===t&0===e?this:new Ic(this.k,this.x+this.k*t,this.y+this.k*e)},apply:function(t){return[t[0]*this.k+this.x,t[1]*this.k+this.y]},applyX:function(t){return t*this.k+this.x},applyY:function(t){return t*this.k+this.y},invert:function(t){return[(t[0]-this.x)/this.k,(t[1]-this.y)/this.k]},invertX:function(t){return(t-this.x)/this.k},invertY:function(t){return(t-this.y)/this.k},rescaleX:function(t){return t.copy().domain(t.range().map(this.invertX,this).map(t.invert,t))},rescaleY:function(t){return t.copy().domain(t.range().map(this.invertY,this).map(t.invert,t))},toString:function(){return"translate("+this.x+","+this.y+") scale("+this.k+")"}};new Ic(1,0,0);Ic.prototype;console.error("I get called from print.js!");let $c=function(t,e){t.select(function(){return this.parentNode.insertBefore(this.cloneNode(!0),this)}).style("fill","#ffffff").style("stroke","#ffffff").style("stroke-width",e).style("stroke-linejoin","round").style("opacity",1)};const Bc=mt("body").append("svg").attr("width",975).attr("height",600),Vc=80,Xc=0,Zc=5,Jc=0;let Wc=(600-(Zc+Vc))/60,Qc=(Bc.append("text").attr("class","title").attr("y",24).html("18 years of Interbrand’s Top Global Brands"),Bc.append("text").attr("class","subTitle").attr("y",55).html("Brand value, $m"),Bc.append("text").attr("class","caption").attr("x",975).attr("y",595).style("text-anchor","end").html("Source: Interbrand"),2e3);fetch("./data.csv").then(t=>t.text()).then(t=>{const e=_r(t);e.forEach(t=>{t.value=+t.value,t.lastValue=+t.lastValue,t.value=isNaN(t.value)?0:t.value,t.year=+t.year,t.colour=Zt(360*Math.random(),.75,.75)});let n=e.filter(t=>t.year==Qc&&!isNaN(t.value)).sort((t,e)=>e.value-t.value).slice(0,12);n.forEach((t,e)=>t.rank=e);let r=Na().domain([0,p(n,t=>t.value)]).range([Jc,975-Xc-65]),i=Na().domain([12,0]).range([600-Zc,Vc]),a=function(t){return A(g,t)}().scale(r).ticks(5).tickSize(-(600-Vc-Zc)).tickFormat(t=>jr(",")(t));Bc.append("g").attr("class","axis xAxis").attr("transform",`translate(0, ${Vc})`).call(a).selectAll(".tick line").classed("origin",t=>0==t),Bc.selectAll("rect.bar").data(n,t=>t.name).enter().append("rect").attr("class","bar").attr("x",r(0)+1).attr("width",t=>r(t.value)-r(0)-1).attr("y",t=>i(t.rank)+5).attr("height",i(1)-i(0)-Wc).style("fill",t=>t.colour),Bc.selectAll("text.label").data(n,t=>t.name).enter().append("text").attr("class","label").attr("x",t=>r(t.value)-8).attr("y",t=>i(t.rank)+5+(i(1)-i(0))/2+1).attr("text-anchor","end").html(t=>t.name),Bc.selectAll("text.valueLabel").data(n,t=>t.name).enter().append("text").attr("class","valueLabel").attr("x",t=>r(t.value)+5).attr("y",t=>i(t.rank)+5+(i(1)-i(0))/2+1).text(t=>jr(",.0f")(t.lastValue));let f=Bc.append("text").attr("class","yearText").attr("x",975-Xc).attr("y",575).style("text-anchor","end").html(~~Qc).call($c,10),o=function(t,e,n){var r=new dn,i=e;return null==e?(r.restart(t,e,n),r):(e=+e,n=null==n?hn():+n,r.restart(function a(f){f+=i,r.restart(a,i+=e,n),t(f)},e,n),r)}(t=>{(n=e.filter(t=>t.year==Qc&&!isNaN(t.value)).sort((t,e)=>e.value-t.value).slice(0,12)).forEach((t,e)=>t.rank=e),r.domain([0,p(n,t=>t.value)]),Bc.select(".xAxis").transition().duration(333).ease(Hn).call(a);let c=Bc.selectAll(".bar").data(n,t=>t.name);c.enter().append("rect").attr("class",t=>`bar ${t.name.replace(/\s/g,"_")}`).attr("x",r(0)+1).attr("width",t=>r(t.value)-r(0)-1).attr("y",t=>i(13)+5).attr("height",i(1)-i(0)-Wc).style("fill",t=>t.colour).transition().duration(333).ease(Hn).attr("y",t=>i(t.rank)+5),c.transition().duration(333).ease(Hn).attr("width",t=>r(t.value)-r(0)-1).attr("y",t=>i(t.rank)+5),c.exit().transition().duration(333).ease(Hn).attr("width",t=>r(t.value)-r(0)-1).attr("y",t=>i(13)+5).remove();let s=Bc.selectAll(".label").data(n,t=>t.name);s.enter().append("text").attr("class","label").attr("x",t=>r(t.value)-8).attr("y",t=>i(13)+5+(i(1)-i(0))/2).attr("text-anchor","end").html(t=>t.name).transition().duration(333).ease(Hn).attr("y",t=>i(t.rank)+5+(i(1)-i(0))/2+1),s.transition().duration(333).ease(Hn).attr("x",t=>r(t.value)-8).attr("y",t=>i(t.rank)+5+(i(1)-i(0))/2+1),s.exit().transition().duration(333).ease(Hn).attr("x",t=>r(t.value)-8).attr("y",t=>i(13)+5).remove();let u=Bc.selectAll(".valueLabel").data(n,t=>t.name);u.enter().append("text").attr("class","valueLabel").attr("x",t=>r(t.value)+5).attr("y",t=>i(13)+5).text(t=>jr(",.0f")(t.lastValue)).transition().duration(333).ease(Hn).attr("y",t=>i(t.rank)+5+(i(1)-i(0))/2+1),u.transition().duration(333).ease(Hn).attr("x",t=>r(t.value)+5).attr("y",t=>i(t.rank)+5+(i(1)-i(0))/2+1).tween("text",function(t){let e=qe(t.lastValue,t.value);return function(t){this.textContent=jr(",")(e(t))}}),u.exit().transition().duration(333).ease(Hn).attr("x",t=>r(t.value)+5).attr("y",t=>i(13)+5).remove(),f.html(~~Qc),2018==Qc&&o.stop(),Qc=jr(".1f")(+Qc+.1)},333)})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,