!function(t){var n={};function e(r){if(n[r])return n[r].exports;var i=n[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,e),i.l=!0,i.exports}e.m=t,e.c=n,e.d=function(t,n,r){e.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:r})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,n){if(1&n&&(t=e(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(e.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var i in t)e.d(r,i,function(n){return t[n]}.bind(null,i));return r},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},e.p="",e(e.s=5)}([function(t,n,e){var r=e(1);"string"==typeof r&&(r=[[t.i,r,""]]);var i={hmr:!0,transform:void 0,insertInto:void 0};e(3)(r,i);r.locals&&(t.exports=r.locals)},function(t,n,e){(t.exports=e(2)(!1)).push([t.i,'/*body {*/\r\n/*    font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;*/\r\n/*    width: 960px;*/\r\n/*    height: 500px;*/\r\n/*    position: relative;*/\r\n/*}*/\r\n\r\n/*svg {*/\r\n/*    width: 100%;*/\r\n/*    height: 100%;*/\r\n/*    position: center;*/\r\n/*}*/\r\n\r\n/*.toolTip {*/\r\n/*    font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;*/\r\n/*    position: absolute;*/\r\n/*    display: none;*/\r\n/*    width: auto;*/\r\n/*    height: auto;*/\r\n/*    background: none repeat scroll 0 0 white;*/\r\n/*    border: 0 none;*/\r\n/*    border-radius: 8px 8px 8px 8px;*/\r\n/*    box-shadow: -3px 3px 15px #888888;*/\r\n/*    color: black;*/\r\n/*    font: 12px sans-serif;*/\r\n/*    padding: 5px;*/\r\n/*    text-align: center;*/\r\n/*}*/\r\n\r\n/*text {*/\r\n/*    font: 10px sans-serif;*/\r\n/*    !*color: white;*!*/\r\n/*}*/\r\n/*text.value {*/\r\n/*    font-size: 120%;*/\r\n/*    fill: white;*/\r\n/*}*/\r\n\r\n/*text.value-2 {*/\r\n/*    font-size: 120%;*/\r\n/*    fill: black;*/\r\n/*}*/\r\n\r\n/*.axisHorizontal path{*/\r\n/*    fill: none;*/\r\n/*}*/\r\n\r\n/*.axisHorizontal .tick line {*/\r\n/*    stroke-width: 1;*/\r\n/*    stroke: rgba(0, 0, 0, 0.2);*/\r\n/*}*/\r\n\r\n/*.bar {*/\r\n/*    fill: steelblue;*/\r\n/*    fill-opacity: .9;*/\r\n/*}*/\r\n\r\n/*.axis {*/\r\n/*    font: 10px sans-serif;*/\r\n/*}*/\r\n\r\n/*.axis path,*/\r\n/*.axis line {*/\r\n/*    fill: none;*/\r\n/*    stroke: #000;*/\r\n/*    shape-rendering: crispEdges;*/\r\n/*}*/\r\n\r\n/*.axis--y path {*/\r\n/*    display: none;*/\r\n/*}*/\r\n\r\n/*.bar {*/\r\n/*    fill: #3182bd;*/\r\n/*    fill-opacity: .9;*/\r\n/*}*/\r\n\r\n/*.wld {*/\r\n/*    fill: #9ecae1;*/\r\n/*}*/\r\n\r\n/*.chart-title {*/\r\n/*    margin-bottom: 0;*/\r\n/*}*/\r\n\r\n/*.source {*/\r\n/*    margin-top: 0;*/\r\n/*    font-size: 11px;*/\r\n/*}*/\r\ntext{\r\n    font-size: 16px;\r\n    font-family: Open Sans, sans-serif;\r\n}\r\ntext.title{\r\n    font-size: 24px;\r\n    font-weight: 500;\r\n}\r\ntext.subTitle{\r\n    font-weight: 500;\r\n    fill: #777777;\r\n}\r\ntext.caption{\r\n    font-weight: 400;\r\n    font-size: 14px;\r\n    fill: #777777;\r\n}\r\ntext.label{\r\n    font-weight: 600;\r\n}\r\ntext.yearText{\r\n    font-size: 64px;\r\n    font-weight: 700;\r\n    opacity: 0.25;\r\n}\r\n.tick text {\r\n    fill: #777777;\r\n}\r\n.xAxis .tick:nth-child(2) text {\r\n    text-anchor: start;\r\n}\r\n.tick line {\r\n    shape-rendering: CrispEdges;\r\n    stroke: #dddddd;\r\n}\r\n.tick line.origin{\r\n    stroke: #aaaaaa;\r\n}\r\npath.domain{\r\n    display: none;\r\n}',""])},function(t,n,e){"use strict";t.exports=function(t){var n=[];return n.toString=function(){return this.map(function(n){var e=function(t,n){var e=t[1]||"",r=t[3];if(!r)return e;if(n&&"function"==typeof btoa){var i=(f=r,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(f))))+" */"),a=r.sources.map(function(t){return"/*# sourceURL="+r.sourceRoot+t+" */"});return[e].concat(a).concat([i]).join("\n")}var f;return[e].join("\n")}(n,t);return n[2]?"@media "+n[2]+"{"+e+"}":e}).join("")},n.i=function(t,e){"string"==typeof t&&(t=[[null,t,""]]);for(var r={},i=0;i<this.length;i++){var a=this[i][0];null!=a&&(r[a]=!0)}for(i=0;i<t.length;i++){var f=t[i];null!=f[0]&&r[f[0]]||(e&&!f[2]?f[2]=e:e&&(f[2]="("+f[2]+") and ("+e+")"),n.push(f))}},n}},function(t,n,e){var r,i,a={},f=(r=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===i&&(i=r.apply(this,arguments)),i}),o=function(t){var n={};return function(t,e){if("function"==typeof t)return t();if(void 0===n[t]){var r=function(t,n){return n?n.querySelector(t):document.querySelector(t)}.call(this,t,e);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(t){r=null}n[t]=r}return n[t]}}(),c=null,u=0,s=[],h=e(4);function l(t,n){for(var e=0;e<t.length;e++){var r=t[e],i=a[r.id];if(i){i.refs++;for(var f=0;f<i.parts.length;f++)i.parts[f](r.parts[f]);for(;f<r.parts.length;f++)i.parts.push(y(r.parts[f],n))}else{var o=[];for(f=0;f<r.parts.length;f++)o.push(y(r.parts[f],n));a[r.id]={id:r.id,refs:1,parts:o}}}}function d(t,n){for(var e=[],r={},i=0;i<t.length;i++){var a=t[i],f=n.base?a[0]+n.base:a[0],o={css:a[1],media:a[2],sourceMap:a[3]};r[f]?r[f].parts.push(o):e.push(r[f]={id:f,parts:[o]})}return e}function p(t,n){var e=o(t.insertInto);if(!e)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=s[s.length-1];if("top"===t.insertAt)r?r.nextSibling?e.insertBefore(n,r.nextSibling):e.appendChild(n):e.insertBefore(n,e.firstChild),s.push(n);else if("bottom"===t.insertAt)e.appendChild(n);else{if("object"!=typeof t.insertAt||!t.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var i=o(t.insertAt.before,e);e.insertBefore(n,i)}}function _(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t);var n=s.indexOf(t);n>=0&&s.splice(n,1)}function b(t){var n=document.createElement("style");if(void 0===t.attrs.type&&(t.attrs.type="text/css"),void 0===t.attrs.nonce){var r=function(){0;return e.nc}();r&&(t.attrs.nonce=r)}return v(n,t.attrs),p(t,n),n}function v(t,n){Object.keys(n).forEach(function(e){t.setAttribute(e,n[e])})}function y(t,n){var e,r,i,a;if(n.transform&&t.css){if(!(a="function"==typeof n.transform?n.transform(t.css):n.transform.default(t.css)))return function(){};t.css=a}if(n.singleton){var f=u++;e=c||(c=b(n)),r=m.bind(null,e,f,!1),i=m.bind(null,e,f,!0)}else t.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(e=function(t){var n=document.createElement("link");return void 0===t.attrs.type&&(t.attrs.type="text/css"),t.attrs.rel="stylesheet",v(n,t.attrs),p(t,n),n}(n),r=function(t,n,e){var r=e.css,i=e.sourceMap,a=void 0===n.convertToAbsoluteUrls&&i;(n.convertToAbsoluteUrls||a)&&(r=h(r));i&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(i))))+" */");var f=new Blob([r],{type:"text/css"}),o=t.href;t.href=URL.createObjectURL(f),o&&URL.revokeObjectURL(o)}.bind(null,e,n),i=function(){_(e),e.href&&URL.revokeObjectURL(e.href)}):(e=b(n),r=function(t,n){var e=n.css,r=n.media;r&&t.setAttribute("media",r);if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}.bind(null,e),i=function(){_(e)});return r(t),function(n){if(n){if(n.css===t.css&&n.media===t.media&&n.sourceMap===t.sourceMap)return;r(t=n)}else i()}}t.exports=function(t,n){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(n=n||{}).attrs="object"==typeof n.attrs?n.attrs:{},n.singleton||"boolean"==typeof n.singleton||(n.singleton=f()),n.insertInto||(n.insertInto="head"),n.insertAt||(n.insertAt="bottom");var e=d(t,n);return l(e,n),function(t){for(var r=[],i=0;i<e.length;i++){var f=e[i];(o=a[f.id]).refs--,r.push(o)}t&&l(d(t,n),n);for(i=0;i<r.length;i++){var o;if(0===(o=r[i]).refs){for(var c=0;c<o.parts.length;c++)o.parts[c]();delete a[o.id]}}}};var g,x=(g=[],function(t,n){return g[t]=n,g.filter(Boolean).join("\n")});function m(t,n,e,r){var i=e?"":r.css;if(t.styleSheet)t.styleSheet.cssText=x(n,i);else{var a=document.createTextNode(i),f=t.childNodes;f[n]&&t.removeChild(f[n]),f.length?t.insertBefore(a,f[n]):t.appendChild(a)}}},function(t,n){t.exports=function(t){var n="undefined"!=typeof window&&window.location;if(!n)throw new Error("fixUrls requires window.location");if(!t||"string"!=typeof t)return t;var e=n.protocol+"//"+n.host,r=e+n.pathname.replace(/\/[^\/]*$/,"/");return t.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(t,n){var i,a=n.trim().replace(/^"(.*)"$/,function(t,n){return n}).replace(/^'(.*)'$/,function(t,n){return n});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(a)?t:(i=0===a.indexOf("//")?a:0===a.indexOf("/")?e+a:r+a.replace(/^\.\//,""),"url("+JSON.stringify(i)+")")})}},function(t,n,e){"use strict";e.r(n);e(0);var r=function(t,n){return t<n?-1:t>n?1:t>=n?0:NaN},i=function(t){var n;return 1===t.length&&(n=t,t=function(t,e){return r(n(t),e)}),{left:function(n,e,r,i){for(null==r&&(r=0),null==i&&(i=n.length);r<i;){var a=r+i>>>1;t(n[a],e)<0?r=a+1:i=a}return r},right:function(n,e,r,i){for(null==r&&(r=0),null==i&&(i=n.length);r<i;){var a=r+i>>>1;t(n[a],e)>0?i=a:r=a+1}return r}}};var a=i(r);a.right,a.left;var f=Array.prototype;f.slice,f.map,Math.sqrt(50),Math.sqrt(10),Math.sqrt(2);var o=function(t){for(var n,e,r,i=t.length,a=-1,f=0;++a<i;)f+=t[a].length;for(e=new Array(f);--i>=0;)for(n=(r=t[i]).length;--n>=0;)e[--f]=r[n];return e};Array.prototype.slice;var c={value:function(){}};function u(){for(var t,n=0,e=arguments.length,r={};n<e;++n){if(!(t=arguments[n]+"")||t in r)throw new Error("illegal type: "+t);r[t]=[]}return new s(r)}function s(t){this._=t}function h(t,n){for(var e,r=0,i=t.length;r<i;++r)if((e=t[r]).name===n)return e.value}function l(t,n,e){for(var r=0,i=t.length;r<i;++r)if(t[r].name===n){t[r]=c,t=t.slice(0,r).concat(t.slice(r+1));break}return null!=e&&t.push({name:n,value:e}),t}s.prototype=u.prototype={constructor:s,on:function(t,n){var e,r,i=this._,a=(r=i,(t+"").trim().split(/^|\s+/).map(function(t){var n="",e=t.indexOf(".");if(e>=0&&(n=t.slice(e+1),t=t.slice(0,e)),t&&!r.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:n}})),f=-1,o=a.length;if(!(arguments.length<2)){if(null!=n&&"function"!=typeof n)throw new Error("invalid callback: "+n);for(;++f<o;)if(e=(t=a[f]).type)i[e]=l(i[e],t.name,n);else if(null==n)for(e in i)i[e]=l(i[e],t.name,null);return this}for(;++f<o;)if((e=(t=a[f]).type)&&(e=h(i[e],t.name)))return e},copy:function(){var t={},n=this._;for(var e in n)t[e]=n[e].slice();return new s(t)},call:function(t,n){if((e=arguments.length-2)>0)for(var e,r,i=new Array(e),a=0;a<e;++a)i[a]=arguments[a+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(a=0,e=(r=this._[t]).length;a<e;++a)r[a].value.apply(n,i)},apply:function(t,n,e){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var r=this._[t],i=0,a=r.length;i<a;++i)r[i].value.apply(n,e)}};var d=u,p="http://www.w3.org/1999/xhtml",_={svg:"http://www.w3.org/2000/svg",xhtml:p,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"},b=function(t){var n=t+="",e=n.indexOf(":");return e>=0&&"xmlns"!==(n=t.slice(0,e))&&(t=t.slice(e+1)),_.hasOwnProperty(n)?{space:_[n],local:t}:t};var v=function(t){var n=b(t);return(n.local?function(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}:function(t){return function(){var n=this.ownerDocument,e=this.namespaceURI;return e===p&&n.documentElement.namespaceURI===p?n.createElement(t):n.createElementNS(e,t)}})(n)};function y(){}var g=function(t){return null==t?y:function(){return this.querySelector(t)}};function x(){return[]}var m=function(t){return null==t?x:function(){return this.querySelectorAll(t)}},w=function(t){return function(){return this.matches(t)}},M=function(t){return new Array(t.length)};function N(t,n){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=n}N.prototype={constructor:N,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,n){return this._parent.insertBefore(t,n)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};var T="$";function C(t,n,e,r,i,a){for(var f,o=0,c=n.length,u=a.length;o<u;++o)(f=n[o])?(f.__data__=a[o],r[o]=f):e[o]=new N(t,a[o]);for(;o<c;++o)(f=n[o])&&(i[o]=f)}function S(t,n,e,r,i,a,f){var o,c,u,s={},h=n.length,l=a.length,d=new Array(h);for(o=0;o<h;++o)(c=n[o])&&(d[o]=u=T+f.call(c,c.__data__,o,n),u in s?i[o]=c:s[u]=c);for(o=0;o<l;++o)(c=s[u=T+f.call(t,a[o],o,a)])?(r[o]=c,c.__data__=a[o],s[u]=null):e[o]=new N(t,a[o]);for(o=0;o<h;++o)(c=n[o])&&s[d[o]]===c&&(i[o]=c)}function A(t,n){return t<n?-1:t>n?1:t>=n?0:NaN}var k=function(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView};function E(t,n){return t.style.getPropertyValue(n)||k(t).getComputedStyle(t,null).getPropertyValue(n)}function U(t){return t.trim().split(/^|\s+/)}function L(t){return t.classList||new P(t)}function P(t){this._node=t,this._names=U(t.getAttribute("class")||"")}function D(t,n){for(var e=L(t),r=-1,i=n.length;++r<i;)e.add(n[r])}function R(t,n){for(var e=L(t),r=-1,i=n.length;++r<i;)e.remove(n[r])}P.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var n=this._names.indexOf(t);n>=0&&(this._names.splice(n,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};function j(){this.textContent=""}function F(){this.innerHTML=""}function O(){this.nextSibling&&this.parentNode.appendChild(this)}function Y(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function q(){return null}function z(){var t=this.parentNode;t&&t.removeChild(this)}function H(){return this.parentNode.insertBefore(this.cloneNode(!1),this.nextSibling)}function I(){return this.parentNode.insertBefore(this.cloneNode(!0),this.nextSibling)}var $={},B=null;"undefined"!=typeof document&&("onmouseenter"in document.documentElement||($={mouseenter:"mouseover",mouseleave:"mouseout"}));function X(t,n,e){return t=Z(t,n,e),function(n){var e=n.relatedTarget;e&&(e===this||8&e.compareDocumentPosition(this))||t.call(this,n)}}function Z(t,n,e){return function(r){var i=B;B=r;try{t.call(this,this.__data__,n,e)}finally{B=i}}}function V(t){return function(){var n=this.__on;if(n){for(var e,r=0,i=-1,a=n.length;r<a;++r)e=n[r],t.type&&e.type!==t.type||e.name!==t.name?n[++i]=e:this.removeEventListener(e.type,e.listener,e.capture);++i?n.length=i:delete this.__on}}}function W(t,n,e){var r=$.hasOwnProperty(t.type)?X:Z;return function(i,a,f){var o,c=this.__on,u=r(n,a,f);if(c)for(var s=0,h=c.length;s<h;++s)if((o=c[s]).type===t.type&&o.name===t.name)return this.removeEventListener(o.type,o.listener,o.capture),this.addEventListener(o.type,o.listener=u,o.capture=e),void(o.value=n);this.addEventListener(t.type,u,e),o={type:t.type,name:t.name,value:n,listener:u,capture:e},c?c.push(o):this.__on=[o]}}function J(t,n,e){var r=k(t),i=r.CustomEvent;"function"==typeof i?i=new i(n,e):(i=r.document.createEvent("Event"),e?(i.initEvent(n,e.bubbles,e.cancelable),i.detail=e.detail):i.initEvent(n,!1,!1)),t.dispatchEvent(i)}var Q=[null];function G(t,n){this._groups=t,this._parents=n}function K(){return new G([[document.documentElement]],Q)}G.prototype=K.prototype={constructor:G,select:function(t){"function"!=typeof t&&(t=g(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var a,f,o=n[i],c=o.length,u=r[i]=new Array(c),s=0;s<c;++s)(a=o[s])&&(f=t.call(a,a.__data__,s,o))&&("__data__"in a&&(f.__data__=a.__data__),u[s]=f);return new G(r,this._parents)},selectAll:function(t){"function"!=typeof t&&(t=m(t));for(var n=this._groups,e=n.length,r=[],i=[],a=0;a<e;++a)for(var f,o=n[a],c=o.length,u=0;u<c;++u)(f=o[u])&&(r.push(t.call(f,f.__data__,u,o)),i.push(f));return new G(r,i)},filter:function(t){"function"!=typeof t&&(t=w(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var a,f=n[i],o=f.length,c=r[i]=[],u=0;u<o;++u)(a=f[u])&&t.call(a,a.__data__,u,f)&&c.push(a);return new G(r,this._parents)},data:function(t,n){if(!t)return p=new Array(this.size()),s=-1,this.each(function(t){p[++s]=t}),p;var e,r=n?S:C,i=this._parents,a=this._groups;"function"!=typeof t&&(e=t,t=function(){return e});for(var f=a.length,o=new Array(f),c=new Array(f),u=new Array(f),s=0;s<f;++s){var h=i[s],l=a[s],d=l.length,p=t.call(h,h&&h.__data__,s,i),_=p.length,b=c[s]=new Array(_),v=o[s]=new Array(_);r(h,l,b,v,u[s]=new Array(d),p,n);for(var y,g,x=0,m=0;x<_;++x)if(y=b[x]){for(x>=m&&(m=x+1);!(g=v[m])&&++m<_;);y._next=g||null}}return(o=new G(o,i))._enter=c,o._exit=u,o},enter:function(){return new G(this._enter||this._groups.map(M),this._parents)},exit:function(){return new G(this._exit||this._groups.map(M),this._parents)},join:function(t,n,e){var r=this.enter(),i=this,a=this.exit();return r="function"==typeof t?t(r):r.append(t+""),null!=n&&(i=n(i)),null==e?a.remove():e(a),r&&i?r.merge(i).order():i},merge:function(t){for(var n=this._groups,e=t._groups,r=n.length,i=e.length,a=Math.min(r,i),f=new Array(r),o=0;o<a;++o)for(var c,u=n[o],s=e[o],h=u.length,l=f[o]=new Array(h),d=0;d<h;++d)(c=u[d]||s[d])&&(l[d]=c);for(;o<r;++o)f[o]=n[o];return new G(f,this._parents)},order:function(){for(var t=this._groups,n=-1,e=t.length;++n<e;)for(var r,i=t[n],a=i.length-1,f=i[a];--a>=0;)(r=i[a])&&(f&&4^r.compareDocumentPosition(f)&&f.parentNode.insertBefore(r,f),f=r);return this},sort:function(t){function n(n,e){return n&&e?t(n.__data__,e.__data__):!n-!e}t||(t=A);for(var e=this._groups,r=e.length,i=new Array(r),a=0;a<r;++a){for(var f,o=e[a],c=o.length,u=i[a]=new Array(c),s=0;s<c;++s)(f=o[s])&&(u[s]=f);u.sort(n)}return new G(i,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){var t=new Array(this.size()),n=-1;return this.each(function(){t[++n]=this}),t},node:function(){for(var t=this._groups,n=0,e=t.length;n<e;++n)for(var r=t[n],i=0,a=r.length;i<a;++i){var f=r[i];if(f)return f}return null},size:function(){var t=0;return this.each(function(){++t}),t},empty:function(){return!this.node()},each:function(t){for(var n=this._groups,e=0,r=n.length;e<r;++e)for(var i,a=n[e],f=0,o=a.length;f<o;++f)(i=a[f])&&t.call(i,i.__data__,f,a);return this},attr:function(t,n){var e=b(t);if(arguments.length<2){var r=this.node();return e.local?r.getAttributeNS(e.space,e.local):r.getAttribute(e)}return this.each((null==n?e.local?function(t){return function(){this.removeAttributeNS(t.space,t.local)}}:function(t){return function(){this.removeAttribute(t)}}:"function"==typeof n?e.local?function(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,e)}}:function(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttribute(t):this.setAttribute(t,e)}}:e.local?function(t,n){return function(){this.setAttributeNS(t.space,t.local,n)}}:function(t,n){return function(){this.setAttribute(t,n)}})(e,n))},style:function(t,n,e){return arguments.length>1?this.each((null==n?function(t){return function(){this.style.removeProperty(t)}}:"function"==typeof n?function(t,n,e){return function(){var r=n.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,e)}}:function(t,n,e){return function(){this.style.setProperty(t,n,e)}})(t,n,null==e?"":e)):E(this.node(),t)},property:function(t,n){return arguments.length>1?this.each((null==n?function(t){return function(){delete this[t]}}:"function"==typeof n?function(t,n){return function(){var e=n.apply(this,arguments);null==e?delete this[t]:this[t]=e}}:function(t,n){return function(){this[t]=n}})(t,n)):this.node()[t]},classed:function(t,n){var e=U(t+"");if(arguments.length<2){for(var r=L(this.node()),i=-1,a=e.length;++i<a;)if(!r.contains(e[i]))return!1;return!0}return this.each(("function"==typeof n?function(t,n){return function(){(n.apply(this,arguments)?D:R)(this,t)}}:n?function(t){return function(){D(this,t)}}:function(t){return function(){R(this,t)}})(e,n))},text:function(t){return arguments.length?this.each(null==t?j:("function"==typeof t?function(t){return function(){var n=t.apply(this,arguments);this.textContent=null==n?"":n}}:function(t){return function(){this.textContent=t}})(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?F:("function"==typeof t?function(t){return function(){var n=t.apply(this,arguments);this.innerHTML=null==n?"":n}}:function(t){return function(){this.innerHTML=t}})(t)):this.node().innerHTML},raise:function(){return this.each(O)},lower:function(){return this.each(Y)},append:function(t){var n="function"==typeof t?t:v(t);return this.select(function(){return this.appendChild(n.apply(this,arguments))})},insert:function(t,n){var e="function"==typeof t?t:v(t),r=null==n?q:"function"==typeof n?n:g(n);return this.select(function(){return this.insertBefore(e.apply(this,arguments),r.apply(this,arguments)||null)})},remove:function(){return this.each(z)},clone:function(t){return this.select(t?I:H)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,n,e){var r,i,a=function(t){return t.trim().split(/^|\s+/).map(function(t){var n="",e=t.indexOf(".");return e>=0&&(n=t.slice(e+1),t=t.slice(0,e)),{type:t,name:n}})}(t+""),f=a.length;if(!(arguments.length<2)){for(o=n?W:V,null==e&&(e=!1),r=0;r<f;++r)this.each(o(a[r],n,e));return this}var o=this.node().__on;if(o)for(var c,u=0,s=o.length;u<s;++u)for(r=0,c=o[u];r<f;++r)if((i=a[r]).type===c.type&&i.name===c.name)return c.value},dispatch:function(t,n){return this.each(("function"==typeof n?function(t,n){return function(){return J(this,t,n.apply(this,arguments))}}:function(t,n){return function(){return J(this,t,n)}})(t,n))}};var tt=K,nt=0;function et(){this._="@"+(++nt).toString(36)}et.prototype=function(){return new et}.prototype={constructor:et,get:function(t){for(var n=this._;!(n in t);)if(!(t=t.parentNode))return;return t[n]},set:function(t,n){return t[this._]=n},remove:function(t){return this._ in t&&delete t[this._]},toString:function(){return this._}};function rt(t,n,e,r,i,a,f,o,c,u){this.target=t,this.type=n,this.subject=e,this.identifier=r,this.active=i,this.x=a,this.y=f,this.dx=o,this.dy=c,this._=u}rt.prototype.on=function(){var t=this._.on.apply(this._,arguments);return t===this._?this:t};var it=function(t,n,e){t.prototype=n.prototype=e,e.constructor=t};function at(t,n){var e=Object.create(t.prototype);for(var r in n)e[r]=n[r];return e}function ft(){}var ot="\\s*([+-]?\\d+)\\s*",ct="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",ut="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",st=/^#([0-9a-f]{3})$/,ht=/^#([0-9a-f]{6})$/,lt=new RegExp("^rgb\\("+[ot,ot,ot]+"\\)$"),dt=new RegExp("^rgb\\("+[ut,ut,ut]+"\\)$"),pt=new RegExp("^rgba\\("+[ot,ot,ot,ct]+"\\)$"),_t=new RegExp("^rgba\\("+[ut,ut,ut,ct]+"\\)$"),bt=new RegExp("^hsl\\("+[ct,ut,ut]+"\\)$"),vt=new RegExp("^hsla\\("+[ct,ut,ut,ct]+"\\)$"),yt={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function gt(t){var n;return t=(t+"").trim().toLowerCase(),(n=st.exec(t))?new Nt((n=parseInt(n[1],16))>>8&15|n>>4&240,n>>4&15|240&n,(15&n)<<4|15&n,1):(n=ht.exec(t))?xt(parseInt(n[1],16)):(n=lt.exec(t))?new Nt(n[1],n[2],n[3],1):(n=dt.exec(t))?new Nt(255*n[1]/100,255*n[2]/100,255*n[3]/100,1):(n=pt.exec(t))?mt(n[1],n[2],n[3],n[4]):(n=_t.exec(t))?mt(255*n[1]/100,255*n[2]/100,255*n[3]/100,n[4]):(n=bt.exec(t))?Ct(n[1],n[2]/100,n[3]/100,1):(n=vt.exec(t))?Ct(n[1],n[2]/100,n[3]/100,n[4]):yt.hasOwnProperty(t)?xt(yt[t]):"transparent"===t?new Nt(NaN,NaN,NaN,0):null}function xt(t){return new Nt(t>>16&255,t>>8&255,255&t,1)}function mt(t,n,e,r){return r<=0&&(t=n=e=NaN),new Nt(t,n,e,r)}function wt(t){return t instanceof ft||(t=gt(t)),t?new Nt((t=t.rgb()).r,t.g,t.b,t.opacity):new Nt}function Mt(t,n,e,r){return 1===arguments.length?wt(t):new Nt(t,n,e,null==r?1:r)}function Nt(t,n,e,r){this.r=+t,this.g=+n,this.b=+e,this.opacity=+r}function Tt(t){return((t=Math.max(0,Math.min(255,Math.round(t)||0)))<16?"0":"")+t.toString(16)}function Ct(t,n,e,r){return r<=0?t=n=e=NaN:e<=0||e>=1?t=n=NaN:n<=0&&(t=NaN),new At(t,n,e,r)}function St(t,n,e,r){return 1===arguments.length?function(t){if(t instanceof At)return new At(t.h,t.s,t.l,t.opacity);if(t instanceof ft||(t=gt(t)),!t)return new At;if(t instanceof At)return t;var n=(t=t.rgb()).r/255,e=t.g/255,r=t.b/255,i=Math.min(n,e,r),a=Math.max(n,e,r),f=NaN,o=a-i,c=(a+i)/2;return o?(f=n===a?(e-r)/o+6*(e<r):e===a?(r-n)/o+2:(n-e)/o+4,o/=c<.5?a+i:2-a-i,f*=60):o=c>0&&c<1?0:f,new At(f,o,c,t.opacity)}(t):new At(t,n,e,null==r?1:r)}function At(t,n,e,r){this.h=+t,this.s=+n,this.l=+e,this.opacity=+r}function kt(t,n,e){return 255*(t<60?n+(e-n)*t/60:t<180?e:t<240?n+(e-n)*(240-t)/60:n)}it(ft,gt,{displayable:function(){return this.rgb().displayable()},hex:function(){return this.rgb().hex()},toString:function(){return this.rgb()+""}}),it(Nt,Mt,at(ft,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new Nt(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new Nt(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return 0<=this.r&&this.r<=255&&0<=this.g&&this.g<=255&&0<=this.b&&this.b<=255&&0<=this.opacity&&this.opacity<=1},hex:function(){return"#"+Tt(this.r)+Tt(this.g)+Tt(this.b)},toString:function(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}})),it(At,St,at(ft,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new At(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new At(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),n=isNaN(t)||isNaN(this.s)?0:this.s,e=this.l,r=e+(e<.5?e:1-e)*n,i=2*e-r;return new Nt(kt(t>=240?t-240:t+120,i,r),kt(t,i,r),kt(t<120?t+240:t-120,i,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1}}));var Et=Math.PI/180,Ut=180/Math.PI,Lt=.96422,Pt=1,Dt=.82521,Rt=4/29,jt=6/29,Ft=3*jt*jt,Ot=jt*jt*jt;function Yt(t){if(t instanceof zt)return new zt(t.l,t.a,t.b,t.opacity);if(t instanceof Vt){if(isNaN(t.h))return new zt(t.l,0,0,t.opacity);var n=t.h*Et;return new zt(t.l,Math.cos(n)*t.c,Math.sin(n)*t.c,t.opacity)}t instanceof Nt||(t=wt(t));var e,r,i=Bt(t.r),a=Bt(t.g),f=Bt(t.b),o=Ht((.2225045*i+.7168786*a+.0606169*f)/Pt);return i===a&&a===f?e=r=o:(e=Ht((.4360747*i+.3850649*a+.1430804*f)/Lt),r=Ht((.0139322*i+.0971045*a+.7141733*f)/Dt)),new zt(116*o-16,500*(e-o),200*(o-r),t.opacity)}function qt(t,n,e,r){return 1===arguments.length?Yt(t):new zt(t,n,e,null==r?1:r)}function zt(t,n,e,r){this.l=+t,this.a=+n,this.b=+e,this.opacity=+r}function Ht(t){return t>Ot?Math.pow(t,1/3):t/Ft+Rt}function It(t){return t>jt?t*t*t:Ft*(t-Rt)}function $t(t){return 255*(t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055)}function Bt(t){return(t/=255)<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4)}function Xt(t){if(t instanceof Vt)return new Vt(t.h,t.c,t.l,t.opacity);if(t instanceof zt||(t=Yt(t)),0===t.a&&0===t.b)return new Vt(NaN,0,t.l,t.opacity);var n=Math.atan2(t.b,t.a)*Ut;return new Vt(n<0?n+360:n,Math.sqrt(t.a*t.a+t.b*t.b),t.l,t.opacity)}function Zt(t,n,e,r){return 1===arguments.length?Xt(t):new Vt(t,n,e,null==r?1:r)}function Vt(t,n,e,r){this.h=+t,this.c=+n,this.l=+e,this.opacity=+r}it(zt,qt,at(ft,{brighter:function(t){return new zt(this.l+18*(null==t?1:t),this.a,this.b,this.opacity)},darker:function(t){return new zt(this.l-18*(null==t?1:t),this.a,this.b,this.opacity)},rgb:function(){var t=(this.l+16)/116,n=isNaN(this.a)?t:t+this.a/500,e=isNaN(this.b)?t:t-this.b/200;return new Nt($t(3.1338561*(n=Lt*It(n))-1.6168667*(t=Pt*It(t))-.4906146*(e=Dt*It(e))),$t(-.9787684*n+1.9161415*t+.033454*e),$t(.0719453*n-.2289914*t+1.4052427*e),this.opacity)}})),it(Vt,Zt,at(ft,{brighter:function(t){return new Vt(this.h,this.c,this.l+18*(null==t?1:t),this.opacity)},darker:function(t){return new Vt(this.h,this.c,this.l-18*(null==t?1:t),this.opacity)},rgb:function(){return Yt(this).rgb()}}));var Wt=-.29227,Jt=-.90649,Qt=1.97294,Gt=Qt*Jt,Kt=1.78277*Qt,tn=1.78277*Wt- -.14861*Jt;function nn(t,n,e,r){return 1===arguments.length?function(t){if(t instanceof en)return new en(t.h,t.s,t.l,t.opacity);t instanceof Nt||(t=wt(t));var n=t.r/255,e=t.g/255,r=t.b/255,i=(tn*r+Gt*n-Kt*e)/(tn+Gt-Kt),a=r-i,f=(Qt*(e-i)-Wt*a)/Jt,o=Math.sqrt(f*f+a*a)/(Qt*i*(1-i)),c=o?Math.atan2(f,a)*Ut-120:NaN;return new en(c<0?c+360:c,o,i,t.opacity)}(t):new en(t,n,e,null==r?1:r)}function en(t,n,e,r){this.h=+t,this.s=+n,this.l=+e,this.opacity=+r}function rn(t,n,e,r,i){var a=t*t,f=a*t;return((1-3*t+3*a-f)*n+(4-6*a+3*f)*e+(1+3*t+3*a-3*f)*r+f*i)/6}it(en,nn,at(ft,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new en(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new en(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=isNaN(this.h)?0:(this.h+120)*Et,n=+this.l,e=isNaN(this.s)?0:this.s*n*(1-n),r=Math.cos(t),i=Math.sin(t);return new Nt(255*(n+e*(-.14861*r+1.78277*i)),255*(n+e*(Wt*r+Jt*i)),255*(n+e*(Qt*r)),this.opacity)}}));var an=function(t){return function(){return t}};function fn(t,n){return function(e){return t+e*n}}function on(t,n){var e=n-t;return e?fn(t,e>180||e<-180?e-360*Math.round(e/360):e):an(isNaN(t)?n:t)}function cn(t){return 1==(t=+t)?un:function(n,e){return e-n?function(t,n,e){return t=Math.pow(t,e),n=Math.pow(n,e)-t,e=1/e,function(r){return Math.pow(t+r*n,e)}}(n,e,t):an(isNaN(n)?e:n)}}function un(t,n){var e=n-t;return e?fn(t,e):an(isNaN(t)?n:t)}var sn=function t(n){var e=cn(n);function r(t,n){var r=e((t=Mt(t)).r,(n=Mt(n)).r),i=e(t.g,n.g),a=e(t.b,n.b),f=un(t.opacity,n.opacity);return function(n){return t.r=r(n),t.g=i(n),t.b=a(n),t.opacity=f(n),t+""}}return r.gamma=t,r}(1);function hn(t){return function(n){var e,r,i=n.length,a=new Array(i),f=new Array(i),o=new Array(i);for(e=0;e<i;++e)r=Mt(n[e]),a[e]=r.r||0,f[e]=r.g||0,o[e]=r.b||0;return a=t(a),f=t(f),o=t(o),r.opacity=1,function(t){return r.r=a(t),r.g=f(t),r.b=o(t),r+""}}}var ln=hn(function(t){var n=t.length-1;return function(e){var r=e<=0?e=0:e>=1?(e=1,n-1):Math.floor(e*n),i=t[r],a=t[r+1],f=r>0?t[r-1]:2*i-a,o=r<n-1?t[r+2]:2*a-i;return rn((e-r/n)*n,f,i,a,o)}}),dn=(hn(function(t){var n=t.length;return function(e){var r=Math.floor(((e%=1)<0?++e:e)*n),i=t[(r+n-1)%n],a=t[r%n],f=t[(r+1)%n],o=t[(r+2)%n];return rn((e-r/n)*n,i,a,f,o)}}),function(t,n){return n-=t=+t,function(e){return t+n*e}}),pn=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,_n=new RegExp(pn.source,"g");var bn,vn,yn,gn,xn=function(t,n){var e,r,i,a=pn.lastIndex=_n.lastIndex=0,f=-1,o=[],c=[];for(t+="",n+="";(e=pn.exec(t))&&(r=_n.exec(n));)(i=r.index)>a&&(i=n.slice(a,i),o[f]?o[f]+=i:o[++f]=i),(e=e[0])===(r=r[0])?o[f]?o[f]+=r:o[++f]=r:(o[++f]=null,c.push({i:f,x:dn(e,r)})),a=_n.lastIndex;return a<n.length&&(i=n.slice(a),o[f]?o[f]+=i:o[++f]=i),o.length<2?c[0]?function(t){return function(n){return t(n)+""}}(c[0].x):function(t){return function(){return t}}(n):(n=c.length,function(t){for(var e,r=0;r<n;++r)o[(e=c[r]).i]=e.x(t);return o.join("")})},mn=180/Math.PI,wn={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1},Mn=function(t,n,e,r,i,a){var f,o,c;return(f=Math.sqrt(t*t+n*n))&&(t/=f,n/=f),(c=t*e+n*r)&&(e-=t*c,r-=n*c),(o=Math.sqrt(e*e+r*r))&&(e/=o,r/=o,c/=o),t*r<n*e&&(t=-t,n=-n,c=-c,f=-f),{translateX:i,translateY:a,rotate:Math.atan2(n,t)*mn,skewX:Math.atan(c)*mn,scaleX:f,scaleY:o}};function Nn(t,n,e,r){function i(t){return t.length?t.pop()+" ":""}return function(a,f){var o=[],c=[];return a=t(a),f=t(f),function(t,r,i,a,f,o){if(t!==i||r!==a){var c=f.push("translate(",null,n,null,e);o.push({i:c-4,x:dn(t,i)},{i:c-2,x:dn(r,a)})}else(i||a)&&f.push("translate("+i+n+a+e)}(a.translateX,a.translateY,f.translateX,f.translateY,o,c),function(t,n,e,a){t!==n?(t-n>180?n+=360:n-t>180&&(t+=360),a.push({i:e.push(i(e)+"rotate(",null,r)-2,x:dn(t,n)})):n&&e.push(i(e)+"rotate("+n+r)}(a.rotate,f.rotate,o,c),function(t,n,e,a){t!==n?a.push({i:e.push(i(e)+"skewX(",null,r)-2,x:dn(t,n)}):n&&e.push(i(e)+"skewX("+n+r)}(a.skewX,f.skewX,o,c),function(t,n,e,r,a,f){if(t!==e||n!==r){var o=a.push(i(a)+"scale(",null,",",null,")");f.push({i:o-4,x:dn(t,e)},{i:o-2,x:dn(n,r)})}else 1===e&&1===r||a.push(i(a)+"scale("+e+","+r+")")}(a.scaleX,a.scaleY,f.scaleX,f.scaleY,o,c),a=f=null,function(t){for(var n,e=-1,r=c.length;++e<r;)o[(n=c[e]).i]=n.x(t);return o.join("")}}}var Tn=Nn(function(t){return"none"===t?wn:(bn||(bn=document.createElement("DIV"),vn=document.documentElement,yn=document.defaultView),bn.style.transform=t,t=yn.getComputedStyle(vn.appendChild(bn),null).getPropertyValue("transform"),vn.removeChild(bn),t=t.slice(7,-1).split(","),Mn(+t[0],+t[1],+t[2],+t[3],+t[4],+t[5]))},"px, ","px)","deg)"),Cn=Nn(function(t){return null==t?wn:(gn||(gn=document.createElementNS("http://www.w3.org/2000/svg","g")),gn.setAttribute("transform",t),(t=gn.transform.baseVal.consolidate())?(t=t.matrix,Mn(t.a,t.b,t.c,t.d,t.e,t.f)):wn)},", ",")",")");Math.SQRT2;function Sn(t){return function(n,e){var r=t((n=St(n)).h,(e=St(e)).h),i=un(n.s,e.s),a=un(n.l,e.l),f=un(n.opacity,e.opacity);return function(t){return n.h=r(t),n.s=i(t),n.l=a(t),n.opacity=f(t),n+""}}}Sn(on),Sn(un);function An(t){return function(n,e){var r=t((n=Zt(n)).h,(e=Zt(e)).h),i=un(n.c,e.c),a=un(n.l,e.l),f=un(n.opacity,e.opacity);return function(t){return n.h=r(t),n.c=i(t),n.l=a(t),n.opacity=f(t),n+""}}}An(on),An(un);function kn(t){return function n(e){function r(n,r){var i=t((n=nn(n)).h,(r=nn(r)).h),a=un(n.s,r.s),f=un(n.l,r.l),o=un(n.opacity,r.opacity);return function(t){return n.h=i(t),n.s=a(t),n.l=f(Math.pow(t,e)),n.opacity=o(t),n+""}}return e=+e,r.gamma=n,r}(1)}kn(on);var En=kn(un);var Un,Ln,Pn=0,Dn=0,Rn=0,jn=1e3,Fn=0,On=0,Yn=0,qn="object"==typeof performance&&performance.now?performance:Date,zn="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function Hn(){return On||(zn(In),On=qn.now()+Yn)}function In(){On=0}function $n(){this._call=this._time=this._next=null}function Bn(t,n,e){var r=new $n;return r.restart(t,n,e),r}function Xn(){On=(Fn=qn.now())+Yn,Pn=Dn=0;try{!function(){Hn(),++Pn;for(var t,n=Un;n;)(t=On-n._time)>=0&&n._call.call(null,t),n=n._next;--Pn}()}finally{Pn=0,function(){var t,n,e=Un,r=1/0;for(;e;)e._call?(r>e._time&&(r=e._time),t=e,e=e._next):(n=e._next,e._next=null,e=t?t._next=n:Un=n);Ln=t,Vn(r)}(),On=0}}function Zn(){var t=qn.now(),n=t-Fn;n>jn&&(Yn-=n,Fn=t)}function Vn(t){Pn||(Dn&&(Dn=clearTimeout(Dn)),t-On>24?(t<1/0&&(Dn=setTimeout(Xn,t-qn.now()-Yn)),Rn&&(Rn=clearInterval(Rn))):(Rn||(Fn=qn.now(),Rn=setInterval(Zn,jn)),Pn=1,zn(Xn)))}$n.prototype=Bn.prototype={constructor:$n,restart:function(t,n,e){if("function"!=typeof t)throw new TypeError("callback is not a function");e=(null==e?Hn():+e)+(null==n?0:+n),this._next||Ln===this||(Ln?Ln._next=this:Un=this,Ln=this),this._call=t,this._time=e,Vn()},stop:function(){this._call&&(this._call=null,this._time=1/0,Vn())}};var Wn=function(t,n,e){var r=new $n;return n=null==n?0:+n,r.restart(function(e){r.stop(),t(e+n)},n,e),r},Jn=d("start","end","cancel","interrupt"),Qn=[],Gn=0,Kn=1,te=2,ne=3,ee=4,re=5,ie=6,ae=function(t,n,e,r,i,a){var f=t.__transition;if(f){if(e in f)return}else t.__transition={};!function(t,n,e){var r,i=t.__transition;function a(c){var u,s,h,l;if(e.state!==Kn)return o();for(u in i)if((l=i[u]).name===e.name){if(l.state===ne)return Wn(a);l.state===ee?(l.state=ie,l.timer.stop(),l.on.call("interrupt",t,t.__data__,l.index,l.group),delete i[u]):+u<n&&(l.state=ie,l.timer.stop(),l.on.call("cancel",t,t.__data__,l.index,l.group),delete i[u])}if(Wn(function(){e.state===ne&&(e.state=ee,e.timer.restart(f,e.delay,e.time),f(c))}),e.state=te,e.on.call("start",t,t.__data__,e.index,e.group),e.state===te){for(e.state=ne,r=new Array(h=e.tween.length),u=0,s=-1;u<h;++u)(l=e.tween[u].value.call(t,t.__data__,e.index,e.group))&&(r[++s]=l);r.length=s+1}}function f(n){for(var i=n<e.duration?e.ease.call(null,n/e.duration):(e.timer.restart(o),e.state=re,1),a=-1,f=r.length;++a<f;)r[a].call(t,i);e.state===re&&(e.on.call("end",t,t.__data__,e.index,e.group),o())}function o(){for(var r in e.state=ie,e.timer.stop(),delete i[n],i)return;delete t.__transition}i[n]=e,e.timer=Bn(function(t){e.state=Kn,e.timer.restart(a,e.delay,e.time),e.delay<=t&&a(t-e.delay)},0,e.time)}(t,e,{name:n,index:r,group:i,on:Jn,tween:Qn,time:a.time,delay:a.delay,duration:a.duration,ease:a.ease,timer:null,state:Gn})};function fe(t,n){var e=ce(t,n);if(e.state>Gn)throw new Error("too late; already scheduled");return e}function oe(t,n){var e=ce(t,n);if(e.state>ne)throw new Error("too late; already running");return e}function ce(t,n){var e=t.__transition;if(!e||!(e=e[n]))throw new Error("transition not found");return e}var ue=function(t,n){var e,r,i,a=t.__transition,f=!0;if(a){for(i in n=null==n?null:n+"",a)(e=a[i]).name===n?(r=e.state>te&&e.state<re,e.state=ie,e.timer.stop(),e.on.call(r?"interrupt":"cancel",t,t.__data__,e.index,e.group),delete a[i]):f=!1;f&&delete t.__transition}};function se(t,n,e){var r=t._id;return t.each(function(){var t=oe(this,r);(t.value||(t.value={}))[n]=e.apply(this,arguments)}),function(t){return ce(t,r).value[n]}}var he=function(t,n){var e;return("number"==typeof n?dn:n instanceof gt?sn:(e=gt(n))?(n=e,sn):xn)(t,n)};var le=tt.prototype.constructor;function de(t){return function(){this.style.removeProperty(t)}}var pe=0;function _e(t,n,e,r){this._groups=t,this._parents=n,this._name=e,this._id=r}function be(){return++pe}var ve=tt.prototype;_e.prototype=function(t){return tt().transition(t)}.prototype={constructor:_e,select:function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=g(t));for(var r=this._groups,i=r.length,a=new Array(i),f=0;f<i;++f)for(var o,c,u=r[f],s=u.length,h=a[f]=new Array(s),l=0;l<s;++l)(o=u[l])&&(c=t.call(o,o.__data__,l,u))&&("__data__"in o&&(c.__data__=o.__data__),h[l]=c,ae(h[l],n,e,l,h,ce(o,e)));return new _e(a,this._parents,n,e)},selectAll:function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=m(t));for(var r=this._groups,i=r.length,a=[],f=[],o=0;o<i;++o)for(var c,u=r[o],s=u.length,h=0;h<s;++h)if(c=u[h]){for(var l,d=t.call(c,c.__data__,h,u),p=ce(c,e),_=0,b=d.length;_<b;++_)(l=d[_])&&ae(l,n,e,_,d,p);a.push(d),f.push(c)}return new _e(a,f,n,e)},filter:function(t){"function"!=typeof t&&(t=w(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var a,f=n[i],o=f.length,c=r[i]=[],u=0;u<o;++u)(a=f[u])&&t.call(a,a.__data__,u,f)&&c.push(a);return new _e(r,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var n=this._groups,e=t._groups,r=n.length,i=e.length,a=Math.min(r,i),f=new Array(r),o=0;o<a;++o)for(var c,u=n[o],s=e[o],h=u.length,l=f[o]=new Array(h),d=0;d<h;++d)(c=u[d]||s[d])&&(l[d]=c);for(;o<r;++o)f[o]=n[o];return new _e(f,this._parents,this._name,this._id)},selection:function(){return new le(this._groups,this._parents)},transition:function(){for(var t=this._name,n=this._id,e=be(),r=this._groups,i=r.length,a=0;a<i;++a)for(var f,o=r[a],c=o.length,u=0;u<c;++u)if(f=o[u]){var s=ce(f,n);ae(f,t,e,u,o,{time:s.time+s.delay+s.duration,delay:0,duration:s.duration,ease:s.ease})}return new _e(r,this._parents,t,e)},call:ve.call,nodes:ve.nodes,node:ve.node,size:ve.size,empty:ve.empty,each:ve.each,on:function(t,n){var e=this._id;return arguments.length<2?ce(this.node(),e).on.on(t):this.each(function(t,n,e){var r,i,a=function(t){return(t+"").trim().split(/^|\s+/).every(function(t){var n=t.indexOf(".");return n>=0&&(t=t.slice(0,n)),!t||"start"===t})}(n)?fe:oe;return function(){var f=a(this,t),o=f.on;o!==r&&(i=(r=o).copy()).on(n,e),f.on=i}}(e,t,n))},attr:function(t,n){var e=b(t),r="transform"===e?Cn:he;return this.attrTween(t,"function"==typeof n?(e.local?function(t,n,e){var r,i,a;return function(){var f,o,c=e(this);if(null!=c)return(f=this.getAttributeNS(t.space,t.local))===(o=c+"")?null:f===r&&o===i?a:(i=o,a=n(r=f,c));this.removeAttributeNS(t.space,t.local)}}:function(t,n,e){var r,i,a;return function(){var f,o,c=e(this);if(null!=c)return(f=this.getAttribute(t))===(o=c+"")?null:f===r&&o===i?a:(i=o,a=n(r=f,c));this.removeAttribute(t)}})(e,r,se(this,"attr."+t,n)):null==n?(e.local?function(t){return function(){this.removeAttributeNS(t.space,t.local)}}:function(t){return function(){this.removeAttribute(t)}})(e):(e.local?function(t,n,e){var r,i,a=e+"";return function(){var f=this.getAttributeNS(t.space,t.local);return f===a?null:f===r?i:i=n(r=f,e)}}:function(t,n,e){var r,i,a=e+"";return function(){var f=this.getAttribute(t);return f===a?null:f===r?i:i=n(r=f,e)}})(e,r,n))},attrTween:function(t,n){var e="attr."+t;if(arguments.length<2)return(e=this.tween(e))&&e._value;if(null==n)return this.tween(e,null);if("function"!=typeof n)throw new Error;var r=b(t);return this.tween(e,(r.local?function(t,n){var e,r;function i(){var i=n.apply(this,arguments);return i!==r&&(e=(r=i)&&function(t,n){return function(e){this.setAttributeNS(t.space,t.local,n(e))}}(t,i)),e}return i._value=n,i}:function(t,n){var e,r;function i(){var i=n.apply(this,arguments);return i!==r&&(e=(r=i)&&function(t,n){return function(e){this.setAttribute(t,n(e))}}(t,i)),e}return i._value=n,i})(r,n))},style:function(t,n,e){var r="transform"==(t+="")?Tn:he;return null==n?this.styleTween(t,function(t,n){var e,r,i;return function(){var a=E(this,t),f=(this.style.removeProperty(t),E(this,t));return a===f?null:a===e&&f===r?i:i=n(e=a,r=f)}}(t,r)).on("end.style."+t,de(t)):"function"==typeof n?this.styleTween(t,function(t,n,e){var r,i,a;return function(){var f=E(this,t),o=e(this),c=o+"";return null==o&&(this.style.removeProperty(t),c=o=E(this,t)),f===c?null:f===r&&c===i?a:(i=c,a=n(r=f,o))}}(t,r,se(this,"style."+t,n))).each(function(t,n){var e,r,i,a,f="style."+n,o="end."+f;return function(){var c=oe(this,t),u=c.on,s=null==c.value[f]?a||(a=de(n)):void 0;u===e&&i===s||(r=(e=u).copy()).on(o,i=s),c.on=r}}(this._id,t)):this.styleTween(t,function(t,n,e){var r,i,a=e+"";return function(){var f=E(this,t);return f===a?null:f===r?i:i=n(r=f,e)}}(t,r,n),e).on("end.style."+t,null)},styleTween:function(t,n,e){var r="style."+(t+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==n)return this.tween(r,null);if("function"!=typeof n)throw new Error;return this.tween(r,function(t,n,e){var r,i;function a(){var a=n.apply(this,arguments);return a!==i&&(r=(i=a)&&function(t,n,e){return function(r){this.style.setProperty(t,n(r),e)}}(t,a,e)),r}return a._value=n,a}(t,n,null==e?"":e))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var n=t(this);this.textContent=null==n?"":n}}(se(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},remove:function(){return this.on("end.remove",(t=this._id,function(){var n=this.parentNode;for(var e in this.__transition)if(+e!==t)return;n&&n.removeChild(this)}));var t},tween:function(t,n){var e=this._id;if(t+="",arguments.length<2){for(var r,i=ce(this.node(),e).tween,a=0,f=i.length;a<f;++a)if((r=i[a]).name===t)return r.value;return null}return this.each((null==n?function(t,n){var e,r;return function(){var i=oe(this,t),a=i.tween;if(a!==e)for(var f=0,o=(r=e=a).length;f<o;++f)if(r[f].name===n){(r=r.slice()).splice(f,1);break}i.tween=r}}:function(t,n,e){var r,i;if("function"!=typeof e)throw new Error;return function(){var a=oe(this,t),f=a.tween;if(f!==r){i=(r=f).slice();for(var o={name:n,value:e},c=0,u=i.length;c<u;++c)if(i[c].name===n){i[c]=o;break}c===u&&i.push(o)}a.tween=i}})(e,t,n))},delay:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?function(t,n){return function(){fe(this,t).delay=+n.apply(this,arguments)}}:function(t,n){return n=+n,function(){fe(this,t).delay=n}})(n,t)):ce(this.node(),n).delay},duration:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?function(t,n){return function(){oe(this,t).duration=+n.apply(this,arguments)}}:function(t,n){return n=+n,function(){oe(this,t).duration=n}})(n,t)):ce(this.node(),n).duration},ease:function(t){var n=this._id;return arguments.length?this.each(function(t,n){if("function"!=typeof n)throw new Error;return function(){oe(this,t).ease=n}}(n,t)):ce(this.node(),n).ease},end:function(){var t,n,e=this,r=e._id,i=e.size();return new Promise(function(a,f){var o={value:f},c={value:function(){0==--i&&a()}};e.each(function(){var e=oe(this,r),i=e.on;i!==t&&((n=(t=i).copy())._.cancel.push(o),n._.interrupt.push(o),n._.end.push(c)),e.on=n})})}};(function t(n){function e(t){return Math.pow(t,n)}return n=+n,e.exponent=t,e})(3),function t(n){function e(t){return 1-Math.pow(1-t,n)}return n=+n,e.exponent=t,e}(3),function t(n){function e(t){return((t*=2)<=1?Math.pow(t,n):2-Math.pow(2-t,n))/2}return n=+n,e.exponent=t,e}(3),Math.PI;(function t(n){function e(t){return t*t*((n+1)*t-n)}return n=+n,e.overshoot=t,e})(1.70158),function t(n){function e(t){return--t*t*((n+1)*t+n)+1}return n=+n,e.overshoot=t,e}(1.70158),function t(n){function e(t){return((t*=2)<1?t*t*((n+1)*t-n):(t-=2)*t*((n+1)*t+n)+2)/2}return n=+n,e.overshoot=t,e}(1.70158);var ye=2*Math.PI,ge=(function t(n,e){var r=Math.asin(1/(n=Math.max(1,n)))*(e/=ye);function i(t){return n*Math.pow(2,10*--t)*Math.sin((r-t)/e)}return i.amplitude=function(n){return t(n,e*ye)},i.period=function(e){return t(n,e)},i}(1,.3),function t(n,e){var r=Math.asin(1/(n=Math.max(1,n)))*(e/=ye);function i(t){return 1-n*Math.pow(2,-10*(t=+t))*Math.sin((t+r)/e)}return i.amplitude=function(n){return t(n,e*ye)},i.period=function(e){return t(n,e)},i}(1,.3),function t(n,e){var r=Math.asin(1/(n=Math.max(1,n)))*(e/=ye);function i(t){return((t=2*t-1)<0?n*Math.pow(2,10*t)*Math.sin((r-t)/e):2-n*Math.pow(2,-10*t)*Math.sin((r+t)/e))/2}return i.amplitude=function(n){return t(n,e*ye)},i.period=function(e){return t(n,e)},i}(1,.3),{time:null,delay:0,duration:250,ease:function(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}});function xe(t,n){for(var e;!(e=t.__transition)||!(e=e[n]);)if(!(t=t.parentNode))return ge.time=Hn(),ge;return e}tt.prototype.interrupt=function(t){return this.each(function(){ue(this,t)})},tt.prototype.transition=function(t){var n,e;t instanceof _e?(n=t._id,t=t._name):(n=be(),(e=ge).time=Hn(),t=null==t?null:t+"");for(var r=this._groups,i=r.length,a=0;a<i;++a)for(var f,o=r[a],c=o.length,u=0;u<c;++u)(f=o[u])&&ae(f,t,n,u,o,e||xe(f,n));return new _e(r,this._parents,t,n)};["e","w"].map(me),["n","s"].map(me),["n","e","s","w","nw","ne","se","sw"].map(me);function me(t){return{type:t}}Math.cos,Math.sin,Math.PI,Math.max;Array.prototype.slice;var we=Math.PI,Me=2*we,Ne=Me-1e-6;function Te(){this._x0=this._y0=this._x1=this._y1=null,this._=""}function Ce(){return new Te}Te.prototype=Ce.prototype={constructor:Te,moveTo:function(t,n){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+n)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")},lineTo:function(t,n){this._+="L"+(this._x1=+t)+","+(this._y1=+n)},quadraticCurveTo:function(t,n,e,r){this._+="Q"+ +t+","+ +n+","+(this._x1=+e)+","+(this._y1=+r)},bezierCurveTo:function(t,n,e,r,i,a){this._+="C"+ +t+","+ +n+","+ +e+","+ +r+","+(this._x1=+i)+","+(this._y1=+a)},arcTo:function(t,n,e,r,i){t=+t,n=+n,e=+e,r=+r,i=+i;var a=this._x1,f=this._y1,o=e-t,c=r-n,u=a-t,s=f-n,h=u*u+s*s;if(i<0)throw new Error("negative radius: "+i);if(null===this._x1)this._+="M"+(this._x1=t)+","+(this._y1=n);else if(h>1e-6)if(Math.abs(s*o-c*u)>1e-6&&i){var l=e-a,d=r-f,p=o*o+c*c,_=l*l+d*d,b=Math.sqrt(p),v=Math.sqrt(h),y=i*Math.tan((we-Math.acos((p+h-_)/(2*b*v)))/2),g=y/v,x=y/b;Math.abs(g-1)>1e-6&&(this._+="L"+(t+g*u)+","+(n+g*s)),this._+="A"+i+","+i+",0,0,"+ +(s*l>u*d)+","+(this._x1=t+x*o)+","+(this._y1=n+x*c)}else this._+="L"+(this._x1=t)+","+(this._y1=n);else;},arc:function(t,n,e,r,i,a){t=+t,n=+n;var f=(e=+e)*Math.cos(r),o=e*Math.sin(r),c=t+f,u=n+o,s=1^a,h=a?r-i:i-r;if(e<0)throw new Error("negative radius: "+e);null===this._x1?this._+="M"+c+","+u:(Math.abs(this._x1-c)>1e-6||Math.abs(this._y1-u)>1e-6)&&(this._+="L"+c+","+u),e&&(h<0&&(h=h%Me+Me),h>Ne?this._+="A"+e+","+e+",0,1,"+s+","+(t-f)+","+(n-o)+"A"+e+","+e+",0,1,"+s+","+(this._x1=c)+","+(this._y1=u):h>1e-6&&(this._+="A"+e+","+e+",0,"+ +(h>=we)+","+s+","+(this._x1=t+e*Math.cos(i))+","+(this._y1=n+e*Math.sin(i))))},rect:function(t,n,e,r){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+n)+"h"+ +e+"v"+ +r+"h"+-e+"Z"},toString:function(){return this._}};function Se(){}function Ae(t,n){var e=new Se;if(t instanceof Se)t.each(function(t,n){e.set(n,t)});else if(Array.isArray(t)){var r,i=-1,a=t.length;if(null==n)for(;++i<a;)e.set(i,t[i]);else for(;++i<a;)e.set(n(r=t[i],i,t),r)}else if(t)for(var f in t)e.set(f,t[f]);return e}Se.prototype=Ae.prototype={constructor:Se,has:function(t){return"$"+t in this},get:function(t){return this["$"+t]},set:function(t,n){return this["$"+t]=n,this},remove:function(t){var n="$"+t;return n in this&&delete this[n]},clear:function(){for(var t in this)"$"===t[0]&&delete this[t]},keys:function(){var t=[];for(var n in this)"$"===n[0]&&t.push(n.slice(1));return t},values:function(){var t=[];for(var n in this)"$"===n[0]&&t.push(this[n]);return t},entries:function(){var t=[];for(var n in this)"$"===n[0]&&t.push({key:n.slice(1),value:this[n]});return t},size:function(){var t=0;for(var n in this)"$"===n[0]&&++t;return t},empty:function(){for(var t in this)if("$"===t[0])return!1;return!0},each:function(t){for(var n in this)"$"===n[0]&&t(this[n],n.slice(1),this)}};var ke=Ae;function Ee(){}var Ue=ke.prototype;function Le(t,n){var e=new Ee;if(t instanceof Ee)t.each(function(t){e.add(t)});else if(t){var r=-1,i=t.length;if(null==n)for(;++r<i;)e.add(t[r]);else for(;++r<i;)e.add(n(t[r],r,t))}return e}Ee.prototype=Le.prototype={constructor:Ee,has:Ue.has,add:function(t){return this["$"+(t+="")]=t,this},remove:Ue.remove,clear:Ue.clear,values:Ue.keys,size:Ue.size,empty:Ue.empty,each:Ue.each};Array.prototype.slice;var Pe={},De={},Re=34,je=10,Fe=13;function Oe(t){return new Function("d","return {"+t.map(function(t,n){return JSON.stringify(t)+": d["+n+"]"}).join(",")+"}")}function Ye(t){var n=Object.create(null),e=[];return t.forEach(function(t){for(var r in t)r in n||e.push(n[r]=r)}),e}function qe(t,n){var e=t+"",r=e.length;return r<n?new Array(n-r+1).join(0)+e:e}function ze(t){var n,e=t.getUTCHours(),r=t.getUTCMinutes(),i=t.getUTCSeconds(),a=t.getUTCMilliseconds();return isNaN(t)?"Invalid Date":((n=t.getUTCFullYear())<0?"-"+qe(-n,6):n>9999?"+"+qe(n,6):qe(n,4))+"-"+qe(t.getUTCMonth()+1,2)+"-"+qe(t.getUTCDate(),2)+(a?"T"+qe(e,2)+":"+qe(r,2)+":"+qe(i,2)+"."+qe(a,3)+"Z":i?"T"+qe(e,2)+":"+qe(r,2)+":"+qe(i,2)+"Z":r||e?"T"+qe(e,2)+":"+qe(r,2)+"Z":"")}var He=function(t){var n=new RegExp('["'+t+"\n\r]"),e=t.charCodeAt(0);function r(t,n){var r,i=[],a=t.length,f=0,o=0,c=a<=0,u=!1;function s(){if(c)return De;if(u)return u=!1,Pe;var n,r,i=f;if(t.charCodeAt(i)===Re){for(;f++<a&&t.charCodeAt(f)!==Re||t.charCodeAt(++f)===Re;);return(n=f)>=a?c=!0:(r=t.charCodeAt(f++))===je?u=!0:r===Fe&&(u=!0,t.charCodeAt(f)===je&&++f),t.slice(i+1,n-1).replace(/""/g,'"')}for(;f<a;){if((r=t.charCodeAt(n=f++))===je)u=!0;else if(r===Fe)u=!0,t.charCodeAt(f)===je&&++f;else if(r!==e)continue;return t.slice(i,n)}return c=!0,t.slice(i,a)}for(t.charCodeAt(a-1)===je&&--a,t.charCodeAt(a-1)===Fe&&--a;(r=s())!==De;){for(var h=[];r!==Pe&&r!==De;)h.push(r),r=s();n&&null==(h=n(h,o++))||i.push(h)}return i}function i(n,e){return n.map(function(n){return e.map(function(t){return f(n[t])}).join(t)})}function a(n){return n.map(f).join(t)}function f(t){return null==t?"":t instanceof Date?ze(t):n.test(t+="")?'"'+t.replace(/"/g,'""')+'"':t}return{parse:function(t,n){var e,i,a=r(t,function(t,r){if(e)return e(t,r-1);i=t,e=n?function(t,n){var e=Oe(t);return function(r,i){return n(e(r),i,t)}}(t,n):Oe(t)});return a.columns=i||[],a},parseRows:r,format:function(n,e){return null==e&&(e=Ye(n)),[e.map(f).join(t)].concat(i(n,e)).join("\n")},formatBody:function(t,n){return null==n&&(n=Ye(t)),i(t,n).join("\n")},formatRows:function(t){return t.map(a).join("\n")}}},Ie=He(","),$e=Ie.parse,Be=(Ie.parseRows,Ie.format,Ie.formatBody,Ie.formatRows,He("\t")),Xe=Be.parse;Be.parseRows,Be.format,Be.formatBody,Be.formatRows;function Ze(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.text()}var Ve=function(t,n){return fetch(t,n).then(Ze)};function We(t){return function(n,e,r){return 2===arguments.length&&"function"==typeof e&&(r=e,e=void 0),Ve(n,e).then(function(n){return t(n,r)})}}var Je=We($e);We(Xe);function Qe(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.json()}function Ge(t){return function(n,e){return Ve(n,e).then(function(n){return(new DOMParser).parseFromString(n,t)})}}Ge("application/xml"),Ge("text/html"),Ge("image/svg+xml");function Ke(t,n,e,r){if(isNaN(n)||isNaN(e))return t;var i,a,f,o,c,u,s,h,l,d=t._root,p={data:r},_=t._x0,b=t._y0,v=t._x1,y=t._y1;if(!d)return t._root=p,t;for(;d.length;)if((u=n>=(a=(_+v)/2))?_=a:v=a,(s=e>=(f=(b+y)/2))?b=f:y=f,i=d,!(d=d[h=s<<1|u]))return i[h]=p,t;if(o=+t._x.call(null,d.data),c=+t._y.call(null,d.data),n===o&&e===c)return p.next=d,i?i[h]=p:t._root=p,t;do{i=i?i[h]=new Array(4):t._root=new Array(4),(u=n>=(a=(_+v)/2))?_=a:v=a,(s=e>=(f=(b+y)/2))?b=f:y=f}while((h=s<<1|u)==(l=(c>=f)<<1|o>=a));return i[l]=d,i[h]=p,t}var tr=function(t,n,e,r,i){this.node=t,this.x0=n,this.y0=e,this.x1=r,this.y1=i};function nr(t){return t[0]}function er(t){return t[1]}function rr(t,n,e){var r=new ir(null==n?nr:n,null==e?er:e,NaN,NaN,NaN,NaN);return null==t?r:r.addAll(t)}function ir(t,n,e,r,i,a){this._x=t,this._y=n,this._x0=e,this._y0=r,this._x1=i,this._y1=a,this._root=void 0}function ar(t){for(var n={data:t.data},e=n;t=t.next;)e=e.next={data:t.data};return n}var fr=rr.prototype=ir.prototype;fr.copy=function(){var t,n,e=new ir(this._x,this._y,this._x0,this._y0,this._x1,this._y1),r=this._root;if(!r)return e;if(!r.length)return e._root=ar(r),e;for(t=[{source:r,target:e._root=new Array(4)}];r=t.pop();)for(var i=0;i<4;++i)(n=r.source[i])&&(n.length?t.push({source:n,target:r.target[i]=new Array(4)}):r.target[i]=ar(n));return e},fr.add=function(t){var n=+this._x.call(null,t),e=+this._y.call(null,t);return Ke(this.cover(n,e),n,e,t)},fr.addAll=function(t){var n,e,r,i,a=t.length,f=new Array(a),o=new Array(a),c=1/0,u=1/0,s=-1/0,h=-1/0;for(e=0;e<a;++e)isNaN(r=+this._x.call(null,n=t[e]))||isNaN(i=+this._y.call(null,n))||(f[e]=r,o[e]=i,r<c&&(c=r),r>s&&(s=r),i<u&&(u=i),i>h&&(h=i));if(c>s||u>h)return this;for(this.cover(c,u).cover(s,h),e=0;e<a;++e)Ke(this,f[e],o[e],t[e]);return this},fr.cover=function(t,n){if(isNaN(t=+t)||isNaN(n=+n))return this;var e=this._x0,r=this._y0,i=this._x1,a=this._y1;if(isNaN(e))i=(e=Math.floor(t))+1,a=(r=Math.floor(n))+1;else{for(var f,o,c=i-e,u=this._root;e>t||t>=i||r>n||n>=a;)switch(o=(n<r)<<1|t<e,(f=new Array(4))[o]=u,u=f,c*=2,o){case 0:i=e+c,a=r+c;break;case 1:e=i-c,a=r+c;break;case 2:i=e+c,r=a-c;break;case 3:e=i-c,r=a-c}this._root&&this._root.length&&(this._root=u)}return this._x0=e,this._y0=r,this._x1=i,this._y1=a,this},fr.data=function(){var t=[];return this.visit(function(n){if(!n.length)do{t.push(n.data)}while(n=n.next)}),t},fr.extent=function(t){return arguments.length?this.cover(+t[0][0],+t[0][1]).cover(+t[1][0],+t[1][1]):isNaN(this._x0)?void 0:[[this._x0,this._y0],[this._x1,this._y1]]},fr.find=function(t,n,e){var r,i,a,f,o,c,u,s=this._x0,h=this._y0,l=this._x1,d=this._y1,p=[],_=this._root;for(_&&p.push(new tr(_,s,h,l,d)),null==e?e=1/0:(s=t-e,h=n-e,l=t+e,d=n+e,e*=e);c=p.pop();)if(!(!(_=c.node)||(i=c.x0)>l||(a=c.y0)>d||(f=c.x1)<s||(o=c.y1)<h))if(_.length){var b=(i+f)/2,v=(a+o)/2;p.push(new tr(_[3],b,v,f,o),new tr(_[2],i,v,b,o),new tr(_[1],b,a,f,v),new tr(_[0],i,a,b,v)),(u=(n>=v)<<1|t>=b)&&(c=p[p.length-1],p[p.length-1]=p[p.length-1-u],p[p.length-1-u]=c)}else{var y=t-+this._x.call(null,_.data),g=n-+this._y.call(null,_.data),x=y*y+g*g;if(x<e){var m=Math.sqrt(e=x);s=t-m,h=n-m,l=t+m,d=n+m,r=_.data}}return r},fr.remove=function(t){if(isNaN(a=+this._x.call(null,t))||isNaN(f=+this._y.call(null,t)))return this;var n,e,r,i,a,f,o,c,u,s,h,l,d=this._root,p=this._x0,_=this._y0,b=this._x1,v=this._y1;if(!d)return this;if(d.length)for(;;){if((u=a>=(o=(p+b)/2))?p=o:b=o,(s=f>=(c=(_+v)/2))?_=c:v=c,n=d,!(d=d[h=s<<1|u]))return this;if(!d.length)break;(n[h+1&3]||n[h+2&3]||n[h+3&3])&&(e=n,l=h)}for(;d.data!==t;)if(r=d,!(d=d.next))return this;return(i=d.next)&&delete d.next,r?(i?r.next=i:delete r.next,this):n?(i?n[h]=i:delete n[h],(d=n[0]||n[1]||n[2]||n[3])&&d===(n[3]||n[2]||n[1]||n[0])&&!d.length&&(e?e[l]=d:this._root=d),this):(this._root=i,this)},fr.removeAll=function(t){for(var n=0,e=t.length;n<e;++n)this.remove(t[n]);return this},fr.root=function(){return this._root},fr.size=function(){var t=0;return this.visit(function(n){if(!n.length)do{++t}while(n=n.next)}),t},fr.visit=function(t){var n,e,r,i,a,f,o=[],c=this._root;for(c&&o.push(new tr(c,this._x0,this._y0,this._x1,this._y1));n=o.pop();)if(!t(c=n.node,r=n.x0,i=n.y0,a=n.x1,f=n.y1)&&c.length){var u=(r+a)/2,s=(i+f)/2;(e=c[3])&&o.push(new tr(e,u,s,a,f)),(e=c[2])&&o.push(new tr(e,r,s,u,f)),(e=c[1])&&o.push(new tr(e,u,i,a,s)),(e=c[0])&&o.push(new tr(e,r,i,u,s))}return this},fr.visitAfter=function(t){var n,e=[],r=[];for(this._root&&e.push(new tr(this._root,this._x0,this._y0,this._x1,this._y1));n=e.pop();){var i=n.node;if(i.length){var a,f=n.x0,o=n.y0,c=n.x1,u=n.y1,s=(f+c)/2,h=(o+u)/2;(a=i[0])&&e.push(new tr(a,f,o,s,h)),(a=i[1])&&e.push(new tr(a,s,o,c,h)),(a=i[2])&&e.push(new tr(a,f,h,s,u)),(a=i[3])&&e.push(new tr(a,s,h,c,u))}r.push(n)}for(;n=r.pop();)t(n.node,n.x0,n.y0,n.x1,n.y1);return this},fr.x=function(t){return arguments.length?(this._x=t,this):this._x},fr.y=function(t){return arguments.length?(this._y=t,this):this._y};Math.PI,Math.sqrt(5);var or=function(t,n){if((e=(t=n?t.toExponential(n-1):t.toExponential()).indexOf("e"))<0)return null;var e,r=t.slice(0,e);return[r.length>1?r[0]+r.slice(2):r,+t.slice(e+1)]},cr=function(t){return(t=or(Math.abs(t)))?t[1]:NaN},ur=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function sr(t){return new hr(t)}function hr(t){if(!(n=ur.exec(t)))throw new Error("invalid format: "+t);var n;this.fill=n[1]||" ",this.align=n[2]||">",this.sign=n[3]||"-",this.symbol=n[4]||"",this.zero=!!n[5],this.width=n[6]&&+n[6],this.comma=!!n[7],this.precision=n[8]&&+n[8].slice(1),this.trim=!!n[9],this.type=n[10]||""}sr.prototype=hr.prototype,hr.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(null==this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(null==this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};var lr,dr,pr=function(t){t:for(var n,e=t.length,r=1,i=-1;r<e;++r)switch(t[r]){case".":i=n=r;break;case"0":0===i&&(i=r),n=r;break;default:if(i>0){if(!+t[r])break t;i=0}}return i>0?t.slice(0,i)+t.slice(n+1):t},_r=function(t,n){var e=or(t,n);if(!e)return t+"";var r=e[0],i=e[1];return i<0?"0."+new Array(-i).join("0")+r:r.length>i+1?r.slice(0,i+1)+"."+r.slice(i+1):r+new Array(i-r.length+2).join("0")},br={"%":function(t,n){return(100*t).toFixed(n)},b:function(t){return Math.round(t).toString(2)},c:function(t){return t+""},d:function(t){return Math.round(t).toString(10)},e:function(t,n){return t.toExponential(n)},f:function(t,n){return t.toFixed(n)},g:function(t,n){return t.toPrecision(n)},o:function(t){return Math.round(t).toString(8)},p:function(t,n){return _r(100*t,n)},r:_r,s:function(t,n){var e=or(t,n);if(!e)return t+"";var r=e[0],i=e[1],a=i-(lr=3*Math.max(-8,Math.min(8,Math.floor(i/3))))+1,f=r.length;return a===f?r:a>f?r+new Array(a-f+1).join("0"):a>0?r.slice(0,a)+"."+r.slice(a):"0."+new Array(1-a).join("0")+or(t,Math.max(0,n+a-1))[0]},X:function(t){return Math.round(t).toString(16).toUpperCase()},x:function(t){return Math.round(t).toString(16)}},vr=function(t){return t},yr=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];dr=function(t){var n,e,r=t.grouping&&t.thousands?(n=t.grouping,e=t.thousands,function(t,r){for(var i=t.length,a=[],f=0,o=n[0],c=0;i>0&&o>0&&(c+o+1>r&&(o=Math.max(1,r-c)),a.push(t.substring(i-=o,i+o)),!((c+=o+1)>r));)o=n[f=(f+1)%n.length];return a.reverse().join(e)}):vr,i=t.currency,a=t.decimal,f=t.numerals?function(t){return function(n){return n.replace(/[0-9]/g,function(n){return t[+n]})}}(t.numerals):vr,o=t.percent||"%";function c(t){var n=(t=sr(t)).fill,e=t.align,c=t.sign,u=t.symbol,s=t.zero,h=t.width,l=t.comma,d=t.precision,p=t.trim,_=t.type;"n"===_?(l=!0,_="g"):br[_]||(null==d&&(d=12),p=!0,_="g"),(s||"0"===n&&"="===e)&&(s=!0,n="0",e="=");var b="$"===u?i[0]:"#"===u&&/[boxX]/.test(_)?"0"+_.toLowerCase():"",v="$"===u?i[1]:/[%p]/.test(_)?o:"",y=br[_],g=/[defgprs%]/.test(_);function x(t){var i,o,u,x=b,m=v;if("c"===_)m=y(t)+m,t="";else{var w=(t=+t)<0;if(t=y(Math.abs(t),d),p&&(t=pr(t)),w&&0==+t&&(w=!1),x=(w?"("===c?c:"-":"-"===c||"("===c?"":c)+x,m=("s"===_?yr[8+lr/3]:"")+m+(w&&"("===c?")":""),g)for(i=-1,o=t.length;++i<o;)if(48>(u=t.charCodeAt(i))||u>57){m=(46===u?a+t.slice(i+1):t.slice(i))+m,t=t.slice(0,i);break}}l&&!s&&(t=r(t,1/0));var M=x.length+t.length+m.length,N=M<h?new Array(h-M+1).join(n):"";switch(l&&s&&(t=r(N+t,N.length?h-m.length:1/0),N=""),e){case"<":t=x+t+m+N;break;case"=":t=x+N+t+m;break;case"^":t=N.slice(0,M=N.length>>1)+x+t+m+N.slice(M);break;default:t=N+x+t+m}return f(t)}return d=null==d?6:/[gprs]/.test(_)?Math.max(1,Math.min(21,d)):Math.max(0,Math.min(20,d)),x.toString=function(){return t+""},x}return{format:c,formatPrefix:function(t,n){var e=c(((t=sr(t)).type="f",t)),r=3*Math.max(-8,Math.min(8,Math.floor(cr(n)/3))),i=Math.pow(10,-r),a=yr[8+r/3];return function(t){return e(i*t)+a}}}}({decimal:".",thousands:",",grouping:[3],currency:["$",""]}),dr.format,dr.formatPrefix;var gr=function(){return new xr};function xr(){this.reset()}xr.prototype={constructor:xr,reset:function(){this.s=this.t=0},add:function(t){wr(mr,t,this.t),wr(this,mr.s,this.s),this.s?this.t+=mr.t:this.s=mr.t},valueOf:function(){return this.s}};var mr=new xr;function wr(t,n,e){var r=t.s=n+e,i=r-n,a=r-i;t.t=n-a+(e-i)}var Mr=1e-6,Nr=Math.PI,Tr=Nr/2,Cr=Nr/4,Sr=2*Nr,Ar=180/Nr,kr=Nr/180,Er=Math.abs,Ur=Math.atan,Lr=Math.atan2,Pr=Math.cos,Dr=(Math.ceil,Math.exp),Rr=(Math.floor,Math.log),jr=(Math.pow,Math.sin),Fr=(Math.sign,Math.sqrt),Or=Math.tan;function Yr(t){return t>1?0:t<-1?Nr:Math.acos(t)}function qr(t){return t>1?Tr:t<-1?-Tr:Math.asin(t)}function zr(){}function Hr(t,n){t&&$r.hasOwnProperty(t.type)&&$r[t.type](t,n)}var Ir={Feature:function(t,n){Hr(t.geometry,n)},FeatureCollection:function(t,n){for(var e=t.features,r=-1,i=e.length;++r<i;)Hr(e[r].geometry,n)}},$r={Sphere:function(t,n){n.sphere()},Point:function(t,n){t=t.coordinates,n.point(t[0],t[1],t[2])},MultiPoint:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)t=e[r],n.point(t[0],t[1],t[2])},LineString:function(t,n){Br(t.coordinates,n,0)},MultiLineString:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)Br(e[r],n,0)},Polygon:function(t,n){Xr(t.coordinates,n)},MultiPolygon:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)Xr(e[r],n)},GeometryCollection:function(t,n){for(var e=t.geometries,r=-1,i=e.length;++r<i;)Hr(e[r],n)}};function Br(t,n,e){var r,i=-1,a=t.length-e;for(n.lineStart();++i<a;)r=t[i],n.point(r[0],r[1],r[2]);n.lineEnd()}function Xr(t,n){var e=-1,r=t.length;for(n.polygonStart();++e<r;)Br(t[e],n,1);n.polygonEnd()}var Zr=function(t,n){t&&Ir.hasOwnProperty(t.type)?Ir[t.type](t,n):Hr(t,n)};gr(),gr();function Vr(t){return[Lr(t[1],t[0]),qr(t[2])]}function Wr(t){var n=t[0],e=t[1],r=Pr(e);return[r*Pr(n),r*jr(n),jr(e)]}function Jr(t,n){return t[0]*n[0]+t[1]*n[1]+t[2]*n[2]}function Qr(t,n){return[t[1]*n[2]-t[2]*n[1],t[2]*n[0]-t[0]*n[2],t[0]*n[1]-t[1]*n[0]]}function Gr(t,n){t[0]+=n[0],t[1]+=n[1],t[2]+=n[2]}function Kr(t,n){return[t[0]*n,t[1]*n,t[2]*n]}function ti(t){var n=Fr(t[0]*t[0]+t[1]*t[1]+t[2]*t[2]);t[0]/=n,t[1]/=n,t[2]/=n}gr();var ni=function(t,n){function e(e,r){return e=t(e,r),n(e[0],e[1])}return t.invert&&n.invert&&(e.invert=function(e,r){return(e=n.invert(e,r))&&t.invert(e[0],e[1])}),e};function ei(t,n){return[Er(t)>Nr?t+Math.round(-t/Sr)*Sr:t,n]}function ri(t,n,e){return(t%=Sr)?n||e?ni(ai(t),fi(n,e)):ai(t):n||e?fi(n,e):ei}function ii(t){return function(n,e){return[(n+=t)>Nr?n-Sr:n<-Nr?n+Sr:n,e]}}function ai(t){var n=ii(t);return n.invert=ii(-t),n}function fi(t,n){var e=Pr(t),r=jr(t),i=Pr(n),a=jr(n);function f(t,n){var f=Pr(n),o=Pr(t)*f,c=jr(t)*f,u=jr(n),s=u*e+o*r;return[Lr(c*i-s*a,o*e-u*r),qr(s*i+c*a)]}return f.invert=function(t,n){var f=Pr(n),o=Pr(t)*f,c=jr(t)*f,u=jr(n),s=u*i-c*a;return[Lr(c*i+u*a,o*e+s*r),qr(s*e-o*r)]},f}ei.invert=ei;function oi(t,n,e,r,i,a){if(e){var f=Pr(n),o=jr(n),c=r*e;null==i?(i=n+r*Sr,a=n-c/2):(i=ci(f,i),a=ci(f,a),(r>0?i<a:i>a)&&(i+=r*Sr));for(var u,s=i;r>0?s>a:s<a;s-=c)u=Vr([f,-o*Pr(s),-o*jr(s)]),t.point(u[0],u[1])}}function ci(t,n){(n=Wr(n))[0]-=t,ti(n);var e=Yr(-n[1]);return((-n[2]<0?-e:e)+Sr-Mr)%Sr}var ui=function(){var t,n=[];return{point:function(n,e){t.push([n,e])},lineStart:function(){n.push(t=[])},lineEnd:zr,rejoin:function(){n.length>1&&n.push(n.pop().concat(n.shift()))},result:function(){var e=n;return n=[],t=null,e}}},si=function(t,n){return Er(t[0]-n[0])<Mr&&Er(t[1]-n[1])<Mr};function hi(t,n,e,r){this.x=t,this.z=n,this.o=e,this.e=r,this.v=!1,this.n=this.p=null}var li=function(t,n,e,r,i){var a,f,o=[],c=[];if(t.forEach(function(t){if(!((n=t.length-1)<=0)){var n,e,r=t[0],f=t[n];if(si(r,f)){for(i.lineStart(),a=0;a<n;++a)i.point((r=t[a])[0],r[1]);i.lineEnd()}else o.push(e=new hi(r,t,null,!0)),c.push(e.o=new hi(r,null,e,!1)),o.push(e=new hi(f,t,null,!1)),c.push(e.o=new hi(f,null,e,!0))}}),o.length){for(c.sort(n),di(o),di(c),a=0,f=c.length;a<f;++a)c[a].e=e=!e;for(var u,s,h=o[0];;){for(var l=h,d=!0;l.v;)if((l=l.n)===h)return;u=l.z,i.lineStart();do{if(l.v=l.o.v=!0,l.e){if(d)for(a=0,f=u.length;a<f;++a)i.point((s=u[a])[0],s[1]);else r(l.x,l.n.x,1,i);l=l.n}else{if(d)for(u=l.p.z,a=u.length-1;a>=0;--a)i.point((s=u[a])[0],s[1]);else r(l.x,l.p.x,-1,i);l=l.p}u=(l=l.o).z,d=!d}while(!l.v);i.lineEnd()}}};function di(t){if(n=t.length){for(var n,e,r=0,i=t[0];++r<n;)i.n=e=t[r],e.p=i,i=e;i.n=e=t[0],e.p=i}}var pi=gr(),_i=function(t,n){var e=n[0],r=n[1],i=jr(r),a=[jr(e),-Pr(e),0],f=0,o=0;pi.reset(),1===i?r=Tr+Mr:-1===i&&(r=-Tr-Mr);for(var c=0,u=t.length;c<u;++c)if(h=(s=t[c]).length)for(var s,h,l=s[h-1],d=l[0],p=l[1]/2+Cr,_=jr(p),b=Pr(p),v=0;v<h;++v,d=g,_=m,b=w,l=y){var y=s[v],g=y[0],x=y[1]/2+Cr,m=jr(x),w=Pr(x),M=g-d,N=M>=0?1:-1,T=N*M,C=T>Nr,S=_*m;if(pi.add(Lr(S*N*jr(T),b*w+S*Pr(T))),f+=C?M+N*Sr:M,C^d>=e^g>=e){var A=Qr(Wr(l),Wr(y));ti(A);var k=Qr(a,A);ti(k);var E=(C^M>=0?-1:1)*qr(k[2]);(r>E||r===E&&(A[0]||A[1]))&&(o+=C^M>=0?1:-1)}}return(f<-Mr||f<Mr&&pi<-Mr)^1&o},bi=function(t,n,e,r){return function(i){var a,f,c,u=n(i),s=ui(),h=n(s),l=!1,d={point:p,lineStart:b,lineEnd:v,polygonStart:function(){d.point=y,d.lineStart=g,d.lineEnd=x,f=[],a=[]},polygonEnd:function(){d.point=p,d.lineStart=b,d.lineEnd=v,f=o(f);var t=_i(a,r);f.length?(l||(i.polygonStart(),l=!0),li(f,yi,t,e,i)):t&&(l||(i.polygonStart(),l=!0),i.lineStart(),e(null,null,1,i),i.lineEnd()),l&&(i.polygonEnd(),l=!1),f=a=null},sphere:function(){i.polygonStart(),i.lineStart(),e(null,null,1,i),i.lineEnd(),i.polygonEnd()}};function p(n,e){t(n,e)&&i.point(n,e)}function _(t,n){u.point(t,n)}function b(){d.point=_,u.lineStart()}function v(){d.point=p,u.lineEnd()}function y(t,n){c.push([t,n]),h.point(t,n)}function g(){h.lineStart(),c=[]}function x(){y(c[0][0],c[0][1]),h.lineEnd();var t,n,e,r,o=h.clean(),u=s.result(),d=u.length;if(c.pop(),a.push(c),c=null,d)if(1&o){if((n=(e=u[0]).length-1)>0){for(l||(i.polygonStart(),l=!0),i.lineStart(),t=0;t<n;++t)i.point((r=e[t])[0],r[1]);i.lineEnd()}}else d>1&&2&o&&u.push(u.pop().concat(u.shift())),f.push(u.filter(vi))}return d}};function vi(t){return t.length>1}function yi(t,n){return((t=t.x)[0]<0?t[1]-Tr-Mr:Tr-t[1])-((n=n.x)[0]<0?n[1]-Tr-Mr:Tr-n[1])}var gi=bi(function(){return!0},function(t){var n,e=NaN,r=NaN,i=NaN;return{lineStart:function(){t.lineStart(),n=1},point:function(a,f){var o=a>0?Nr:-Nr,c=Er(a-e);Er(c-Nr)<Mr?(t.point(e,r=(r+f)/2>0?Tr:-Tr),t.point(i,r),t.lineEnd(),t.lineStart(),t.point(o,r),t.point(a,r),n=0):i!==o&&c>=Nr&&(Er(e-i)<Mr&&(e-=i*Mr),Er(a-o)<Mr&&(a-=o*Mr),r=function(t,n,e,r){var i,a,f=jr(t-e);return Er(f)>Mr?Ur((jr(n)*(a=Pr(r))*jr(e)-jr(r)*(i=Pr(n))*jr(t))/(i*a*f)):(n+r)/2}(e,r,a,f),t.point(i,r),t.lineEnd(),t.lineStart(),t.point(o,r),n=0),t.point(e=a,r=f),i=o},lineEnd:function(){t.lineEnd(),e=r=NaN},clean:function(){return 2-n}}},function(t,n,e,r){var i;if(null==t)i=e*Tr,r.point(-Nr,i),r.point(0,i),r.point(Nr,i),r.point(Nr,0),r.point(Nr,-i),r.point(0,-i),r.point(-Nr,-i),r.point(-Nr,0),r.point(-Nr,i);else if(Er(t[0]-n[0])>Mr){var a=t[0]<n[0]?Nr:-Nr;i=e*a/2,r.point(-a,i),r.point(0,i),r.point(a,i)}else r.point(n[0],n[1])},[-Nr,-Tr]);var xi=function(t){var n=Pr(t),e=6*kr,r=n>0,i=Er(n)>Mr;function a(t,e){return Pr(t)*Pr(e)>n}function f(t,e,r){var i=[1,0,0],a=Qr(Wr(t),Wr(e)),f=Jr(a,a),o=a[0],c=f-o*o;if(!c)return!r&&t;var u=n*f/c,s=-n*o/c,h=Qr(i,a),l=Kr(i,u);Gr(l,Kr(a,s));var d=h,p=Jr(l,d),_=Jr(d,d),b=p*p-_*(Jr(l,l)-1);if(!(b<0)){var v=Fr(b),y=Kr(d,(-p-v)/_);if(Gr(y,l),y=Vr(y),!r)return y;var g,x=t[0],m=e[0],w=t[1],M=e[1];m<x&&(g=x,x=m,m=g);var N=m-x,T=Er(N-Nr)<Mr;if(!T&&M<w&&(g=w,w=M,M=g),T||N<Mr?T?w+M>0^y[1]<(Er(y[0]-x)<Mr?w:M):w<=y[1]&&y[1]<=M:N>Nr^(x<=y[0]&&y[0]<=m)){var C=Kr(d,(-p+v)/_);return Gr(C,l),[y,Vr(C)]}}}function o(n,e){var i=r?t:Nr-t,a=0;return n<-i?a|=1:n>i&&(a|=2),e<-i?a|=4:e>i&&(a|=8),a}return bi(a,function(t){var n,e,c,u,s;return{lineStart:function(){u=c=!1,s=1},point:function(h,l){var d,p=[h,l],_=a(h,l),b=r?_?0:o(h,l):_?o(h+(h<0?Nr:-Nr),l):0;if(!n&&(u=c=_)&&t.lineStart(),_!==c&&(!(d=f(n,p))||si(n,d)||si(p,d))&&(p[0]+=Mr,p[1]+=Mr,_=a(p[0],p[1])),_!==c)s=0,_?(t.lineStart(),d=f(p,n),t.point(d[0],d[1])):(d=f(n,p),t.point(d[0],d[1]),t.lineEnd()),n=d;else if(i&&n&&r^_){var v;b&e||!(v=f(p,n,!0))||(s=0,r?(t.lineStart(),t.point(v[0][0],v[0][1]),t.point(v[1][0],v[1][1]),t.lineEnd()):(t.point(v[1][0],v[1][1]),t.lineEnd(),t.lineStart(),t.point(v[0][0],v[0][1])))}!_||n&&si(n,p)||t.point(p[0],p[1]),n=p,c=_,e=b},lineEnd:function(){c&&t.lineEnd(),n=null},clean:function(){return s|(u&&c)<<1}}},function(n,r,i,a){oi(a,t,e,i,n,r)},r?[0,-t]:[-Nr,t-Nr])},mi=function(t,n,e,r,i,a){var f,o=t[0],c=t[1],u=0,s=1,h=n[0]-o,l=n[1]-c;if(f=e-o,h||!(f>0)){if(f/=h,h<0){if(f<u)return;f<s&&(s=f)}else if(h>0){if(f>s)return;f>u&&(u=f)}if(f=i-o,h||!(f<0)){if(f/=h,h<0){if(f>s)return;f>u&&(u=f)}else if(h>0){if(f<u)return;f<s&&(s=f)}if(f=r-c,l||!(f>0)){if(f/=l,l<0){if(f<u)return;f<s&&(s=f)}else if(l>0){if(f>s)return;f>u&&(u=f)}if(f=a-c,l||!(f<0)){if(f/=l,l<0){if(f>s)return;f>u&&(u=f)}else if(l>0){if(f<u)return;f<s&&(s=f)}return u>0&&(t[0]=o+u*h,t[1]=c+u*l),s<1&&(n[0]=o+s*h,n[1]=c+s*l),!0}}}}},wi=1e9,Mi=-wi;function Ni(t,n,e,r){function i(i,a){return t<=i&&i<=e&&n<=a&&a<=r}function a(i,a,o,c){var s=0,h=0;if(null==i||(s=f(i,o))!==(h=f(a,o))||u(i,a)<0^o>0)do{c.point(0===s||3===s?t:e,s>1?r:n)}while((s=(s+o+4)%4)!==h);else c.point(a[0],a[1])}function f(r,i){return Er(r[0]-t)<Mr?i>0?0:3:Er(r[0]-e)<Mr?i>0?2:1:Er(r[1]-n)<Mr?i>0?1:0:i>0?3:2}function c(t,n){return u(t.x,n.x)}function u(t,n){var e=f(t,1),r=f(n,1);return e!==r?e-r:0===e?n[1]-t[1]:1===e?t[0]-n[0]:2===e?t[1]-n[1]:n[0]-t[0]}return function(f){var u,s,h,l,d,p,_,b,v,y,g,x=f,m=ui(),w={point:M,lineStart:function(){w.point=N,s&&s.push(h=[]);y=!0,v=!1,_=b=NaN},lineEnd:function(){u&&(N(l,d),p&&v&&m.rejoin(),u.push(m.result()));w.point=M,v&&x.lineEnd()},polygonStart:function(){x=m,u=[],s=[],g=!0},polygonEnd:function(){var n=function(){for(var n=0,e=0,i=s.length;e<i;++e)for(var a,f,o=s[e],c=1,u=o.length,h=o[0],l=h[0],d=h[1];c<u;++c)a=l,f=d,h=o[c],l=h[0],d=h[1],f<=r?d>r&&(l-a)*(r-f)>(d-f)*(t-a)&&++n:d<=r&&(l-a)*(r-f)<(d-f)*(t-a)&&--n;return n}(),e=g&&n,i=(u=o(u)).length;(e||i)&&(f.polygonStart(),e&&(f.lineStart(),a(null,null,1,f),f.lineEnd()),i&&li(u,c,n,a,f),f.polygonEnd());x=f,u=s=h=null}};function M(t,n){i(t,n)&&x.point(t,n)}function N(a,f){var o=i(a,f);if(s&&h.push([a,f]),y)l=a,d=f,p=o,y=!1,o&&(x.lineStart(),x.point(a,f));else if(o&&v)x.point(a,f);else{var c=[_=Math.max(Mi,Math.min(wi,_)),b=Math.max(Mi,Math.min(wi,b))],u=[a=Math.max(Mi,Math.min(wi,a)),f=Math.max(Mi,Math.min(wi,f))];mi(c,u,t,n,e,r)?(v||(x.lineStart(),x.point(c[0],c[1])),x.point(u[0],u[1]),o||x.lineEnd(),g=!1):o&&(x.lineStart(),x.point(a,f),g=!1)}_=a,b=f,v=o}return w}}gr();var Ti=function(t){return t};gr(),gr();var Ci=1/0,Si=Ci,Ai=-Ci,ki=Ai;var Ei={point:function(t,n){t<Ci&&(Ci=t);t>Ai&&(Ai=t);n<Si&&(Si=n);n>ki&&(ki=n)},lineStart:zr,lineEnd:zr,polygonStart:zr,polygonEnd:zr,result:function(){var t=[[Ci,Si],[Ai,ki]];return Ai=ki=-(Si=Ci=1/0),t}};function Ui(t){this._context=t}Ui.prototype={_radius:4.5,pointRadius:function(t){return this._radius=t,this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._context.closePath(),this._point=NaN},point:function(t,n){switch(this._point){case 0:this._context.moveTo(t,n),this._point=1;break;case 1:this._context.lineTo(t,n);break;default:this._context.moveTo(t+this._radius,n),this._context.arc(t,n,this._radius,0,Sr)}},result:zr};gr();function Li(){this._string=[]}function Pi(t){return"m0,"+t+"a"+t+","+t+" 0 1,1 0,"+-2*t+"a"+t+","+t+" 0 1,1 0,"+2*t+"z"}Li.prototype={_radius:4.5,_circle:Pi(4.5),pointRadius:function(t){return(t=+t)!==this._radius&&(this._radius=t,this._circle=null),this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._string.push("Z"),this._point=NaN},point:function(t,n){switch(this._point){case 0:this._string.push("M",t,",",n),this._point=1;break;case 1:this._string.push("L",t,",",n);break;default:null==this._circle&&(this._circle=Pi(this._radius)),this._string.push("M",t,",",n,this._circle)}},result:function(){if(this._string.length){var t=this._string.join("");return this._string=[],t}return null}};function Di(t){return function(n){var e=new Ri;for(var r in t)e[r]=t[r];return e.stream=n,e}}function Ri(){}function ji(t,n,e){var r=t.clipExtent&&t.clipExtent();return t.scale(150).translate([0,0]),null!=r&&t.clipExtent(null),Zr(e,t.stream(Ei)),n(Ei.result()),null!=r&&t.clipExtent(r),t}function Fi(t,n,e){return ji(t,function(e){var r=n[1][0]-n[0][0],i=n[1][1]-n[0][1],a=Math.min(r/(e[1][0]-e[0][0]),i/(e[1][1]-e[0][1])),f=+n[0][0]+(r-a*(e[1][0]+e[0][0]))/2,o=+n[0][1]+(i-a*(e[1][1]+e[0][1]))/2;t.scale(150*a).translate([f,o])},e)}function Oi(t,n,e){return Fi(t,[[0,0],n],e)}function Yi(t,n,e){return ji(t,function(e){var r=+n,i=r/(e[1][0]-e[0][0]),a=(r-i*(e[1][0]+e[0][0]))/2,f=-i*e[0][1];t.scale(150*i).translate([a,f])},e)}function qi(t,n,e){return ji(t,function(e){var r=+n,i=r/(e[1][1]-e[0][1]),a=-i*e[0][0],f=(r-i*(e[1][1]+e[0][1]))/2;t.scale(150*i).translate([a,f])},e)}Ri.prototype={constructor:Ri,point:function(t,n){this.stream.point(t,n)},sphere:function(){this.stream.sphere()},lineStart:function(){this.stream.lineStart()},lineEnd:function(){this.stream.lineEnd()},polygonStart:function(){this.stream.polygonStart()},polygonEnd:function(){this.stream.polygonEnd()}};var zi=16,Hi=Pr(30*kr),Ii=function(t,n){return+n?function(t,n){function e(r,i,a,f,o,c,u,s,h,l,d,p,_,b){var v=u-r,y=s-i,g=v*v+y*y;if(g>4*n&&_--){var x=f+l,m=o+d,w=c+p,M=Fr(x*x+m*m+w*w),N=qr(w/=M),T=Er(Er(w)-1)<Mr||Er(a-h)<Mr?(a+h)/2:Lr(m,x),C=t(T,N),S=C[0],A=C[1],k=S-r,E=A-i,U=y*k-v*E;(U*U/g>n||Er((v*k+y*E)/g-.5)>.3||f*l+o*d+c*p<Hi)&&(e(r,i,a,f,o,c,S,A,T,x/=M,m/=M,w,_,b),b.point(S,A),e(S,A,T,x,m,w,u,s,h,l,d,p,_,b))}}return function(n){var r,i,a,f,o,c,u,s,h,l,d,p,_={point:b,lineStart:v,lineEnd:g,polygonStart:function(){n.polygonStart(),_.lineStart=x},polygonEnd:function(){n.polygonEnd(),_.lineStart=v}};function b(e,r){e=t(e,r),n.point(e[0],e[1])}function v(){s=NaN,_.point=y,n.lineStart()}function y(r,i){var a=Wr([r,i]),f=t(r,i);e(s,h,u,l,d,p,s=f[0],h=f[1],u=r,l=a[0],d=a[1],p=a[2],zi,n),n.point(s,h)}function g(){_.point=b,n.lineEnd()}function x(){v(),_.point=m,_.lineEnd=w}function m(t,n){y(r=t,n),i=s,a=h,f=l,o=d,c=p,_.point=y}function w(){e(s,h,u,l,d,p,i,a,r,f,o,c,zi,n),_.lineEnd=g,g()}return _}}(t,n):function(t){return Di({point:function(n,e){n=t(n,e),this.stream.point(n[0],n[1])}})}(t)};var $i=Di({point:function(t,n){this.stream.point(t*kr,n*kr)}});function Bi(t,n,e,r){var i=Pr(r),a=jr(r),f=i*t,o=a*t,c=i/t,u=a/t,s=(a*e-i*n)/t,h=(a*n+i*e)/t;function l(t,r){return[f*t-o*r+n,e-o*t-f*r]}return l.invert=function(t,n){return[c*t-u*n+s,h-u*t-c*n]},l}function Xi(t){return Zi(function(){return t})()}function Zi(t){var n,e,r,i,a,f,o,c,u,s,h=150,l=480,d=250,p=0,_=0,b=0,v=0,y=0,g=0,x=null,m=gi,w=null,M=Ti,N=.5;function T(t){return c(t[0]*kr,t[1]*kr)}function C(t){return(t=c.invert(t[0],t[1]))&&[t[0]*Ar,t[1]*Ar]}function S(){var t=Bi(h,0,0,g).apply(null,n(p,_)),r=(g?Bi:function(t,n,e){function r(r,i){return[n+t*r,e-t*i]}return r.invert=function(r,i){return[(r-n)/t,(e-i)/t]},r})(h,l-t[0],d-t[1],g);return e=ri(b,v,y),o=ni(n,r),c=ni(e,o),f=Ii(o,N),A()}function A(){return u=s=null,T}return T.stream=function(t){return u&&s===t?u:u=$i(function(t){return Di({point:function(n,e){var r=t(n,e);return this.stream.point(r[0],r[1])}})}(e)(m(f(M(s=t)))))},T.preclip=function(t){return arguments.length?(m=t,x=void 0,A()):m},T.postclip=function(t){return arguments.length?(M=t,w=r=i=a=null,A()):M},T.clipAngle=function(t){return arguments.length?(m=+t?xi(x=t*kr):(x=null,gi),A()):x*Ar},T.clipExtent=function(t){return arguments.length?(M=null==t?(w=r=i=a=null,Ti):Ni(w=+t[0][0],r=+t[0][1],i=+t[1][0],a=+t[1][1]),A()):null==w?null:[[w,r],[i,a]]},T.scale=function(t){return arguments.length?(h=+t,S()):h},T.translate=function(t){return arguments.length?(l=+t[0],d=+t[1],S()):[l,d]},T.center=function(t){return arguments.length?(p=t[0]%360*kr,_=t[1]%360*kr,S()):[p*Ar,_*Ar]},T.rotate=function(t){return arguments.length?(b=t[0]%360*kr,v=t[1]%360*kr,y=t.length>2?t[2]%360*kr:0,S()):[b*Ar,v*Ar,y*Ar]},T.angle=function(t){return arguments.length?(g=t%360*kr,S()):g*Ar},T.precision=function(t){return arguments.length?(f=Ii(o,N=t*t),A()):Fr(N)},T.fitExtent=function(t,n){return Fi(T,t,n)},T.fitSize=function(t,n){return Oi(T,t,n)},T.fitWidth=function(t,n){return Yi(T,t,n)},T.fitHeight=function(t,n){return qi(T,t,n)},function(){return n=t.apply(this,arguments),T.invert=n.invert&&C,S()}}function Vi(t){return function(n,e){var r=Pr(n),i=Pr(e),a=t(r*i);return[a*i*jr(n),a*jr(e)]}}function Wi(t){return function(n,e){var r=Fr(n*n+e*e),i=t(r),a=jr(i),f=Pr(i);return[Lr(n*a,r*f),qr(r&&e*a/r)]}}var Ji=Vi(function(t){return Fr(2/(1+t))});Ji.invert=Wi(function(t){return 2*qr(t/2)});var Qi=Vi(function(t){return(t=Yr(t))&&t/jr(t)});Qi.invert=Wi(function(t){return t});function Gi(t,n){return[t,Rr(Or((Tr+n)/2))]}Gi.invert=function(t,n){return[t,2*Ur(Dr(n))-Tr]};function Ki(t,n){return[t,n]}Ki.invert=Ki;var ta=1.340264,na=-.081106,ea=893e-6,ra=.003796,ia=Fr(3)/2;function aa(t,n){var e=qr(ia*jr(n)),r=e*e,i=r*r*r;return[t*Pr(e)/(ia*(ta+3*na*r+i*(7*ea+9*ra*r))),e*(ta+na*r+i*(ea+ra*r))]}aa.invert=function(t,n){for(var e,r=n,i=r*r,a=i*i*i,f=0;f<12&&(a=(i=(r-=e=(r*(ta+na*i+a*(ea+ra*i))-n)/(ta+3*na*i+a*(7*ea+9*ra*i)))*r)*i*i,!(Er(e)<1e-12));++f);return[ia*t*(ta+3*na*i+a*(7*ea+9*ra*i))/Pr(r),qr(jr(r)/ia)]};function fa(t,n){var e=Pr(n),r=Pr(t)*e;return[e*jr(t)/r,jr(n)/r]}fa.invert=Wi(Ur);function oa(t,n){var e=n*n,r=e*e;return[t*(.8707-.131979*e+r*(r*(.003971*e-.001529*r)-.013791)),n*(1.007226+e*(.015085+r*(.028874*e-.044475-.005916*r)))]}oa.invert=function(t,n){var e,r=n,i=25;do{var a=r*r,f=a*a;r-=e=(r*(1.007226+a*(.015085+f*(.028874*a-.044475-.005916*f)))-n)/(1.007226+a*(.045255+f*(.259866*a-.311325-.005916*11*f)))}while(Er(e)>Mr&&--i>0);return[t/(.8707+(a=r*r)*(a*(a*a*a*(.003971-.001529*a)-.013791)-.131979)),r]};function ca(t,n){return[Pr(n)*jr(t),jr(n)]}ca.invert=Wi(qr);function ua(t,n){var e=Pr(n),r=1+Pr(t)*e;return[e*jr(t)/r,jr(n)/r]}ua.invert=Wi(function(t){return 2*Ur(t)});function sa(t,n){return[Rr(Or((Tr+n)/2)),-t]}sa.invert=function(t,n){return[-n,2*Ur(Dr(t))-Tr]};function ha(t){var n=0,e=t.children,r=e&&e.length;if(r)for(;--r>=0;)n+=e[r].value;else n=1;t.value=n}function la(t,n){var e,r,i,a,f,o=new ba(t),c=+t.value&&(o.value=t.value),u=[o];for(null==n&&(n=da);e=u.pop();)if(c&&(e.value=+e.data.value),(i=n(e.data))&&(f=i.length))for(e.children=new Array(f),a=f-1;a>=0;--a)u.push(r=e.children[a]=new ba(i[a])),r.parent=e,r.depth=e.depth+1;return o.eachBefore(_a)}function da(t){return t.children}function pa(t){t.data=t.data.data}function _a(t){var n=0;do{t.height=n}while((t=t.parent)&&t.height<++n)}function ba(t){this.data=t,this.depth=this.height=0,this.parent=null}ba.prototype=la.prototype={constructor:ba,count:function(){return this.eachAfter(ha)},each:function(t){var n,e,r,i,a=this,f=[a];do{for(n=f.reverse(),f=[];a=n.pop();)if(t(a),e=a.children)for(r=0,i=e.length;r<i;++r)f.push(e[r])}while(f.length);return this},eachAfter:function(t){for(var n,e,r,i=this,a=[i],f=[];i=a.pop();)if(f.push(i),n=i.children)for(e=0,r=n.length;e<r;++e)a.push(n[e]);for(;i=f.pop();)t(i);return this},eachBefore:function(t){for(var n,e,r=this,i=[r];r=i.pop();)if(t(r),n=r.children)for(e=n.length-1;e>=0;--e)i.push(n[e]);return this},sum:function(t){return this.eachAfter(function(n){for(var e=+t(n.data)||0,r=n.children,i=r&&r.length;--i>=0;)e+=r[i].value;n.value=e})},sort:function(t){return this.eachBefore(function(n){n.children&&n.children.sort(t)})},path:function(t){for(var n=this,e=function(t,n){if(t===n)return t;var e=t.ancestors(),r=n.ancestors(),i=null;for(t=e.pop(),n=r.pop();t===n;)i=t,t=e.pop(),n=r.pop();return i}(n,t),r=[n];n!==e;)n=n.parent,r.push(n);for(var i=r.length;t!==e;)r.splice(i,0,t),t=t.parent;return r},ancestors:function(){for(var t=this,n=[t];t=t.parent;)n.push(t);return n},descendants:function(){var t=[];return this.each(function(n){t.push(n)}),t},leaves:function(){var t=[];return this.eachBefore(function(n){n.children||t.push(n)}),t},links:function(){var t=this,n=[];return t.each(function(e){e!==t&&n.push({source:e.parent,target:e})}),n},copy:function(){return la(this).eachBefore(pa)}};Array.prototype.slice;var va=function(t,n,e,r,i){for(var a,f=t.children,o=-1,c=f.length,u=t.value&&(r-n)/t.value;++o<c;)(a=f[o]).y0=e,a.y1=i,a.x0=n,a.x1=n+=a.value*u};function ya(t,n){this._=t,this.parent=null,this.children=null,this.A=null,this.a=this,this.z=0,this.m=0,this.c=0,this.s=0,this.t=null,this.i=n}ya.prototype=Object.create(ba.prototype);var ga=function(t,n,e,r,i){for(var a,f=t.children,o=-1,c=f.length,u=t.value&&(i-e)/t.value;++o<c;)(a=f[o]).x0=n,a.x1=r,a.y0=e,a.y1=e+=a.value*u},xa=(1+Math.sqrt(5))/2;function ma(t,n,e,r,i,a){for(var f,o,c,u,s,h,l,d,p,_,b,v=[],y=n.children,g=0,x=0,m=y.length,w=n.value;g<m;){c=i-e,u=a-r;do{s=y[x++].value}while(!s&&x<m);for(h=l=s,b=s*s*(_=Math.max(u/c,c/u)/(w*t)),p=Math.max(l/b,b/h);x<m;++x){if(s+=o=y[x].value,o<h&&(h=o),o>l&&(l=o),b=s*s*_,(d=Math.max(l/b,b/h))>p){s-=o;break}p=d}v.push(f={value:s,dice:c<u,children:y.slice(g,x)}),f.dice?va(f,e,r,i,w?r+=u*s/w:a):ga(f,e,r,w?e+=c*s/w:i,a),w-=s,g=x}return v}(function t(n){function e(t,e,r,i,a){ma(n,t,e,r,i,a)}return e.ratio=function(n){return t((n=+n)>1?n:1)},e})(xa),function t(n){function e(t,e,r,i,a){if((f=t._squarify)&&f.ratio===n)for(var f,o,c,u,s,h=-1,l=f.length,d=t.value;++h<l;){for(c=(o=f[h]).children,u=o.value=0,s=c.length;u<s;++u)o.value+=c[u].value;o.dice?va(o,e,r,i,r+=(a-r)*o.value/d):ga(o,e,r,e+=(i-e)*o.value/d,a),d-=o.value}else t._squarify=f=ma(n,t,e,r,i,a),f.ratio=n}return e.ratio=function(n){return t((n=+n)>1?n:1)},e}(xa);var wa=function(){return Math.random()},Ma=(function t(n){function e(t,e){return t=null==t?0:+t,e=null==e?1:+e,1===arguments.length?(e=t,t=0):e-=t,function(){return n()*e+t}}return e.source=t,e}(wa),function t(n){function e(t,e){var r,i;return t=null==t?0:+t,e=null==e?1:+e,function(){var a;if(null!=r)a=r,r=null;else do{r=2*n()-1,a=2*n()-1,i=r*r+a*a}while(!i||i>1);return t+e*a*Math.sqrt(-2*Math.log(i)/i)}}return e.source=t,e}(wa)),Na=(function t(n){function e(){var t=Ma.source(n).apply(this,arguments);return function(){return Math.exp(t())}}return e.source=t,e}(wa),function t(n){function e(t){return function(){for(var e=0,r=0;r<t;++r)e+=n();return e}}return e.source=t,e}(wa));(function t(n){function e(t){var e=Na.source(n)(t);return function(){return e()/t}}return e.source=t,e})(wa),function t(n){function e(t){return function(){return-Math.log(1-n())/t}}return e.source=t,e}(wa);var Ta=Array.prototype;Ta.map,Ta.slice;var Ca=new Date,Sa=new Date;function Aa(t,n,e,r){function i(n){return t(n=new Date(+n)),n}return i.floor=i,i.ceil=function(e){return t(e=new Date(e-1)),n(e,1),t(e),e},i.round=function(t){var n=i(t),e=i.ceil(t);return t-n<e-t?n:e},i.offset=function(t,e){return n(t=new Date(+t),null==e?1:Math.floor(e)),t},i.range=function(e,r,a){var f,o=[];if(e=i.ceil(e),a=null==a?1:Math.floor(a),!(e<r&&a>0))return o;do{o.push(f=new Date(+e)),n(e,a),t(e)}while(f<e&&e<r);return o},i.filter=function(e){return Aa(function(n){if(n>=n)for(;t(n),!e(n);)n.setTime(n-1)},function(t,r){if(t>=t)if(r<0)for(;++r<=0;)for(;n(t,-1),!e(t););else for(;--r>=0;)for(;n(t,1),!e(t););})},e&&(i.count=function(n,r){return Ca.setTime(+n),Sa.setTime(+r),t(Ca),t(Sa),Math.floor(e(Ca,Sa))},i.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?i.filter(r?function(n){return r(n)%t==0}:function(n){return i.count(0,n)%t==0}):i:null}),i}var ka=Aa(function(){},function(t,n){t.setTime(+t+n)},function(t,n){return n-t});ka.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?Aa(function(n){n.setTime(Math.floor(n/t)*t)},function(n,e){n.setTime(+n+e*t)},function(n,e){return(e-n)/t}):ka:null};ka.range;var Ea=6e4,Ua=6048e5,La=Aa(function(t){t.setTime(t-t.getMilliseconds())},function(t,n){t.setTime(+t+1e3*n)},function(t,n){return(n-t)/1e3},function(t){return t.getUTCSeconds()}),Pa=(La.range,Aa(function(t){t.setTime(t-t.getMilliseconds()-1e3*t.getSeconds())},function(t,n){t.setTime(+t+n*Ea)},function(t,n){return(n-t)/Ea},function(t){return t.getMinutes()})),Da=(Pa.range,Aa(function(t){t.setTime(t-t.getMilliseconds()-1e3*t.getSeconds()-t.getMinutes()*Ea)},function(t,n){t.setTime(+t+36e5*n)},function(t,n){return(n-t)/36e5},function(t){return t.getHours()})),Ra=(Da.range,Aa(function(t){t.setHours(0,0,0,0)},function(t,n){t.setDate(t.getDate()+n)},function(t,n){return(n-t-(n.getTimezoneOffset()-t.getTimezoneOffset())*Ea)/864e5},function(t){return t.getDate()-1})),ja=Ra;Ra.range;function Fa(t){return Aa(function(n){n.setDate(n.getDate()-(n.getDay()+7-t)%7),n.setHours(0,0,0,0)},function(t,n){t.setDate(t.getDate()+7*n)},function(t,n){return(n-t-(n.getTimezoneOffset()-t.getTimezoneOffset())*Ea)/Ua})}var Oa=Fa(0),Ya=Fa(1),qa=Fa(2),za=Fa(3),Ha=Fa(4),Ia=Fa(5),$a=Fa(6),Ba=(Oa.range,Ya.range,qa.range,za.range,Ha.range,Ia.range,$a.range,Aa(function(t){t.setDate(1),t.setHours(0,0,0,0)},function(t,n){t.setMonth(t.getMonth()+n)},function(t,n){return n.getMonth()-t.getMonth()+12*(n.getFullYear()-t.getFullYear())},function(t){return t.getMonth()})),Xa=(Ba.range,Aa(function(t){t.setMonth(0,1),t.setHours(0,0,0,0)},function(t,n){t.setFullYear(t.getFullYear()+n)},function(t,n){return n.getFullYear()-t.getFullYear()},function(t){return t.getFullYear()}));Xa.every=function(t){return isFinite(t=Math.floor(t))&&t>0?Aa(function(n){n.setFullYear(Math.floor(n.getFullYear()/t)*t),n.setMonth(0,1),n.setHours(0,0,0,0)},function(n,e){n.setFullYear(n.getFullYear()+e*t)}):null};var Za=Xa,Va=(Xa.range,Aa(function(t){t.setUTCSeconds(0,0)},function(t,n){t.setTime(+t+n*Ea)},function(t,n){return(n-t)/Ea},function(t){return t.getUTCMinutes()})),Wa=(Va.range,Aa(function(t){t.setUTCMinutes(0,0,0)},function(t,n){t.setTime(+t+36e5*n)},function(t,n){return(n-t)/36e5},function(t){return t.getUTCHours()})),Ja=(Wa.range,Aa(function(t){t.setUTCHours(0,0,0,0)},function(t,n){t.setUTCDate(t.getUTCDate()+n)},function(t,n){return(n-t)/864e5},function(t){return t.getUTCDate()-1})),Qa=Ja;Ja.range;function Ga(t){return Aa(function(n){n.setUTCDate(n.getUTCDate()-(n.getUTCDay()+7-t)%7),n.setUTCHours(0,0,0,0)},function(t,n){t.setUTCDate(t.getUTCDate()+7*n)},function(t,n){return(n-t)/Ua})}var Ka=Ga(0),tf=Ga(1),nf=Ga(2),ef=Ga(3),rf=Ga(4),af=Ga(5),ff=Ga(6),of=(Ka.range,tf.range,nf.range,ef.range,rf.range,af.range,ff.range,Aa(function(t){t.setUTCDate(1),t.setUTCHours(0,0,0,0)},function(t,n){t.setUTCMonth(t.getUTCMonth()+n)},function(t,n){return n.getUTCMonth()-t.getUTCMonth()+12*(n.getUTCFullYear()-t.getUTCFullYear())},function(t){return t.getUTCMonth()})),cf=(of.range,Aa(function(t){t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)},function(t,n){t.setUTCFullYear(t.getUTCFullYear()+n)},function(t,n){return n.getUTCFullYear()-t.getUTCFullYear()},function(t){return t.getUTCFullYear()}));cf.every=function(t){return isFinite(t=Math.floor(t))&&t>0?Aa(function(n){n.setUTCFullYear(Math.floor(n.getUTCFullYear()/t)*t),n.setUTCMonth(0,1),n.setUTCHours(0,0,0,0)},function(n,e){n.setUTCFullYear(n.getUTCFullYear()+e*t)}):null};var uf=cf;cf.range;function sf(t){if(0<=t.y&&t.y<100){var n=new Date(-1,t.m,t.d,t.H,t.M,t.S,t.L);return n.setFullYear(t.y),n}return new Date(t.y,t.m,t.d,t.H,t.M,t.S,t.L)}function hf(t){if(0<=t.y&&t.y<100){var n=new Date(Date.UTC(-1,t.m,t.d,t.H,t.M,t.S,t.L));return n.setUTCFullYear(t.y),n}return new Date(Date.UTC(t.y,t.m,t.d,t.H,t.M,t.S,t.L))}function lf(t){return{y:t,m:0,d:1,H:0,M:0,S:0,L:0}}var df,pf,_f,bf={"-":"",_:" ",0:"0"},vf=/^\s*\d+/,yf=/^%/,gf=/[\\^$*+?|[\]().{}]/g;function xf(t,n,e){var r=t<0?"-":"",i=(r?-t:t)+"",a=i.length;return r+(a<e?new Array(e-a+1).join(n)+i:i)}function mf(t){return t.replace(gf,"\\$&")}function wf(t){return new RegExp("^(?:"+t.map(mf).join("|")+")","i")}function Mf(t){for(var n={},e=-1,r=t.length;++e<r;)n[t[e].toLowerCase()]=e;return n}function Nf(t,n,e){var r=vf.exec(n.slice(e,e+1));return r?(t.w=+r[0],e+r[0].length):-1}function Tf(t,n,e){var r=vf.exec(n.slice(e,e+1));return r?(t.u=+r[0],e+r[0].length):-1}function Cf(t,n,e){var r=vf.exec(n.slice(e,e+2));return r?(t.U=+r[0],e+r[0].length):-1}function Sf(t,n,e){var r=vf.exec(n.slice(e,e+2));return r?(t.V=+r[0],e+r[0].length):-1}function Af(t,n,e){var r=vf.exec(n.slice(e,e+2));return r?(t.W=+r[0],e+r[0].length):-1}function kf(t,n,e){var r=vf.exec(n.slice(e,e+4));return r?(t.y=+r[0],e+r[0].length):-1}function Ef(t,n,e){var r=vf.exec(n.slice(e,e+2));return r?(t.y=+r[0]+(+r[0]>68?1900:2e3),e+r[0].length):-1}function Uf(t,n,e){var r=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(n.slice(e,e+6));return r?(t.Z=r[1]?0:-(r[2]+(r[3]||"00")),e+r[0].length):-1}function Lf(t,n,e){var r=vf.exec(n.slice(e,e+2));return r?(t.m=r[0]-1,e+r[0].length):-1}function Pf(t,n,e){var r=vf.exec(n.slice(e,e+2));return r?(t.d=+r[0],e+r[0].length):-1}function Df(t,n,e){var r=vf.exec(n.slice(e,e+3));return r?(t.m=0,t.d=+r[0],e+r[0].length):-1}function Rf(t,n,e){var r=vf.exec(n.slice(e,e+2));return r?(t.H=+r[0],e+r[0].length):-1}function jf(t,n,e){var r=vf.exec(n.slice(e,e+2));return r?(t.M=+r[0],e+r[0].length):-1}function Ff(t,n,e){var r=vf.exec(n.slice(e,e+2));return r?(t.S=+r[0],e+r[0].length):-1}function Of(t,n,e){var r=vf.exec(n.slice(e,e+3));return r?(t.L=+r[0],e+r[0].length):-1}function Yf(t,n,e){var r=vf.exec(n.slice(e,e+6));return r?(t.L=Math.floor(r[0]/1e3),e+r[0].length):-1}function qf(t,n,e){var r=yf.exec(n.slice(e,e+1));return r?e+r[0].length:-1}function zf(t,n,e){var r=vf.exec(n.slice(e));return r?(t.Q=+r[0],e+r[0].length):-1}function Hf(t,n,e){var r=vf.exec(n.slice(e));return r?(t.Q=1e3*+r[0],e+r[0].length):-1}function If(t,n){return xf(t.getDate(),n,2)}function $f(t,n){return xf(t.getHours(),n,2)}function Bf(t,n){return xf(t.getHours()%12||12,n,2)}function Xf(t,n){return xf(1+ja.count(Za(t),t),n,3)}function Zf(t,n){return xf(t.getMilliseconds(),n,3)}function Vf(t,n){return Zf(t,n)+"000"}function Wf(t,n){return xf(t.getMonth()+1,n,2)}function Jf(t,n){return xf(t.getMinutes(),n,2)}function Qf(t,n){return xf(t.getSeconds(),n,2)}function Gf(t){var n=t.getDay();return 0===n?7:n}function Kf(t,n){return xf(Oa.count(Za(t),t),n,2)}function to(t,n){var e=t.getDay();return t=e>=4||0===e?Ha(t):Ha.ceil(t),xf(Ha.count(Za(t),t)+(4===Za(t).getDay()),n,2)}function no(t){return t.getDay()}function eo(t,n){return xf(Ya.count(Za(t),t),n,2)}function ro(t,n){return xf(t.getFullYear()%100,n,2)}function io(t,n){return xf(t.getFullYear()%1e4,n,4)}function ao(t){var n=t.getTimezoneOffset();return(n>0?"-":(n*=-1,"+"))+xf(n/60|0,"0",2)+xf(n%60,"0",2)}function fo(t,n){return xf(t.getUTCDate(),n,2)}function oo(t,n){return xf(t.getUTCHours(),n,2)}function co(t,n){return xf(t.getUTCHours()%12||12,n,2)}function uo(t,n){return xf(1+Qa.count(uf(t),t),n,3)}function so(t,n){return xf(t.getUTCMilliseconds(),n,3)}function ho(t,n){return so(t,n)+"000"}function lo(t,n){return xf(t.getUTCMonth()+1,n,2)}function po(t,n){return xf(t.getUTCMinutes(),n,2)}function _o(t,n){return xf(t.getUTCSeconds(),n,2)}function bo(t){var n=t.getUTCDay();return 0===n?7:n}function vo(t,n){return xf(Ka.count(uf(t),t),n,2)}function yo(t,n){var e=t.getUTCDay();return t=e>=4||0===e?rf(t):rf.ceil(t),xf(rf.count(uf(t),t)+(4===uf(t).getUTCDay()),n,2)}function go(t){return t.getUTCDay()}function xo(t,n){return xf(tf.count(uf(t),t),n,2)}function mo(t,n){return xf(t.getUTCFullYear()%100,n,2)}function wo(t,n){return xf(t.getUTCFullYear()%1e4,n,4)}function Mo(){return"+0000"}function No(){return"%"}function To(t){return+t}function Co(t){return Math.floor(+t/1e3)}!function(t){df=function(t){var n=t.dateTime,e=t.date,r=t.time,i=t.periods,a=t.days,f=t.shortDays,o=t.months,c=t.shortMonths,u=wf(i),s=Mf(i),h=wf(a),l=Mf(a),d=wf(f),p=Mf(f),_=wf(o),b=Mf(o),v=wf(c),y=Mf(c),g={a:function(t){return f[t.getDay()]},A:function(t){return a[t.getDay()]},b:function(t){return c[t.getMonth()]},B:function(t){return o[t.getMonth()]},c:null,d:If,e:If,f:Vf,H:$f,I:Bf,j:Xf,L:Zf,m:Wf,M:Jf,p:function(t){return i[+(t.getHours()>=12)]},Q:To,s:Co,S:Qf,u:Gf,U:Kf,V:to,w:no,W:eo,x:null,X:null,y:ro,Y:io,Z:ao,"%":No},x={a:function(t){return f[t.getUTCDay()]},A:function(t){return a[t.getUTCDay()]},b:function(t){return c[t.getUTCMonth()]},B:function(t){return o[t.getUTCMonth()]},c:null,d:fo,e:fo,f:ho,H:oo,I:co,j:uo,L:so,m:lo,M:po,p:function(t){return i[+(t.getUTCHours()>=12)]},Q:To,s:Co,S:_o,u:bo,U:vo,V:yo,w:go,W:xo,x:null,X:null,y:mo,Y:wo,Z:Mo,"%":No},m={a:function(t,n,e){var r=d.exec(n.slice(e));return r?(t.w=p[r[0].toLowerCase()],e+r[0].length):-1},A:function(t,n,e){var r=h.exec(n.slice(e));return r?(t.w=l[r[0].toLowerCase()],e+r[0].length):-1},b:function(t,n,e){var r=v.exec(n.slice(e));return r?(t.m=y[r[0].toLowerCase()],e+r[0].length):-1},B:function(t,n,e){var r=_.exec(n.slice(e));return r?(t.m=b[r[0].toLowerCase()],e+r[0].length):-1},c:function(t,e,r){return N(t,n,e,r)},d:Pf,e:Pf,f:Yf,H:Rf,I:Rf,j:Df,L:Of,m:Lf,M:jf,p:function(t,n,e){var r=u.exec(n.slice(e));return r?(t.p=s[r[0].toLowerCase()],e+r[0].length):-1},Q:zf,s:Hf,S:Ff,u:Tf,U:Cf,V:Sf,w:Nf,W:Af,x:function(t,n,r){return N(t,e,n,r)},X:function(t,n,e){return N(t,r,n,e)},y:Ef,Y:kf,Z:Uf,"%":qf};function w(t,n){return function(e){var r,i,a,f=[],o=-1,c=0,u=t.length;for(e instanceof Date||(e=new Date(+e));++o<u;)37===t.charCodeAt(o)&&(f.push(t.slice(c,o)),null!=(i=bf[r=t.charAt(++o)])?r=t.charAt(++o):i="e"===r?" ":"0",(a=n[r])&&(r=a(e,i)),f.push(r),c=o+1);return f.push(t.slice(c,o)),f.join("")}}function M(t,n){return function(e){var r,i,a=lf(1900);if(N(a,t,e+="",0)!=e.length)return null;if("Q"in a)return new Date(a.Q);if("p"in a&&(a.H=a.H%12+12*a.p),"V"in a){if(a.V<1||a.V>53)return null;"w"in a||(a.w=1),"Z"in a?(i=(r=hf(lf(a.y))).getUTCDay(),r=i>4||0===i?tf.ceil(r):tf(r),r=Qa.offset(r,7*(a.V-1)),a.y=r.getUTCFullYear(),a.m=r.getUTCMonth(),a.d=r.getUTCDate()+(a.w+6)%7):(i=(r=n(lf(a.y))).getDay(),r=i>4||0===i?Ya.ceil(r):Ya(r),r=ja.offset(r,7*(a.V-1)),a.y=r.getFullYear(),a.m=r.getMonth(),a.d=r.getDate()+(a.w+6)%7)}else("W"in a||"U"in a)&&("w"in a||(a.w="u"in a?a.u%7:"W"in a?1:0),i="Z"in a?hf(lf(a.y)).getUTCDay():n(lf(a.y)).getDay(),a.m=0,a.d="W"in a?(a.w+6)%7+7*a.W-(i+5)%7:a.w+7*a.U-(i+6)%7);return"Z"in a?(a.H+=a.Z/100|0,a.M+=a.Z%100,hf(a)):n(a)}}function N(t,n,e,r){for(var i,a,f=0,o=n.length,c=e.length;f<o;){if(r>=c)return-1;if(37===(i=n.charCodeAt(f++))){if(i=n.charAt(f++),!(a=m[i in bf?n.charAt(f++):i])||(r=a(t,e,r))<0)return-1}else if(i!=e.charCodeAt(r++))return-1}return r}return g.x=w(e,g),g.X=w(r,g),g.c=w(n,g),x.x=w(e,x),x.X=w(r,x),x.c=w(n,x),{format:function(t){var n=w(t+="",g);return n.toString=function(){return t},n},parse:function(t){var n=M(t+="",sf);return n.toString=function(){return t},n},utcFormat:function(t){var n=w(t+="",x);return n.toString=function(){return t},n},utcParse:function(t){var n=M(t,hf);return n.toString=function(){return t},n}}}(t),df.format,df.parse,pf=df.utcFormat,_f=df.utcParse}({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});Date.prototype.toISOString||pf("%Y-%m-%dT%H:%M:%S.%LZ");+new Date("2000-01-01T00:00:00.000Z")||_f("%Y-%m-%dT%H:%M:%S.%LZ");var So=function(t){for(var n=t.length/6|0,e=new Array(n),r=0;r<n;)e[r]="#"+t.slice(6*r,6*++r);return e},Ao=(So("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf"),So("7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666"),So("1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666"),So("a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928"),So("fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2"),So("b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc"),So("e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999"),So("66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3"),So("8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f"),function(t){return ln(t[t.length-1])});Ao(new Array(3).concat("d8b365f5f5f55ab4ac","a6611adfc27d80cdc1018571","a6611adfc27df5f5f580cdc1018571","8c510ad8b365f6e8c3c7eae55ab4ac01665e","8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e","8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e","8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e","5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30","5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30").map(So)),Ao(new Array(3).concat("af8dc3f7f7f77fbf7b","7b3294c2a5cfa6dba0008837","7b3294c2a5cff7f7f7a6dba0008837","762a83af8dc3e7d4e8d9f0d37fbf7b1b7837","762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837","762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837","762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837","40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b","40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b").map(So)),Ao(new Array(3).concat("e9a3c9f7f7f7a1d76a","d01c8bf1b6dab8e1864dac26","d01c8bf1b6daf7f7f7b8e1864dac26","c51b7de9a3c9fde0efe6f5d0a1d76a4d9221","c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221","c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221","c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221","8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419","8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419").map(So)),Ao(new Array(3).concat("998ec3f7f7f7f1a340","5e3c99b2abd2fdb863e66101","5e3c99b2abd2f7f7f7fdb863e66101","542788998ec3d8daebfee0b6f1a340b35806","542788998ec3d8daebf7f7f7fee0b6f1a340b35806","5427888073acb2abd2d8daebfee0b6fdb863e08214b35806","5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806","2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08","2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08").map(So)),Ao(new Array(3).concat("ef8a62f7f7f767a9cf","ca0020f4a58292c5de0571b0","ca0020f4a582f7f7f792c5de0571b0","b2182bef8a62fddbc7d1e5f067a9cf2166ac","b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac","b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac","b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac","67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061","67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061").map(So)),Ao(new Array(3).concat("ef8a62ffffff999999","ca0020f4a582bababa404040","ca0020f4a582ffffffbababa404040","b2182bef8a62fddbc7e0e0e09999994d4d4d","b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d","b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d","b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d","67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a","67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a").map(So)),Ao(new Array(3).concat("fc8d59ffffbf91bfdb","d7191cfdae61abd9e92c7bb6","d7191cfdae61ffffbfabd9e92c7bb6","d73027fc8d59fee090e0f3f891bfdb4575b4","d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4","d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4","d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4","a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695","a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695").map(So)),Ao(new Array(3).concat("fc8d59ffffbf91cf60","d7191cfdae61a6d96a1a9641","d7191cfdae61ffffbfa6d96a1a9641","d73027fc8d59fee08bd9ef8b91cf601a9850","d73027fc8d59fee08bffffbfd9ef8b91cf601a9850","d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850","d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850","a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837","a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837").map(So)),Ao(new Array(3).concat("fc8d59ffffbf99d594","d7191cfdae61abdda42b83ba","d7191cfdae61ffffbfabdda42b83ba","d53e4ffc8d59fee08be6f59899d5943288bd","d53e4ffc8d59fee08bffffbfe6f59899d5943288bd","d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd","d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd","9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2","9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2").map(So)),Ao(new Array(3).concat("e5f5f999d8c92ca25f","edf8fbb2e2e266c2a4238b45","edf8fbb2e2e266c2a42ca25f006d2c","edf8fbccece699d8c966c2a42ca25f006d2c","edf8fbccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b").map(So)),Ao(new Array(3).concat("e0ecf49ebcda8856a7","edf8fbb3cde38c96c688419d","edf8fbb3cde38c96c68856a7810f7c","edf8fbbfd3e69ebcda8c96c68856a7810f7c","edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b","f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b","f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b").map(So)),Ao(new Array(3).concat("e0f3dba8ddb543a2ca","f0f9e8bae4bc7bccc42b8cbe","f0f9e8bae4bc7bccc443a2ca0868ac","f0f9e8ccebc5a8ddb57bccc443a2ca0868ac","f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e","f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e","f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081").map(So)),Ao(new Array(3).concat("fee8c8fdbb84e34a33","fef0d9fdcc8afc8d59d7301f","fef0d9fdcc8afc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000").map(So)),Ao(new Array(3).concat("ece2f0a6bddb1c9099","f6eff7bdc9e167a9cf02818a","f6eff7bdc9e167a9cf1c9099016c59","f6eff7d0d1e6a6bddb67a9cf1c9099016c59","f6eff7d0d1e6a6bddb67a9cf3690c002818a016450","fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450","fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636").map(So)),Ao(new Array(3).concat("ece7f2a6bddb2b8cbe","f1eef6bdc9e174a9cf0570b0","f1eef6bdc9e174a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858").map(So)),Ao(new Array(3).concat("e7e1efc994c7dd1c77","f1eef6d7b5d8df65b0ce1256","f1eef6d7b5d8df65b0dd1c77980043","f1eef6d4b9dac994c7df65b0dd1c77980043","f1eef6d4b9dac994c7df65b0e7298ace125691003f","f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f","f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f").map(So)),Ao(new Array(3).concat("fde0ddfa9fb5c51b8a","feebe2fbb4b9f768a1ae017e","feebe2fbb4b9f768a1c51b8a7a0177","feebe2fcc5c0fa9fb5f768a1c51b8a7a0177","feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177","fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177","fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a").map(So)),Ao(new Array(3).concat("edf8b17fcdbb2c7fb8","ffffcca1dab441b6c4225ea8","ffffcca1dab441b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58").map(So)),Ao(new Array(3).concat("f7fcb9addd8e31a354","ffffccc2e69978c679238443","ffffccc2e69978c67931a354006837","ffffccd9f0a3addd8e78c67931a354006837","ffffccd9f0a3addd8e78c67941ab5d238443005a32","ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32","ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529").map(So)),Ao(new Array(3).concat("fff7bcfec44fd95f0e","ffffd4fed98efe9929cc4c02","ffffd4fed98efe9929d95f0e993404","ffffd4fee391fec44ffe9929d95f0e993404","ffffd4fee391fec44ffe9929ec7014cc4c028c2d04","ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04","ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506").map(So)),Ao(new Array(3).concat("ffeda0feb24cf03b20","ffffb2fecc5cfd8d3ce31a1c","ffffb2fecc5cfd8d3cf03b20bd0026","ffffb2fed976feb24cfd8d3cf03b20bd0026","ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026","ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026","ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026").map(So)),Ao(new Array(3).concat("deebf79ecae13182bd","eff3ffbdd7e76baed62171b5","eff3ffbdd7e76baed63182bd08519c","eff3ffc6dbef9ecae16baed63182bd08519c","eff3ffc6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b").map(So)),Ao(new Array(3).concat("e5f5e0a1d99b31a354","edf8e9bae4b374c476238b45","edf8e9bae4b374c47631a354006d2c","edf8e9c7e9c0a1d99b74c47631a354006d2c","edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b").map(So)),Ao(new Array(3).concat("f0f0f0bdbdbd636363","f7f7f7cccccc969696525252","f7f7f7cccccc969696636363252525","f7f7f7d9d9d9bdbdbd969696636363252525","f7f7f7d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000").map(So)),Ao(new Array(3).concat("efedf5bcbddc756bb1","f2f0f7cbc9e29e9ac86a51a3","f2f0f7cbc9e29e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d").map(So)),Ao(new Array(3).concat("fee0d2fc9272de2d26","fee5d9fcae91fb6a4acb181d","fee5d9fcae91fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d").map(So)),Ao(new Array(3).concat("fee6cefdae6be6550d","feeddefdbe85fd8d3cd94701","feeddefdbe85fd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704").map(So)),En(nn(300,.5,0),nn(-240,.5,1)),En(nn(-100,.75,.35),nn(80,1.5,.8)),En(nn(260,.75,.35),nn(80,1.5,.8)),nn(),Mt(),Math.PI,Math.PI;function ko(t){var n=t.length;return function(e){return t[Math.max(0,Math.min(n-1,Math.floor(e*n)))]}}ko(So("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725")),ko(So("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf")),ko(So("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4")),ko(So("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921")),Math.abs,Math.atan2,Math.cos,Math.max,Math.min,Math.sin,Math.sqrt;var Eo=1e-12,Uo=Math.PI,Lo=2*Uo;function Po(t){this._context=t}Po.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;default:this._context.lineTo(t,n)}}};var Do=function(t){return new Po(t)};jo(Do);function Ro(t){this._curve=t}function jo(t){function n(n){return new Ro(t(n))}return n._curve=t,n}Ro.prototype={areaStart:function(){this._curve.areaStart()},areaEnd:function(){this._curve.areaEnd()},lineStart:function(){this._curve.lineStart()},lineEnd:function(){this._curve.lineEnd()},point:function(t,n){this._curve.point(n*Math.sin(t),n*-Math.cos(t))}};Array.prototype.slice;Math.sqrt(1/3);var Fo=Math.sin(Uo/10)/Math.sin(7*Uo/10),Oo=(Math.sin(Lo/10),Math.cos(Lo/10),Math.sqrt(3),Math.sqrt(3),Math.sqrt(12),function(){});function Yo(t,n,e){t._context.bezierCurveTo((2*t._x0+t._x1)/3,(2*t._y0+t._y1)/3,(t._x0+2*t._x1)/3,(t._y0+2*t._y1)/3,(t._x0+4*t._x1+n)/6,(t._y0+4*t._y1+e)/6)}function qo(t){this._context=t}qo.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){switch(this._point){case 3:Yo(this,this._x1,this._y1);case 2:this._context.lineTo(this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;break;case 2:this._point=3,this._context.lineTo((5*this._x0+this._x1)/6,(5*this._y0+this._y1)/6);default:Yo(this,t,n)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n}};function zo(t){this._context=t}zo.prototype={areaStart:Oo,areaEnd:Oo,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._y0=this._y1=this._y2=this._y3=this._y4=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x2,this._y2),this._context.closePath();break;case 2:this._context.moveTo((this._x2+2*this._x3)/3,(this._y2+2*this._y3)/3),this._context.lineTo((this._x3+2*this._x2)/3,(this._y3+2*this._y2)/3),this._context.closePath();break;case 3:this.point(this._x2,this._y2),this.point(this._x3,this._y3),this.point(this._x4,this._y4)}},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._x2=t,this._y2=n;break;case 1:this._point=2,this._x3=t,this._y3=n;break;case 2:this._point=3,this._x4=t,this._y4=n,this._context.moveTo((this._x0+4*this._x1+t)/6,(this._y0+4*this._y1+n)/6);break;default:Yo(this,t,n)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n}};function Ho(t){this._context=t}Ho.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3;var e=(this._x0+4*this._x1+t)/6,r=(this._y0+4*this._y1+n)/6;this._line?this._context.lineTo(e,r):this._context.moveTo(e,r);break;case 3:this._point=4;default:Yo(this,t,n)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n}};function Io(t,n){this._basis=new qo(t),this._beta=n}Io.prototype={lineStart:function(){this._x=[],this._y=[],this._basis.lineStart()},lineEnd:function(){var t=this._x,n=this._y,e=t.length-1;if(e>0)for(var r,i=t[0],a=n[0],f=t[e]-i,o=n[e]-a,c=-1;++c<=e;)r=c/e,this._basis.point(this._beta*t[c]+(1-this._beta)*(i+r*f),this._beta*n[c]+(1-this._beta)*(a+r*o));this._x=this._y=null,this._basis.lineEnd()},point:function(t,n){this._x.push(+t),this._y.push(+n)}};(function t(n){function e(t){return 1===n?new qo(t):new Io(t,n)}return e.beta=function(n){return t(+n)},e})(.85);function $o(t,n,e){t._context.bezierCurveTo(t._x1+t._k*(t._x2-t._x0),t._y1+t._k*(t._y2-t._y0),t._x2+t._k*(t._x1-n),t._y2+t._k*(t._y1-e),t._x2,t._y2)}function Bo(t,n){this._context=t,this._k=(1-n)/6}Bo.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:$o(this,this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2,this._x1=t,this._y1=n;break;case 2:this._point=3;default:$o(this,t,n)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};(function t(n){function e(t){return new Bo(t,n)}return e.tension=function(n){return t(+n)},e})(0);function Xo(t,n){this._context=t,this._k=(1-n)/6}Xo.prototype={areaStart:Oo,areaEnd:Oo,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._x3=t,this._y3=n;break;case 1:this._point=2,this._context.moveTo(this._x4=t,this._y4=n);break;case 2:this._point=3,this._x5=t,this._y5=n;break;default:$o(this,t,n)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};(function t(n){function e(t){return new Xo(t,n)}return e.tension=function(n){return t(+n)},e})(0);function Zo(t,n){this._context=t,this._k=(1-n)/6}Zo.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:$o(this,t,n)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};(function t(n){function e(t){return new Zo(t,n)}return e.tension=function(n){return t(+n)},e})(0);function Vo(t,n,e){var r=t._x1,i=t._y1,a=t._x2,f=t._y2;if(t._l01_a>Eo){var o=2*t._l01_2a+3*t._l01_a*t._l12_a+t._l12_2a,c=3*t._l01_a*(t._l01_a+t._l12_a);r=(r*o-t._x0*t._l12_2a+t._x2*t._l01_2a)/c,i=(i*o-t._y0*t._l12_2a+t._y2*t._l01_2a)/c}if(t._l23_a>Eo){var u=2*t._l23_2a+3*t._l23_a*t._l12_a+t._l12_2a,s=3*t._l23_a*(t._l23_a+t._l12_a);a=(a*u+t._x1*t._l23_2a-n*t._l12_2a)/s,f=(f*u+t._y1*t._l23_2a-e*t._l12_2a)/s}t._context.bezierCurveTo(r,i,a,f,t._x2,t._y2)}function Wo(t,n){this._context=t,this._alpha=n}Wo.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:this.point(this._x2,this._y2)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){if(t=+t,n=+n,this._point){var e=this._x2-t,r=this._y2-n;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(e*e+r*r,this._alpha))}switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;break;case 2:this._point=3;default:Vo(this,t,n)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};(function t(n){function e(t){return n?new Wo(t,n):new Bo(t,0)}return e.alpha=function(n){return t(+n)},e})(.5);function Jo(t,n){this._context=t,this._alpha=n}Jo.prototype={areaStart:Oo,areaEnd:Oo,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(t,n){if(t=+t,n=+n,this._point){var e=this._x2-t,r=this._y2-n;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(e*e+r*r,this._alpha))}switch(this._point){case 0:this._point=1,this._x3=t,this._y3=n;break;case 1:this._point=2,this._context.moveTo(this._x4=t,this._y4=n);break;case 2:this._point=3,this._x5=t,this._y5=n;break;default:Vo(this,t,n)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};(function t(n){function e(t){return n?new Jo(t,n):new Xo(t,0)}return e.alpha=function(n){return t(+n)},e})(.5);function Qo(t,n){this._context=t,this._alpha=n}Qo.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){if(t=+t,n=+n,this._point){var e=this._x2-t,r=this._y2-n;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(e*e+r*r,this._alpha))}switch(this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:Vo(this,t,n)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};(function t(n){function e(t){return n?new Qo(t,n):new Zo(t,0)}return e.alpha=function(n){return t(+n)},e})(.5);function Go(t){this._context=t}Go.prototype={areaStart:Oo,areaEnd:Oo,lineStart:function(){this._point=0},lineEnd:function(){this._point&&this._context.closePath()},point:function(t,n){t=+t,n=+n,this._point?this._context.lineTo(t,n):(this._point=1,this._context.moveTo(t,n))}};function Ko(t){return t<0?-1:1}function tc(t,n,e){var r=t._x1-t._x0,i=n-t._x1,a=(t._y1-t._y0)/(r||i<0&&-0),f=(e-t._y1)/(i||r<0&&-0),o=(a*i+f*r)/(r+i);return(Ko(a)+Ko(f))*Math.min(Math.abs(a),Math.abs(f),.5*Math.abs(o))||0}function nc(t,n){var e=t._x1-t._x0;return e?(3*(t._y1-t._y0)/e-n)/2:n}function ec(t,n,e){var r=t._x0,i=t._y0,a=t._x1,f=t._y1,o=(a-r)/3;t._context.bezierCurveTo(r+o,i+o*n,a-o,f-o*e,a,f)}function rc(t){this._context=t}function ic(t){this._context=new ac(t)}function ac(t){this._context=t}function fc(t){this._context=t}function oc(t){var n,e,r=t.length-1,i=new Array(r),a=new Array(r),f=new Array(r);for(i[0]=0,a[0]=2,f[0]=t[0]+2*t[1],n=1;n<r-1;++n)i[n]=1,a[n]=4,f[n]=4*t[n]+2*t[n+1];for(i[r-1]=2,a[r-1]=7,f[r-1]=8*t[r-1]+t[r],n=1;n<r;++n)e=i[n]/a[n-1],a[n]-=e,f[n]-=e*f[n-1];for(i[r-1]=f[r-1]/a[r-1],n=r-2;n>=0;--n)i[n]=(f[n]-i[n+1])/a[n];for(a[r-1]=(t[r]+i[r-1])/2,n=0;n<r-1;++n)a[n]=2*t[n+1]-i[n+1];return[i,a]}rc.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=this._t0=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x1,this._y1);break;case 3:ec(this,this._t0,nc(this,this._t0))}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){var e=NaN;if(n=+n,(t=+t)!==this._x1||n!==this._y1){switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;break;case 2:this._point=3,ec(this,nc(this,e=tc(this,t,n)),e);break;default:ec(this,this._t0,e=tc(this,t,n))}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n,this._t0=e}}},(ic.prototype=Object.create(rc.prototype)).point=function(t,n){rc.prototype.point.call(this,n,t)},ac.prototype={moveTo:function(t,n){this._context.moveTo(n,t)},closePath:function(){this._context.closePath()},lineTo:function(t,n){this._context.lineTo(n,t)},bezierCurveTo:function(t,n,e,r,i,a){this._context.bezierCurveTo(n,t,r,e,a,i)}},fc.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=[],this._y=[]},lineEnd:function(){var t=this._x,n=this._y,e=t.length;if(e)if(this._line?this._context.lineTo(t[0],n[0]):this._context.moveTo(t[0],n[0]),2===e)this._context.lineTo(t[1],n[1]);else for(var r=oc(t),i=oc(n),a=0,f=1;f<e;++a,++f)this._context.bezierCurveTo(r[0][a],i[0][a],r[1][a],i[1][a],t[f],n[f]);(this._line||0!==this._line&&1===e)&&this._context.closePath(),this._line=1-this._line,this._x=this._y=null},point:function(t,n){this._x.push(+t),this._y.push(+n)}};function cc(t,n){this._context=t,this._t=n}cc.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=this._y=NaN,this._point=0},lineEnd:function(){0<this._t&&this._t<1&&2===this._point&&this._context.lineTo(this._x,this._y),(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line>=0&&(this._t=1-this._t,this._line=1-this._line)},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;default:if(this._t<=0)this._context.lineTo(this._x,n),this._context.lineTo(t,n);else{var e=this._x*(1-this._t)+t*this._t;this._context.lineTo(e,this._y),this._context.lineTo(e,n)}}this._x=t,this._y=n}};function uc(){this._=null}function sc(t){t.U=t.C=t.L=t.R=t.P=t.N=null}function hc(t,n){var e=n,r=n.R,i=e.U;i?i.L===e?i.L=r:i.R=r:t._=r,r.U=i,e.U=r,e.R=r.L,e.R&&(e.R.U=e),r.L=e}function lc(t,n){var e=n,r=n.L,i=e.U;i?i.L===e?i.L=r:i.R=r:t._=r,r.U=i,e.U=r,e.L=r.R,e.L&&(e.L.U=e),r.R=e}function dc(t){for(;t.L;)t=t.L;return t}uc.prototype={constructor:uc,insert:function(t,n){var e,r,i;if(t){if(n.P=t,n.N=t.N,t.N&&(t.N.P=n),t.N=n,t.R){for(t=t.R;t.L;)t=t.L;t.L=n}else t.R=n;e=t}else this._?(t=dc(this._),n.P=null,n.N=t,t.P=t.L=n,e=t):(n.P=n.N=null,this._=n,e=null);for(n.L=n.R=null,n.U=e,n.C=!0,t=n;e&&e.C;)e===(r=e.U).L?(i=r.R)&&i.C?(e.C=i.C=!1,r.C=!0,t=r):(t===e.R&&(hc(this,e),e=(t=e).U),e.C=!1,r.C=!0,lc(this,r)):(i=r.L)&&i.C?(e.C=i.C=!1,r.C=!0,t=r):(t===e.L&&(lc(this,e),e=(t=e).U),e.C=!1,r.C=!0,hc(this,r)),e=t.U;this._.C=!1},remove:function(t){t.N&&(t.N.P=t.P),t.P&&(t.P.N=t.N),t.N=t.P=null;var n,e,r,i=t.U,a=t.L,f=t.R;if(e=a?f?dc(f):a:f,i?i.L===t?i.L=e:i.R=e:this._=e,a&&f?(r=e.C,e.C=t.C,e.L=a,a.U=e,e!==f?(i=e.U,e.U=t.U,t=e.R,i.L=t,e.R=f,f.U=e):(e.U=i,i=e,t=e.R)):(r=t.C,t=e),t&&(t.U=i),!r)if(t&&t.C)t.C=!1;else{do{if(t===this._)break;if(t===i.L){if((n=i.R).C&&(n.C=!1,i.C=!0,hc(this,i),n=i.R),n.L&&n.L.C||n.R&&n.R.C){n.R&&n.R.C||(n.L.C=!1,n.C=!0,lc(this,n),n=i.R),n.C=i.C,i.C=n.R.C=!1,hc(this,i),t=this._;break}}else if((n=i.L).C&&(n.C=!1,i.C=!0,lc(this,i),n=i.L),n.L&&n.L.C||n.R&&n.R.C){n.L&&n.L.C||(n.R.C=!1,n.C=!0,hc(this,n),n=i.L),n.C=i.C,i.C=n.L.C=!1,lc(this,i),t=this._;break}n.C=!0,t=i,i=i.U}while(!t.C);t&&(t.C=!1)}}};var pc=uc;function _c(t,n,e,r){var i=[null,null],a=Yc.push(i)-1;return i.left=t,i.right=n,e&&vc(i,t,n,e),r&&vc(i,n,t,r),Fc[t.index].halfedges.push(a),Fc[n.index].halfedges.push(a),i}function bc(t,n,e){var r=[n,e];return r.left=t,r}function vc(t,n,e,r){t[0]||t[1]?t.left===e?t[1]=r:t[0]=r:(t[0]=r,t.left=n,t.right=e)}function yc(t,n,e,r,i){var a,f=t[0],o=t[1],c=f[0],u=f[1],s=0,h=1,l=o[0]-c,d=o[1]-u;if(a=n-c,l||!(a>0)){if(a/=l,l<0){if(a<s)return;a<h&&(h=a)}else if(l>0){if(a>h)return;a>s&&(s=a)}if(a=r-c,l||!(a<0)){if(a/=l,l<0){if(a>h)return;a>s&&(s=a)}else if(l>0){if(a<s)return;a<h&&(h=a)}if(a=e-u,d||!(a>0)){if(a/=d,d<0){if(a<s)return;a<h&&(h=a)}else if(d>0){if(a>h)return;a>s&&(s=a)}if(a=i-u,d||!(a<0)){if(a/=d,d<0){if(a>h)return;a>s&&(s=a)}else if(d>0){if(a<s)return;a<h&&(h=a)}return!(s>0||h<1)||(s>0&&(t[0]=[c+s*l,u+s*d]),h<1&&(t[1]=[c+h*l,u+h*d]),!0)}}}}}function gc(t,n,e,r,i){var a=t[1];if(a)return!0;var f,o,c=t[0],u=t.left,s=t.right,h=u[0],l=u[1],d=s[0],p=s[1],_=(h+d)/2,b=(l+p)/2;if(p===l){if(_<n||_>=r)return;if(h>d){if(c){if(c[1]>=i)return}else c=[_,e];a=[_,i]}else{if(c){if(c[1]<e)return}else c=[_,i];a=[_,e]}}else if(o=b-(f=(h-d)/(p-l))*_,f<-1||f>1)if(h>d){if(c){if(c[1]>=i)return}else c=[(e-o)/f,e];a=[(i-o)/f,i]}else{if(c){if(c[1]<e)return}else c=[(i-o)/f,i];a=[(e-o)/f,e]}else if(l<p){if(c){if(c[0]>=r)return}else c=[n,f*n+o];a=[r,f*r+o]}else{if(c){if(c[0]<n)return}else c=[r,f*r+o];a=[n,f*n+o]}return t[0]=c,t[1]=a,!0}function xc(t,n){var e=t.site,r=n.left,i=n.right;return e===i&&(i=r,r=e),i?Math.atan2(i[1]-r[1],i[0]-r[0]):(e===r?(r=n[1],i=n[0]):(r=n[0],i=n[1]),Math.atan2(r[0]-i[0],i[1]-r[1]))}function mc(t,n){return n[+(n.left!==t.site)]}function wc(t,n){return n[+(n.left===t.site)]}var Mc,Nc=[];function Tc(){sc(this),this.x=this.y=this.arc=this.site=this.cy=null}function Cc(t){var n=t.P,e=t.N;if(n&&e){var r=n.site,i=t.site,a=e.site;if(r!==a){var f=i[0],o=i[1],c=r[0]-f,u=r[1]-o,s=a[0]-f,h=a[1]-o,l=2*(c*h-u*s);if(!(l>=-zc)){var d=c*c+u*u,p=s*s+h*h,_=(h*d-u*p)/l,b=(c*p-s*d)/l,v=Nc.pop()||new Tc;v.arc=t,v.site=i,v.x=_+f,v.y=(v.cy=b+o)+Math.sqrt(_*_+b*b),t.circle=v;for(var y=null,g=Oc._;g;)if(v.y<g.y||v.y===g.y&&v.x<=g.x){if(!g.L){y=g.P;break}g=g.L}else{if(!g.R){y=g;break}g=g.R}Oc.insert(y,v),y||(Mc=v)}}}}function Sc(t){var n=t.circle;n&&(n.P||(Mc=n.N),Oc.remove(n),Nc.push(n),sc(n),t.circle=null)}var Ac=[];function kc(){sc(this),this.edge=this.site=this.circle=null}function Ec(t){var n=Ac.pop()||new kc;return n.site=t,n}function Uc(t){Sc(t),jc.remove(t),Ac.push(t),sc(t)}function Lc(t){var n=t.circle,e=n.x,r=n.cy,i=[e,r],a=t.P,f=t.N,o=[t];Uc(t);for(var c=a;c.circle&&Math.abs(e-c.circle.x)<qc&&Math.abs(r-c.circle.cy)<qc;)a=c.P,o.unshift(c),Uc(c),c=a;o.unshift(c),Sc(c);for(var u=f;u.circle&&Math.abs(e-u.circle.x)<qc&&Math.abs(r-u.circle.cy)<qc;)f=u.N,o.push(u),Uc(u),u=f;o.push(u),Sc(u);var s,h=o.length;for(s=1;s<h;++s)u=o[s],c=o[s-1],vc(u.edge,c.site,u.site,i);c=o[0],(u=o[h-1]).edge=_c(c.site,u.site,null,i),Cc(c),Cc(u)}function Pc(t){for(var n,e,r,i,a=t[0],f=t[1],o=jc._;o;)if((r=Dc(o,f)-a)>qc)o=o.L;else{if(!((i=a-Rc(o,f))>qc)){r>-qc?(n=o.P,e=o):i>-qc?(n=o,e=o.N):n=e=o;break}if(!o.R){n=o;break}o=o.R}!function(t){Fc[t.index]={site:t,halfedges:[]}}(t);var c=Ec(t);if(jc.insert(n,c),n||e){if(n===e)return Sc(n),e=Ec(n.site),jc.insert(c,e),c.edge=e.edge=_c(n.site,c.site),Cc(n),void Cc(e);if(e){Sc(n),Sc(e);var u=n.site,s=u[0],h=u[1],l=t[0]-s,d=t[1]-h,p=e.site,_=p[0]-s,b=p[1]-h,v=2*(l*b-d*_),y=l*l+d*d,g=_*_+b*b,x=[(b*y-d*g)/v+s,(l*g-_*y)/v+h];vc(e.edge,u,p,x),c.edge=_c(u,t,null,x),e.edge=_c(t,p,null,x),Cc(n),Cc(e)}else c.edge=_c(n.site,c.site)}}function Dc(t,n){var e=t.site,r=e[0],i=e[1],a=i-n;if(!a)return r;var f=t.P;if(!f)return-1/0;var o=(e=f.site)[0],c=e[1],u=c-n;if(!u)return o;var s=o-r,h=1/a-1/u,l=s/u;return h?(-l+Math.sqrt(l*l-2*h*(s*s/(-2*u)-c+u/2+i-a/2)))/h+r:(r+o)/2}function Rc(t,n){var e=t.N;if(e)return Dc(e,n);var r=t.site;return r[1]===n?r[0]:1/0}var jc,Fc,Oc,Yc,qc=1e-6,zc=1e-12;function Hc(t,n){return n[1]-t[1]||n[0]-t[0]}function Ic(t,n){var e,r,i,a=t.sort(Hc).pop();for(Yc=[],Fc=new Array(t.length),jc=new pc,Oc=new pc;;)if(i=Mc,a&&(!i||a[1]<i.y||a[1]===i.y&&a[0]<i.x))a[0]===e&&a[1]===r||(Pc(a),e=a[0],r=a[1]),a=t.pop();else{if(!i)break;Lc(i.arc)}if(function(){for(var t,n,e,r,i=0,a=Fc.length;i<a;++i)if((t=Fc[i])&&(r=(n=t.halfedges).length)){var f=new Array(r),o=new Array(r);for(e=0;e<r;++e)f[e]=e,o[e]=xc(t,Yc[n[e]]);for(f.sort(function(t,n){return o[n]-o[t]}),e=0;e<r;++e)o[e]=n[f[e]];for(e=0;e<r;++e)n[e]=o[e]}}(),n){var f=+n[0][0],o=+n[0][1],c=+n[1][0],u=+n[1][1];!function(t,n,e,r){for(var i,a=Yc.length;a--;)gc(i=Yc[a],t,n,e,r)&&yc(i,t,n,e,r)&&(Math.abs(i[0][0]-i[1][0])>qc||Math.abs(i[0][1]-i[1][1])>qc)||delete Yc[a]}(f,o,c,u),function(t,n,e,r){var i,a,f,o,c,u,s,h,l,d,p,_,b=Fc.length,v=!0;for(i=0;i<b;++i)if(a=Fc[i]){for(f=a.site,o=(c=a.halfedges).length;o--;)Yc[c[o]]||c.splice(o,1);for(o=0,u=c.length;o<u;)p=(d=wc(a,Yc[c[o]]))[0],_=d[1],h=(s=mc(a,Yc[c[++o%u]]))[0],l=s[1],(Math.abs(p-h)>qc||Math.abs(_-l)>qc)&&(c.splice(o,0,Yc.push(bc(f,d,Math.abs(p-t)<qc&&r-_>qc?[t,Math.abs(h-t)<qc?l:r]:Math.abs(_-r)<qc&&e-p>qc?[Math.abs(l-r)<qc?h:e,r]:Math.abs(p-e)<qc&&_-n>qc?[e,Math.abs(h-e)<qc?l:n]:Math.abs(_-n)<qc&&p-t>qc?[Math.abs(l-n)<qc?h:t,n]:null))-1),++u);u&&(v=!1)}if(v){var y,g,x,m=1/0;for(i=0,v=null;i<b;++i)(a=Fc[i])&&(x=(y=(f=a.site)[0]-t)*y+(g=f[1]-n)*g)<m&&(m=x,v=a);if(v){var w=[t,n],M=[t,r],N=[e,r],T=[e,n];v.halfedges.push(Yc.push(bc(f=v.site,w,M))-1,Yc.push(bc(f,M,N))-1,Yc.push(bc(f,N,T))-1,Yc.push(bc(f,T,w))-1)}}for(i=0;i<b;++i)(a=Fc[i])&&(a.halfedges.length||delete Fc[i])}(f,o,c,u)}this.edges=Yc,this.cells=Fc,jc=Oc=Yc=Fc=null}Ic.prototype={constructor:Ic,polygons:function(){var t=this.edges;return this.cells.map(function(n){var e=n.halfedges.map(function(e){return mc(n,t[e])});return e.data=n.site.data,e})},triangles:function(){var t=[],n=this.edges;return this.cells.forEach(function(e,r){if(a=(i=e.halfedges).length)for(var i,a,f,o,c,u,s=e.site,h=-1,l=n[i[a-1]],d=l.left===s?l.right:l.left;++h<a;)f=d,d=(l=n[i[h]]).left===s?l.right:l.left,f&&d&&r<f.index&&r<d.index&&(c=f,u=d,((o=s)[0]-u[0])*(c[1]-o[1])-(o[0]-c[0])*(u[1]-o[1])<0)&&t.push([s.data,f.data,d.data])}),t},links:function(){return this.edges.filter(function(t){return t.right}).map(function(t){return{source:t.left.data,target:t.right.data}})},find:function(t,n,e){for(var r,i,a=this,f=a._found||0,o=a.cells.length;!(i=a.cells[f]);)if(++f>=o)return null;var c=t-i.site[0],u=n-i.site[1],s=c*c+u*u;do{i=a.cells[r=f],f=null,i.halfedges.forEach(function(e){var r=a.edges[e],o=r.left;if(o!==i.site&&o||(o=r.right)){var c=t-o[0],u=n-o[1],h=c*c+u*u;h<s&&(s=h,f=o.index)}})}while(null!==f);return a._found=r,null==e||s<=e*e?i.site:null}};function $c(t,n,e){this.k=t,this.x=n,this.y=e}$c.prototype={constructor:$c,scale:function(t){return 1===t?this:new $c(this.k*t,this.x,this.y)},translate:function(t,n){return 0===t&0===n?this:new $c(this.k,this.x+this.k*t,this.y+this.k*n)},apply:function(t){return[t[0]*this.k+this.x,t[1]*this.k+this.y]},applyX:function(t){return t*this.k+this.x},applyY:function(t){return t*this.k+this.y},invert:function(t){return[(t[0]-this.x)/this.k,(t[1]-this.y)/this.k]},invertX:function(t){return(t-this.x)/this.k},invertY:function(t){return(t-this.y)/this.k},rescaleX:function(t){return t.copy().domain(t.range().map(this.invertX,this).map(t.invert,t))},rescaleY:function(t){return t.copy().domain(t.range().map(this.invertY,this).map(t.invert,t))},toString:function(){return"translate("+this.x+","+this.y+") scale("+this.k+")"}};new $c(1,0,0);$c.prototype;var Bc=function(t){return t},Xc=function(t){if(null==t)return Bc;var n,e,r=t.scale[0],i=t.scale[1],a=t.translate[0],f=t.translate[1];return function(t,o){o||(n=e=0);var c=2,u=t.length,s=new Array(u);for(s[0]=(n+=t[0])*r+a,s[1]=(e+=t[1])*i+f;c<u;)s[c]=t[c],++c;return s}},Zc=function(t,n){for(var e,r=t.length,i=r-n;i<--r;)e=t[i],t[i++]=t[r],t[r]=e},Vc=function(t,n){return"GeometryCollection"===n.type?{type:"FeatureCollection",features:n.geometries.map(function(n){return Wc(t,n)})}:Wc(t,n)};function Wc(t,n){var e=n.id,r=n.bbox,i=null==n.properties?{}:n.properties,a=Jc(t,n);return null==e&&null==r?{type:"Feature",properties:i,geometry:a}:null==r?{type:"Feature",id:e,properties:i,geometry:a}:{type:"Feature",id:e,bbox:r,properties:i,geometry:a}}function Jc(t,n){var e=Xc(t.transform),r=t.arcs;function i(t,n){n.length&&n.pop();for(var i=r[t<0?~t:t],a=0,f=i.length;a<f;++a)n.push(e(i[a],a));t<0&&Zc(n,f)}function a(t){return e(t)}function f(t){for(var n=[],e=0,r=t.length;e<r;++e)i(t[e],n);return n.length<2&&n.push(n[0]),n}function o(t){for(var n=f(t);n.length<4;)n.push(n[0]);return n}function c(t){return t.map(o)}return function t(n){var e,r=n.type;switch(r){case"GeometryCollection":return{type:r,geometries:n.geometries.map(t)};case"Point":e=a(n.coordinates);break;case"MultiPoint":e=n.coordinates.map(a);break;case"LineString":e=f(n.arcs);break;case"MultiLineString":e=n.arcs.map(f);break;case"Polygon":e=c(n.arcs);break;case"MultiPolygon":e=n.arcs.map(c);break;default:return null}return{type:r,coordinates:e}}(n)}var Qc=new ArrayBuffer(16);new Float64Array(Qc),new Uint32Array(Qc);function Gc(t){var n=t[0],e=t[1],r=t[2];return Math.abs((n[0]-r[0])*(e[1]-n[1])-(n[0]-e[0])*(r[1]-n[1]))/2}function Kc(t,n){return t[1][2]-n[1][2]}function tu(t){return[t[0],t[1],0]}var nu=function(t,n){var e=t.transform?Xc(t.transform):tu,r=function(){var t={},n=[],e=0;function r(t,e){for(;e>0;){var r=(e+1>>1)-1,i=n[r];if(Kc(t,i)>=0)break;n[i._=e]=i,n[t._=e=r]=t}}function i(t,r){for(;;){var i=r+1<<1,a=i-1,f=r,o=n[f];if(a<e&&Kc(n[a],o)<0&&(o=n[f=a]),i<e&&Kc(n[i],o)<0&&(o=n[f=i]),f===r)break;n[o._=r]=o,n[t._=r=f]=t}}return t.push=function(t){return r(n[t._=e]=t,e++),e},t.pop=function(){if(!(e<=0)){var t,r=n[0];return--e>0&&(t=n[e],i(n[t._=0]=t,0)),r}},t.remove=function(t){var a,f=t._;if(n[f]===t)return f!==--e&&(Kc(a=n[e],t)<0?r:i)(n[a._=f]=a,f),f},t}();null==n&&(n=Gc);var i=t.arcs.map(function(t){var i,f,o,c=[],u=0;for(f=1,o=(t=t.map(e)).length-1;f<o;++f)(i=[t[f-1],t[f],t[f+1]])[1][2]=n(i),c.push(i),r.push(i);for(t[0][2]=t[o][2]=1/0,f=0,o=c.length;f<o;++f)(i=c[f]).previous=c[f-1],i.next=c[f+1];for(;i=r.pop();){var s=i.previous,h=i.next;i[1][2]<u?i[1][2]=u:u=i[1][2],s&&(s.next=h,s[2]=i[2],a(s)),h&&(h.previous=s,h[0]=i[0],a(h))}return t});function a(t){r.remove(t),t[1][2]=n(t),r.push(t)}return{type:"Topology",bbox:t.bbox,objects:t.objects,arcs:i}},eu=function(t,n){var e=[];return t.arcs.forEach(function(t){t.forEach(function(t){isFinite(t[2])&&e.push(t[2])})}),e.length&&function(t,n){if(!(e=t.length))return;if((n=+n)<=0||e<2)return t[0];if(n>=1)return t[e-1];var e,r=(e-1)*n,i=Math.floor(r),a=t[i],f=t[i+1];return a+(f-a)*(r-i)}(e.sort(ru),n)};function ru(t,n){return n-t}Math.PI,Math.abs,Math.atan2,Math.cos,Math.sin;Je("https://gist.githubusercontent.com/johnburnmurdoch/4199dbe55095c3e13de8d5b2e5e5307a/raw/fa018b25c24b7b5f47fd0568937ff6c04e384786/city_populations");let iu=Vc(ou,{type:"GeometryCollection",geometries:ou.objects.ne_10m_admin_0_countries.geometries.filter(t=>["Antarctica","Greenland"].includes(t.properties.ADMIN))}),au=(Xi(oa).scale(175.295).fitSize([220,125],iu),fetch("https://gist.githubusercontent.com/johnburnmurdoch/b6a18add7a2f8ee87a401cb3055ccb7b/raw/f46c5c442c5191afc105b934b4b68c653545b7c1/ne_10m_simplified.json",fu).then(Qe));var fu;let ou=function(){let t=nu(au);return t=function(t,n){n=null==n?Number.MIN_VALUE:+n;var e=t.arcs.map(function(t){for(var e,r=-1,i=0,a=t.length,f=new Array(a);++r<a;)(e=t[r])[2]>=n&&(f[i++]=[e[0],e[1]]);return f.length=i,f});return{type:"Topology",transform:t.transform,bbox:t.bbox,objects:t.objects,arcs:e}}(t,eu(t,.3))}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,